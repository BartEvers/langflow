
    {
        "kind": "exemplar",
        "title": "Research Translation Loop",
        "intent": [
            "This template iterates over search results using LoopComponent and translates each result into Portuguese automatically. 🚀"
        ],
        "components": [],
        "flow_json": {
            "name": "Research Translation Loop",
            "description": "This template iterates over search results using LoopComponent and translates each result into Portuguese automatically. 🚀",
            "icon": "",
            "icon_bg_color": "",
            "gradient": "",
            "data": {
            "nodes": [
                {
                "data": {
                    "id": "ArXivComponent-9XYf6",
                    "node": {
                    "base_classes": [
                        "DataFrame"
                    ],
                    "beta": false,
                    "conditional_paths": [],
                    "custom_fields": {},
                    "description": "Search and retrieve papers from arXiv.org",
                    "display_name": "arXiv",
                    "documentation": "",
                    "edited": false,
                    "field_order": [
                        "search_query",
                        "search_type",
                        "max_results"
                    ],
                    "frozen": false,
                    "icon": "arXiv",
                    "legacy": false,
                    "lf_version": "1.4.3",
                    "metadata": {
                        "code_hash": "b61405ff011f",
                        "module": "langflow.components.arxiv.arxiv.ArXivComponent"
                    },
                    "minimized": false,
                    "output_types": [],
                    "outputs": [
                        {
                        "allows_loop": false,
                        "cache": true,
                        "display_name": "DataFrame",
                        "group_outputs": false,
                        "method": "search_papers_dataframe",
                        "name": "dataframe",
                        "selected": "DataFrame",
                        "tool_mode": true,
                        "types": [
                            "DataFrame"
                        ],
                        "value": "__UNDEFINED__"
                        }
                    ],
                    "pinned": false,
                    "template": {
                        "_type": "Component",
                        "code": {
                        "advanced": true,
                        "dynamic": true,
                        "fileTypes": [],
                        "file_path": "",
                        "info": "",
                        "list": false,
                        "load_from_db": false,
                        "multiline": true,
                        "name": "code",
                        "password": false,
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "type": "code",
                        "value": "import urllib.request\nfrom urllib.parse import urlparse\nfrom xml.etree.ElementTree import Element\n\nfrom defusedxml.ElementTree import fromstring\n\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.io import DropdownInput, IntInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\n\n\nclass ArXivComponent(Component):\n    display_name = \"arXiv\"\n    description = \"Search and retrieve papers from arXiv.org\"\n    icon = \"arXiv\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n            info=\"The search query for arXiv papers (e.g., 'quantum computing')\",\n            tool_mode=True,\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Field\",\n            info=\"The field to search in\",\n            options=[\"all\", \"title\", \"abstract\", \"author\", \"cat\"],  # cat is for category\n            value=\"all\",\n        ),\n        IntInput(\n            name=\"max_results\",\n            display_name=\"Max Results\",\n            info=\"Maximum number of results to return\",\n            value=10,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"DataFrame\", name=\"dataframe\", method=\"search_papers_dataframe\"),\n    ]\n\n    def build_query_url(self) -> str:\n        \"\"\"Build the arXiv API query URL.\"\"\"\n        base_url = \"http://export.arxiv.org/api/query?\"\n\n        # Build the search query\n        search_query = f\"{self.search_type}:{self.search_query}\"\n\n        # URL parameters\n        params = {\n            \"search_query\": search_query,\n            \"max_results\": str(self.max_results),\n        }\n\n        # Convert params to URL query string\n        query_string = \"&\".join([f\"{k}={urllib.parse.quote(str(v))}\" for k, v in params.items()])\n\n        return base_url + query_string\n\n    def parse_atom_response(self, response_text: str) -> list[dict]:\n        \"\"\"Parse the Atom XML response from arXiv.\"\"\"\n        # Parse XML safely using defusedxml\n        root = fromstring(response_text)\n\n        # Define namespace dictionary for XML parsing\n        ns = {\"atom\": \"http://www.w3.org/2005/Atom\", \"arxiv\": \"http://arxiv.org/schemas/atom\"}\n\n        papers = []\n        # Process each entry (paper)\n        for entry in root.findall(\"atom:entry\", ns):\n            paper = {\n                \"id\": self._get_text(entry, \"atom:id\", ns),\n                \"title\": self._get_text(entry, \"atom:title\", ns),\n                \"summary\": self._get_text(entry, \"atom:summary\", ns),\n                \"published\": self._get_text(entry, \"atom:published\", ns),\n                \"updated\": self._get_text(entry, \"atom:updated\", ns),\n                \"authors\": [author.find(\"atom:name\", ns).text for author in entry.findall(\"atom:author\", ns)],\n                \"arxiv_url\": self._get_link(entry, \"alternate\", ns),\n                \"pdf_url\": self._get_link(entry, \"related\", ns),\n                \"comment\": self._get_text(entry, \"arxiv:comment\", ns),\n                \"journal_ref\": self._get_text(entry, \"arxiv:journal_ref\", ns),\n                \"primary_category\": self._get_category(entry, ns),\n                \"categories\": [cat.get(\"term\") for cat in entry.findall(\"atom:category\", ns)],\n            }\n            papers.append(paper)\n\n        return papers\n\n    def _get_text(self, element: Element, path: str, ns: dict) -> str | None:\n        \"\"\"Safely extract text from an XML element.\"\"\"\n        el = element.find(path, ns)\n        return el.text.strip() if el is not None and el.text else None\n\n    def _get_link(self, element: Element, rel: str, ns: dict) -> str | None:\n        \"\"\"Get link URL based on relation type.\"\"\"\n        for link in element.findall(\"atom:link\", ns):\n            if link.get(\"rel\") == rel:\n                return link.get(\"href\")\n        return None\n\n    def _get_category(self, element: Element, ns: dict) -> str | None:\n        \"\"\"Get primary category.\"\"\"\n        cat = element.find(\"arxiv:primary_category\", ns)\n        return cat.get(\"term\") if cat is not None else None\n\n    def run_model(self) -> DataFrame:\n        return self.search_papers_dataframe()\n\n    def search_papers(self) -> list[Data]:\n        \"\"\"Search arXiv and return results.\"\"\"\n        try:\n            # Build the query URL\n            url = self.build_query_url()\n\n            # Validate URL scheme and host\n            parsed_url = urlparse(url)\n            if parsed_url.scheme not in {\"http\", \"https\"}:\n                error_msg = f\"Invalid URL scheme: {parsed_url.scheme}\"\n                raise ValueError(error_msg)\n            if parsed_url.hostname != \"export.arxiv.org\":\n                error_msg = f\"Invalid host: {parsed_url.hostname}\"\n                raise ValueError(error_msg)\n\n            # Create a custom opener that only allows http/https schemes\n            class RestrictedHTTPHandler(urllib.request.HTTPHandler):\n                def http_open(self, req):\n                    return super().http_open(req)\n\n            class RestrictedHTTPSHandler(urllib.request.HTTPSHandler):\n                def https_open(self, req):\n                    return super().https_open(req)\n\n            # Build opener with restricted handlers\n            opener = urllib.request.build_opener(RestrictedHTTPHandler, RestrictedHTTPSHandler)\n            urllib.request.install_opener(opener)\n\n            # Make the request with validated URL using restricted opener\n            response = opener.open(url)\n            response_text = response.read().decode(\"utf-8\")\n\n            # Parse the response\n            papers = self.parse_atom_response(response_text)\n\n            # Convert to Data objects\n            results = [Data(data=paper) for paper in papers]\n            self.status = results\n        except (urllib.error.URLError, ValueError) as e:\n            error_data = Data(data={\"error\": f\"Request error: {e!s}\"})\n            self.status = error_data\n            return [error_data]\n        else:\n            return results\n\n    def search_papers_dataframe(self) -> DataFrame:\n        \"\"\"Convert the Arxiv search results to a DataFrame.\n\n        Returns:\n            DataFrame: A DataFrame containing the search results.\n        \"\"\"\n        data = self.search_papers()\n        return DataFrame(data)\n"
                        },
                        "max_results": {
                        "_input_type": "IntInput",
                        "advanced": false,
                        "display_name": "Max Results",
                        "dynamic": false,
                        "info": "Maximum number of results to return",
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "max_results",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "int",
                        "value": 3
                        },
                        "search_query": {
                        "_input_type": "MessageTextInput",
                        "advanced": false,
                        "display_name": "Search Query",
                        "dynamic": false,
                        "info": "The search query for arXiv papers (e.g., 'quantum computing')",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "search_query",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": true,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "search_type": {
                        "_input_type": "DropdownInput",
                        "advanced": false,
                        "combobox": false,
                        "dialog_inputs": {},
                        "display_name": "Search Field",
                        "dynamic": false,
                        "info": "The field to search in",
                        "name": "search_type",
                        "options": [
                            "all",
                            "title",
                            "abstract",
                            "author",
                            "cat"
                        ],
                        "options_metadata": [],
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "toggle": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "all"
                        }
                    },
                    "tool_mode": false
                    },
                    "showNode": true,
                    "type": "ArXivComponent"
                },
                "dragging": false,
                "id": "ArXivComponent-9XYf6",
                "measured": {
                    "height": 369,
                    "width": 320
                },
                "position": {
                    "x": 81.59312530546094,
                    "y": 3.9397854556273906
                },
                "selected": false,
                "type": "genericNode"
                },
                {
                "data": {
                    "id": "ChatOutput-V5GRt",
                    "node": {
                    "base_classes": [
                        "Message"
                    ],
                    "beta": false,
                    "conditional_paths": [],
                    "custom_fields": {},
                    "description": "Display a chat message in the Playground.",
                    "display_name": "Chat Output",
                    "documentation": "",
                    "edited": false,
                    "field_order": [
                        "input_value",
                        "should_store_message",
                        "sender",
                        "sender_name",
                        "session_id",
                        "data_template",
                        "background_color",
                        "chat_icon",
                        "text_color",
                        "clean_data"
                    ],
                    "frozen": false,
                    "icon": "MessagesSquare",
                    "legacy": false,
                    "lf_version": "1.4.3",
                    "metadata": {
                        "code_hash": "6f74e04e39d5",
                        "module": "langflow.components.input_output.chat_output.ChatOutput"
                    },
                    "minimized": true,
                    "output_types": [],
                    "outputs": [
                        {
                        "allows_loop": false,
                        "cache": true,
                        "display_name": "Output Message",
                        "group_outputs": false,
                        "method": "message_response",
                        "name": "message",
                        "selected": "Message",
                        "tool_mode": true,
                        "types": [
                            "Message"
                        ],
                        "value": "__UNDEFINED__"
                        }
                    ],
                    "pinned": false,
                    "template": {
                        "_type": "Component",
                        "background_color": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Background Color",
                        "dynamic": false,
                        "info": "The background color of the icon.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "background_color",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "chat_icon": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Icon",
                        "dynamic": false,
                        "info": "The icon of the message.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "chat_icon",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "clean_data": {
                        "_input_type": "BoolInput",
                        "advanced": true,
                        "display_name": "Basic Clean Data",
                        "dynamic": false,
                        "info": "Whether to clean the data",
                        "list": false,
                        "list_add_label": "Add More",
                        "name": "clean_data",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "bool",
                        "value": true
                        },
                        "code": {
                        "advanced": true,
                        "dynamic": true,
                        "fileTypes": [],
                        "file_path": "",
                        "info": "",
                        "list": false,
                        "load_from_db": false,
                        "multiline": true,
                        "name": "code",
                        "password": false,
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "type": "code",
                        "value": "from collections.abc import Generator\nfrom typing import Any\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, DropdownInput, HandleInput, MessageTextInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.template.field.base import Output\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-output\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Output Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _serialize_data(self, data: Data) -> str:\n        \"\"\"Serialize Data object to JSON string.\"\"\"\n        # Convert data.data to JSON-serializable format\n        serializable_data = jsonable_encoder(data.data)\n        # Serialize with orjson, enabling pretty printing with indentation\n        json_bytes = orjson.dumps(serializable_data, option=orjson.OPT_INDENT_2)\n        # Convert bytes to string and wrap in Markdown code blocks\n        return \"```json\\n\" + json_bytes.decode(\"utf-8\") + \"\\n```\"\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([safe_convert(item, clean_data=self.clean_data) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return safe_convert(self.input_value)\n"
                        },
                        "data_template": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Data Template",
                        "dynamic": false,
                        "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "data_template",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "{text}"
                        },
                        "input_value": {
                        "_input_type": "HandleInput",
                        "advanced": false,
                        "display_name": "Inputs",
                        "dynamic": false,
                        "info": "Message to be passed as output.",
                        "input_types": [
                            "Data",
                            "DataFrame",
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "name": "input_value",
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "trace_as_metadata": true,
                        "type": "other",
                        "value": ""
                        },
                        "sender": {
                        "_input_type": "DropdownInput",
                        "advanced": true,
                        "combobox": false,
                        "dialog_inputs": {},
                        "display_name": "Sender Type",
                        "dynamic": false,
                        "info": "Type of sender.",
                        "name": "sender",
                        "options": [
                            "Machine",
                            "User"
                        ],
                        "options_metadata": [],
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "toggle": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "Machine"
                        },
                        "sender_name": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Sender Name",
                        "dynamic": false,
                        "info": "Name of the sender.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "sender_name",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "AI"
                        },
                        "session_id": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Session ID",
                        "dynamic": false,
                        "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "session_id",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "should_store_message": {
                        "_input_type": "BoolInput",
                        "advanced": true,
                        "display_name": "Store Messages",
                        "dynamic": false,
                        "info": "Store the message in the history.",
                        "list": false,
                        "list_add_label": "Add More",
                        "name": "should_store_message",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "bool",
                        "value": true
                        },
                        "text_color": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Text Color",
                        "dynamic": false,
                        "info": "The text color of the name",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "text_color",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        }
                    },
                    "tool_mode": false
                    },
                    "showNode": false,
                    "type": "ChatOutput"
                },
                "dragging": false,
                "id": "ChatOutput-V5GRt",
                "measured": {
                    "height": 48,
                    "width": 192
                },
                "position": {
                    "x": 1214.3761564586034,
                    "y": 511.8564949852382
                },
                "selected": false,
                "type": "genericNode"
                },
                {
                "data": {
                    "id": "ChatInput-FvGHL",
                    "node": {
                    "base_classes": [
                        "Message"
                    ],
                    "beta": false,
                    "conditional_paths": [],
                    "custom_fields": {},
                    "description": "Get chat inputs from the Playground.",
                    "display_name": "Chat Input",
                    "documentation": "",
                    "edited": false,
                    "field_order": [
                        "input_value",
                        "should_store_message",
                        "sender",
                        "sender_name",
                        "session_id",
                        "files",
                        "background_color",
                        "chat_icon",
                        "text_color"
                    ],
                    "frozen": false,
                    "icon": "MessagesSquare",
                    "legacy": false,
                    "lf_version": "1.4.3",
                    "metadata": {
                        "code_hash": "192913db3453",
                        "module": "langflow.components.input_output.chat.ChatInput"
                    },
                    "minimized": true,
                    "output_types": [],
                    "outputs": [
                        {
                        "allows_loop": false,
                        "cache": true,
                        "display_name": "Chat Message",
                        "group_outputs": false,
                        "method": "message_response",
                        "name": "message",
                        "selected": "Message",
                        "tool_mode": true,
                        "types": [
                            "Message"
                        ],
                        "value": "__UNDEFINED__"
                        }
                    ],
                    "pinned": false,
                    "template": {
                        "_type": "Component",
                        "background_color": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Background Color",
                        "dynamic": false,
                        "info": "The background color of the icon.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "background_color",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "chat_icon": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Icon",
                        "dynamic": false,
                        "info": "The icon of the message.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "chat_icon",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "code": {
                        "advanced": true,
                        "dynamic": true,
                        "fileTypes": [],
                        "file_path": "",
                        "info": "",
                        "list": false,
                        "load_from_db": false,
                        "multiline": true,
                        "name": "code",
                        "password": false,
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "type": "code",
                        "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-input\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Chat Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                        },
                        "files": {
                        "_input_type": "FileInput",
                        "advanced": true,
                        "display_name": "Files",
                        "dynamic": false,
                        "fileTypes": [
                            "txt",
                            "md",
                            "mdx",
                            "csv",
                            "json",
                            "yaml",
                            "yml",
                            "xml",
                            "html",
                            "htm",
                            "pdf",
                            "docx",
                            "py",
                            "sh",
                            "sql",
                            "js",
                            "ts",
                            "tsx",
                            "jpg",
                            "jpeg",
                            "png",
                            "bmp",
                            "image"
                        ],
                        "file_path": "",
                        "info": "Files to be sent with the message.",
                        "list": true,
                        "list_add_label": "Add More",
                        "name": "files",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "temp_file": true,
                        "title_case": false,
                        "trace_as_metadata": true,
                        "type": "file",
                        "value": ""
                        },
                        "input_value": {
                        "_input_type": "MultilineInput",
                        "advanced": false,
                        "copy_field": false,
                        "display_name": "Input Text",
                        "dynamic": false,
                        "info": "Message to be passed as input.",
                        "input_types": [],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "multiline": true,
                        "name": "input_value",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "ai"
                        },
                        "sender": {
                        "_input_type": "DropdownInput",
                        "advanced": true,
                        "combobox": false,
                        "dialog_inputs": {},
                        "display_name": "Sender Type",
                        "dynamic": false,
                        "info": "Type of sender.",
                        "name": "sender",
                        "options": [
                            "Machine",
                            "User"
                        ],
                        "options_metadata": [],
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "toggle": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "User"
                        },
                        "sender_name": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Sender Name",
                        "dynamic": false,
                        "info": "Name of the sender.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "sender_name",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "User"
                        },
                        "session_id": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Session ID",
                        "dynamic": false,
                        "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "session_id",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "should_store_message": {
                        "_input_type": "BoolInput",
                        "advanced": true,
                        "display_name": "Store Messages",
                        "dynamic": false,
                        "info": "Store the message in the history.",
                        "list": false,
                        "list_add_label": "Add More",
                        "name": "should_store_message",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "bool",
                        "value": true
                        },
                        "text_color": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Text Color",
                        "dynamic": false,
                        "info": "The text color of the name",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "text_color",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        }
                    },
                    "tool_mode": false
                    },
                    "showNode": true,
                    "type": "ChatInput"
                },
                "dragging": false,
                "id": "ChatInput-FvGHL",
                "measured": {
                    "height": 204,
                    "width": 320
                },
                "position": {
                    "x": -333.65585758816223,
                    "y": 107.75353484470551
                },
                "selected": false,
                "type": "genericNode"
                },
                {
                "data": {
                    "id": "note-EAdvq",
                    "node": {
                    "description": "# **Langflow Loop Component Template - ArXiv search result Translator** \nThis template translates research paper summaries on ArXiv into Portuguese and summarizes them. \n Using **Langflow’s looping mechanism**, the template iterates through multiple research papers, translates them with the **OpenAI** model component, and outputs an aggregated version of all translated papers.  \n\n## Quickstart \n 1. Add your OpenAI API key to the **Language Model** component. \n2. In the **Playground**, enter a query related to a research topic (for example, “Quantum Computing Advancements”).  \n\n  The flow fetches a list of research papers from ArXiv matching the query. Each paper in the retrieved list is processed one-by-one using the Langflow **Loop component**. \n\n  The abstract of each paper is translated into Portuguese by the **OpenAI** model component. \n\n Once all papers are translated, the system aggregates them into a **single structured output**.",
                    "display_name": "",
                    "documentation": "",
                    "template": {}
                    },
                    "type": "note"
                },
                "dragging": false,
                "height": 647,
                "id": "note-EAdvq",
                "measured": {
                    "height": 647,
                    "width": 576
                },
                "position": {
                    "x": -890.9006297459302,
                    "y": -233.44894493951168
                },
                "resizing": false,
                "selected": false,
                "type": "noteNode",
                "width": 576
                },
                {
                "data": {
                    "id": "ParserComponent-9WZlS",
                    "node": {
                    "base_classes": [
                        "Message"
                    ],
                    "beta": false,
                    "conditional_paths": [],
                    "custom_fields": {},
                    "description": "Extracts text using a template.",
                    "display_name": "Parser",
                    "documentation": "",
                    "edited": false,
                    "field_order": [
                        "input_data",
                        "mode",
                        "pattern",
                        "sep"
                    ],
                    "frozen": false,
                    "icon": "braces",
                    "legacy": false,
                    "lf_version": "1.4.3",
                    "metadata": {
                        "code_hash": "556209520650",
                        "module": "langflow.components.processing.parser.ParserComponent"
                    },
                    "minimized": false,
                    "output_types": [],
                    "outputs": [
                        {
                        "allows_loop": false,
                        "cache": true,
                        "display_name": "Parsed Text",
                        "group_outputs": false,
                        "method": "parse_combined_text",
                        "name": "parsed_text",
                        "selected": "Message",
                        "tool_mode": true,
                        "types": [
                            "Message"
                        ],
                        "value": "__UNDEFINED__"
                        }
                    ],
                    "pinned": false,
                    "template": {
                        "_type": "Component",
                        "code": {
                        "advanced": true,
                        "dynamic": true,
                        "fileTypes": [],
                        "file_path": "",
                        "info": "",
                        "list": false,
                        "load_from_db": false,
                        "multiline": true,
                        "name": "code",
                        "password": false,
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "type": "code",
                        "value": "from langflow.custom.custom_component.component import Component\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, HandleInput, MessageTextInput, MultilineInput, TabInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.template.field.base import Output\n\n\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = \"Extracts text using a template.\"\n    documentation: str = \"https://docs.langflow.org/components-processing#parser\"\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use variables within curly brackets to extract column values for DataFrames \"\n                \"or key values for Data.\"\n                \"For example: `Name: {Name}, Age: {Age}, Country: {Country}`\"\n            ),\n            value=\"Text: {text}\",  # Example default\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    def parse_combined_text(self) -> Message:\n        \"\"\"Parse all rows/items into a single text or convert input to string if `stringify` is enabled.\"\"\"\n        # Early return for stringify option\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        df, data = self._clean_args()\n\n        lines = []\n        if df is not None:\n            for _, row in df.iterrows():\n                formatted_text = self.pattern.format(**row.to_dict())\n                lines.append(formatted_text)\n        elif data is not None:\n            formatted_text = self.pattern.format(**data.data)\n            lines.append(formatted_text)\n\n        combined_text = self.sep.join(lines)\n        self.status = combined_text\n        return Message(text=combined_text)\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([safe_convert(item, clean_data=self.clean_data or False) for item in self.input_data])\n        else:\n            result = safe_convert(self.input_data or False)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n"
                        },
                        "input_data": {
                        "_input_type": "HandleInput",
                        "advanced": false,
                        "display_name": "Data or DataFrame",
                        "dynamic": false,
                        "info": "Accepts either a DataFrame or a Data object.",
                        "input_types": [
                            "DataFrame",
                            "Data"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "name": "input_data",
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "trace_as_metadata": true,
                        "type": "other",
                        "value": ""
                        },
                        "mode": {
                        "_input_type": "TabInput",
                        "advanced": false,
                        "display_name": "Mode",
                        "dynamic": false,
                        "info": "Convert into raw string instead of using a template.",
                        "load_from_db": false,
                        "name": "mode",
                        "options": [
                            "Parser",
                            "Stringify"
                        ],
                        "placeholder": "",
                        "real_time_refresh": true,
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "tab",
                        "value": "Stringify"
                        },
                        "pattern": {
                        "_input_type": "MultilineInput",
                        "advanced": false,
                        "copy_field": false,
                        "display_name": "Template",
                        "dynamic": true,
                        "info": "Use variables within curly brackets to extract column values for DataFrames or key values for Data.For example: `Name: {Name}, Age: {Age}, Country: {Country}`",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "multiline": true,
                        "name": "pattern",
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "Text: {dt}"
                        },
                        "sep": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Separator",
                        "dynamic": false,
                        "info": "String used to separate rows/items.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "sep",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "\n"
                        }
                    },
                    "tool_mode": false
                    },
                    "showNode": true,
                    "type": "ParserComponent"
                },
                "dragging": false,
                "id": "ParserComponent-9WZlS",
                "measured": {
                    "height": 329,
                    "width": 320
                },
                "position": {
                    "x": 971.3987248215344,
                    "y": -186.6658506576822
                },
                "selected": false,
                "type": "genericNode"
                },
                {
                "data": {
                    "id": "LoopComponent-UEMV2",
                    "node": {
                    "base_classes": [
                        "Data",
                        "DataFrame"
                    ],
                    "beta": false,
                    "conditional_paths": [],
                    "custom_fields": {},
                    "description": "Iterates over a list of Data objects, outputting one item at a time and aggregating results from loop inputs.",
                    "display_name": "Loop",
                    "documentation": "",
                    "edited": false,
                    "field_order": [
                        "data"
                    ],
                    "frozen": false,
                    "icon": "infinity",
                    "legacy": false,
                    "lf_version": "1.4.3",
                    "metadata": {
                        "code_hash": "5b234f78c942",
                        "module": "langflow.components.logic.loop.LoopComponent"
                    },
                    "minimized": false,
                    "output_types": [],
                    "outputs": [
                        {
                        "allows_loop": true,
                        "cache": true,
                        "display_name": "Item",
                        "group_outputs": true,
                        "method": "item_output",
                        "name": "item",
                        "selected": "Data",
                        "tool_mode": true,
                        "types": [
                            "Data"
                        ],
                        "value": "__UNDEFINED__"
                        },
                        {
                        "allows_loop": false,
                        "cache": true,
                        "display_name": "Done",
                        "group_outputs": true,
                        "method": "done_output",
                        "name": "done",
                        "selected": "DataFrame",
                        "tool_mode": true,
                        "types": [
                            "DataFrame"
                        ],
                        "value": "__UNDEFINED__"
                        }
                    ],
                    "pinned": false,
                    "template": {
                        "_type": "Component",
                        "code": {
                        "advanced": true,
                        "dynamic": true,
                        "fileTypes": [],
                        "file_path": "",
                        "info": "",
                        "list": false,
                        "load_from_db": false,
                        "multiline": true,
                        "name": "code",
                        "password": false,
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "type": "code",
                        "value": "from langflow.custom.custom_component.component import Component\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.template.field.base import Output\n\n\nclass LoopComponent(Component):\n    display_name = \"Loop\"\n    description = (\n        \"Iterates over a list of Data objects, outputting one item at a time and aggregating results from loop inputs.\"\n    )\n    documentation: str = \"https://docs.langflow.org/components-logic#loop\"\n    icon = \"infinity\"\n\n    inputs = [\n        HandleInput(\n            name=\"data\",\n            display_name=\"Inputs\",\n            info=\"The initial list of Data objects or DataFrame to iterate over.\",\n            input_types=[\"DataFrame\"],\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Item\", name=\"item\", method=\"item_output\", allows_loop=True, group_outputs=True),\n        Output(display_name=\"Done\", name=\"done\", method=\"done_output\", group_outputs=True),\n    ]\n\n    def initialize_data(self) -> None:\n        \"\"\"Initialize the data list, context index, and aggregated list.\"\"\"\n        if self.ctx.get(f\"{self._id}_initialized\", False):\n            return\n\n        # Ensure data is a list of Data objects\n        data_list = self._validate_data(self.data)\n\n        # Store the initial data and context variables\n        self.update_ctx(\n            {\n                f\"{self._id}_data\": data_list,\n                f\"{self._id}_index\": 0,\n                f\"{self._id}_aggregated\": [],\n                f\"{self._id}_initialized\": True,\n            }\n        )\n\n    def _validate_data(self, data):\n        \"\"\"Validate and return a list of Data objects.\"\"\"\n        if isinstance(data, DataFrame):\n            return data.to_data_list()\n        if isinstance(data, Data):\n            return [data]\n        if isinstance(data, list) and all(isinstance(item, Data) for item in data):\n            return data\n        msg = \"The 'data' input must be a DataFrame, a list of Data objects, or a single Data object.\"\n        raise TypeError(msg)\n\n    def evaluate_stop_loop(self) -> bool:\n        \"\"\"Evaluate whether to stop item or done output.\"\"\"\n        current_index = self.ctx.get(f\"{self._id}_index\", 0)\n        data_length = len(self.ctx.get(f\"{self._id}_data\", []))\n        return current_index > data_length\n\n    def item_output(self) -> Data:\n        \"\"\"Output the next item in the list or stop if done.\"\"\"\n        self.initialize_data()\n        current_item = Data(text=\"\")\n\n        if self.evaluate_stop_loop():\n            self.stop(\"item\")\n        else:\n            # Get data list and current index\n            data_list, current_index = self.loop_variables()\n            if current_index < len(data_list):\n                # Output current item and increment index\n                try:\n                    current_item = data_list[current_index]\n                except IndexError:\n                    current_item = Data(text=\"\")\n            self.aggregated_output()\n            self.update_ctx({f\"{self._id}_index\": current_index + 1})\n\n        # Now we need to update the dependencies for the next run\n        self.update_dependency()\n        return current_item\n\n    def update_dependency(self):\n        item_dependency_id = self.get_incoming_edge_by_target_param(\"item\")\n        if item_dependency_id not in self.graph.run_manager.run_predecessors[self._id]:\n            self.graph.run_manager.run_predecessors[self._id].append(item_dependency_id)\n\n    def done_output(self) -> DataFrame:\n        \"\"\"Trigger the done output when iteration is complete.\"\"\"\n        self.initialize_data()\n\n        if self.evaluate_stop_loop():\n            self.stop(\"item\")\n            self.start(\"done\")\n\n            aggregated = self.ctx.get(f\"{self._id}_aggregated\", [])\n\n            return DataFrame(aggregated)\n        self.stop(\"done\")\n        return DataFrame([])\n\n    def loop_variables(self):\n        \"\"\"Retrieve loop variables from context.\"\"\"\n        return (\n            self.ctx.get(f\"{self._id}_data\", []),\n            self.ctx.get(f\"{self._id}_index\", 0),\n        )\n\n    def aggregated_output(self) -> list[Data]:\n        \"\"\"Return the aggregated list once all items are processed.\"\"\"\n        self.initialize_data()\n\n        # Get data list and aggregated list\n        data_list = self.ctx.get(f\"{self._id}_data\", [])\n        aggregated = self.ctx.get(f\"{self._id}_aggregated\", [])\n        loop_input = self.item\n        if loop_input is not None and not isinstance(loop_input, str) and len(aggregated) <= len(data_list):\n            aggregated.append(loop_input)\n            self.update_ctx({f\"{self._id}_aggregated\": aggregated})\n        return aggregated\n"
                        },
                        "data": {
                        "_input_type": "HandleInput",
                        "advanced": false,
                        "display_name": "Inputs",
                        "dynamic": false,
                        "info": "The initial list of Data objects or DataFrame to iterate over.",
                        "input_types": [
                            "DataFrame"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "name": "data",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "trace_as_metadata": true,
                        "type": "other",
                        "value": ""
                        }
                    },
                    "tool_mode": false
                    },
                    "showNode": true,
                    "type": "LoopComponent"
                },
                "dragging": false,
                "id": "LoopComponent-UEMV2",
                "measured": {
                    "height": 242,
                    "width": 320
                },
                "position": {
                    "x": 541.1188345961908,
                    "y": 181.38181401206583
                },
                "selected": false,
                "type": "genericNode"
                },
                {
                "data": {
                    "id": "LanguageModelComponent-Xaabd",
                    "node": {
                    "base_classes": [
                        "LanguageModel",
                        "Message"
                    ],
                    "beta": false,
                    "conditional_paths": [],
                    "custom_fields": {},
                    "description": "Runs a language model given a specified provider. ",
                    "display_name": "Language Model",
                    "documentation": "",
                    "edited": false,
                    "field_order": [
                        "provider",
                        "model_name",
                        "api_key",
                        "input_value",
                        "system_message",
                        "stream",
                        "temperature"
                    ],
                    "frozen": false,
                    "icon": "brain-circuit",
                    "legacy": false,
                    "lf_version": "1.4.3",
                    "metadata": {
                        "keywords": [
                        "model",
                        "llm",
                        "language model",
                        "large language model"
                        ]
                    },
                    "minimized": false,
                    "output_types": [],
                    "outputs": [
                        {
                        "types": [
                            "Message"
                        ],
                        "selected": "Message",
                        "name": "text_output",
                        "display_name": "Model Response",
                        "method": "text_response",
                        "value": "__UNDEFINED__",
                        "cache": true,
                        "required_inputs": null,
                        "allows_loop": false,
                        "group_outputs": false,
                        "options": null,
                        "tool_mode": true
                        },
                        {
                        "types": [
                            "LanguageModel"
                        ],
                        "selected": "LanguageModel",
                        "name": "model_output",
                        "display_name": "Language Model",
                        "method": "build_model",
                        "value": "__UNDEFINED__",
                        "cache": true,
                        "required_inputs": null,
                        "allows_loop": false,
                        "group_outputs": false,
                        "options": null,
                        "tool_mode": true
                        }
                    ],
                    "pinned": false,
                    "priority": 0,
                    "template": {
                        "_type": "Component",
                        "api_key": {
                        "_input_type": "SecretStrInput",
                        "advanced": false,
                        "display_name": "OpenAI API Key",
                        "dynamic": false,
                        "info": "Model Provider API key",
                        "input_types": [],
                        "load_from_db": true,
                        "name": "api_key",
                        "password": true,
                        "placeholder": "",
                        "real_time_refresh": true,
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "type": "str",
                        "value": "OPENAI_API_KEY"
                        },
                        "code": {
                        "advanced": true,
                        "dynamic": true,
                        "fileTypes": [],
                        "file_path": "",
                        "info": "",
                        "list": false,
                        "load_from_db": false,
                        "multiline": true,
                        "name": "code",
                        "password": false,
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "type": "code",
                        "value": "from typing import Any\n\nfrom langchain_anthropic import ChatAnthropic\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain_openai import ChatOpenAI\n\nfrom langflow.base.models.anthropic_constants import ANTHROPIC_MODELS\nfrom langflow.base.models.google_generative_ai_constants import GOOGLE_GENERATIVE_AI_MODELS\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_CHAT_MODEL_NAMES, OPENAI_REASONING_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MultilineInput, SecretStrInput, SliderInput\nfrom langflow.schema.dotdict import dotdict\n\n\nclass LanguageModelComponent(LCModelComponent):\n    display_name = \"Language Model\"\n    description = \"Runs a language model given a specified provider.\"\n    documentation: str = \"https://docs.langflow.org/components-models\"\n    icon = \"brain-circuit\"\n    category = \"models\"\n    priority = 0  # Set priority to 0 to make it appear first\n\n    inputs = [\n        DropdownInput(\n            name=\"provider\",\n            display_name=\"Model Provider\",\n            options=[\"OpenAI\", \"Anthropic\", \"Google\"],\n            value=\"OpenAI\",\n            info=\"Select the model provider\",\n            real_time_refresh=True,\n            options_metadata=[{\"icon\": \"OpenAI\"}, {\"icon\": \"Anthropic\"}, {\"icon\": \"GoogleGenerativeAI\"}],\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            options=OPENAI_CHAT_MODEL_NAMES + OPENAI_REASONING_MODEL_NAMES,\n            value=OPENAI_CHAT_MODEL_NAMES[0],\n            info=\"Select the model to use\",\n            real_time_refresh=True,\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"Model Provider API key\",\n            required=False,\n            show=True,\n            real_time_refresh=True,\n        ),\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Input\",\n            info=\"The input text to send to the model\",\n        ),\n        MultilineInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"A system message that helps set the behavior of the assistant\",\n            advanced=False,\n        ),\n        BoolInput(\n            name=\"stream\",\n            display_name=\"Stream\",\n            info=\"Whether to stream the response\",\n            value=False,\n            advanced=True,\n        ),\n        SliderInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.1,\n            info=\"Controls randomness in responses\",\n            range_spec=RangeSpec(min=0, max=1, step=0.01),\n            advanced=True,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:\n        provider = self.provider\n        model_name = self.model_name\n        temperature = self.temperature\n        stream = self.stream\n\n        if provider == \"OpenAI\":\n            if not self.api_key:\n                msg = \"OpenAI API key is required when using OpenAI provider\"\n                raise ValueError(msg)\n\n            if model_name in OPENAI_REASONING_MODEL_NAMES:\n                # reasoning models do not support temperature (yet)\n                temperature = None\n\n            return ChatOpenAI(\n                model_name=model_name,\n                temperature=temperature,\n                streaming=stream,\n                openai_api_key=self.api_key,\n            )\n        if provider == \"Anthropic\":\n            if not self.api_key:\n                msg = \"Anthropic API key is required when using Anthropic provider\"\n                raise ValueError(msg)\n            return ChatAnthropic(\n                model=model_name,\n                temperature=temperature,\n                streaming=stream,\n                anthropic_api_key=self.api_key,\n            )\n        if provider == \"Google\":\n            if not self.api_key:\n                msg = \"Google API key is required when using Google provider\"\n                raise ValueError(msg)\n            return ChatGoogleGenerativeAI(\n                model=model_name,\n                temperature=temperature,\n                streaming=stream,\n                google_api_key=self.api_key,\n            )\n        msg = f\"Unknown provider: {provider}\"\n        raise ValueError(msg)\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None) -> dotdict:\n        if field_name == \"provider\":\n            if field_value == \"OpenAI\":\n                build_config[\"model_name\"][\"options\"] = OPENAI_CHAT_MODEL_NAMES + OPENAI_REASONING_MODEL_NAMES\n                build_config[\"model_name\"][\"value\"] = OPENAI_CHAT_MODEL_NAMES[0]\n                build_config[\"api_key\"][\"display_name\"] = \"OpenAI API Key\"\n            elif field_value == \"Anthropic\":\n                build_config[\"model_name\"][\"options\"] = ANTHROPIC_MODELS\n                build_config[\"model_name\"][\"value\"] = ANTHROPIC_MODELS[0]\n                build_config[\"api_key\"][\"display_name\"] = \"Anthropic API Key\"\n            elif field_value == \"Google\":\n                build_config[\"model_name\"][\"options\"] = GOOGLE_GENERATIVE_AI_MODELS\n                build_config[\"model_name\"][\"value\"] = GOOGLE_GENERATIVE_AI_MODELS[0]\n                build_config[\"api_key\"][\"display_name\"] = \"Google API Key\"\n        elif field_name == \"model_name\" and field_value.startswith(\"o1\") and self.provider == \"OpenAI\":\n            # Hide system_message for o1 models - currently unsupported\n            if \"system_message\" in build_config:\n                build_config[\"system_message\"][\"show\"] = False\n        elif field_name == \"model_name\" and not field_value.startswith(\"o1\") and \"system_message\" in build_config:\n            build_config[\"system_message\"][\"show\"] = True\n        return build_config\n"
                        },
                        "input_value": {
                        "_input_type": "MessageInput",
                        "advanced": false,
                        "display_name": "Input",
                        "dynamic": false,
                        "info": "The input text to send to the model",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "input_value",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "model_name": {
                        "_input_type": "DropdownInput",
                        "advanced": false,
                        "combobox": false,
                        "dialog_inputs": {},
                        "display_name": "Model Name",
                        "dynamic": false,
                        "info": "Select the model to use",
                        "name": "model_name",
                        "options": [
                            "gpt-4o-mini",
                            "gpt-4o",
                            "gpt-4.1",
                            "gpt-4.1-mini",
                            "gpt-4.1-nano",
                            "gpt-4.5-preview",
                            "gpt-4-turbo",
                            "gpt-4-turbo-preview",
                            "gpt-4",
                            "gpt-3.5-turbo"
                        ],
                        "options_metadata": [],
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "toggle": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "gpt-4o-mini"
                        },
                        "provider": {
                        "_input_type": "DropdownInput",
                        "advanced": false,
                        "combobox": false,
                        "dialog_inputs": {},
                        "display_name": "Model Provider",
                        "dynamic": false,
                        "info": "Select the model provider",
                        "name": "provider",
                        "options": [
                            "OpenAI",
                            "Anthropic",
                            "Google"
                        ],
                        "options_metadata": [
                            {
                            "icon": "OpenAI"
                            },
                            {
                            "icon": "Anthropic"
                            },
                            {
                            "icon": "Google"
                            }
                        ],
                        "placeholder": "",
                        "real_time_refresh": true,
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "toggle": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "OpenAI"
                        },
                        "stream": {
                        "_input_type": "BoolInput",
                        "advanced": true,
                        "display_name": "Stream",
                        "dynamic": false,
                        "info": "Whether to stream the response",
                        "list": false,
                        "list_add_label": "Add More",
                        "name": "stream",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "bool",
                        "value": false
                        },
                        "system_message": {
                        "_input_type": "MultilineInput",
                        "advanced": false,
                        "copy_field": false,
                        "display_name": "System Message",
                        "dynamic": false,
                        "info": "A system message that helps set the behavior of the assistant",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "multiline": true,
                        "name": "system_message",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "Translate to Portuguese and output in structured formatReturn only the JSON and no additional text."
                        },
                        "temperature": {
                        "_input_type": "SliderInput",
                        "advanced": true,
                        "display_name": "Temperature",
                        "dynamic": false,
                        "info": "Controls randomness in responses",
                        "max_label": "",
                        "max_label_icon": "",
                        "min_label": "",
                        "min_label_icon": "",
                        "name": "temperature",
                        "placeholder": "",
                        "range_spec": {
                            "max": 1,
                            "min": 0,
                            "step": 0.01,
                            "step_type": "float"
                        },
                        "required": false,
                        "show": true,
                        "slider_buttons": false,
                        "slider_buttons_options": [],
                        "slider_input": false,
                        "title_case": false,
                        "tool_mode": false,
                        "type": "slider",
                        "value": 0.1
                        }
                    },
                    "tool_mode": false,
                    "last_updated": "2025-08-12T18:38:05.325Z"
                    },
                    "selected_output": "text_output",
                    "showNode": true,
                    "type": "LanguageModelComponent"
                },
                "dragging": false,
                "id": "LanguageModelComponent-Xaabd",
                "measured": {
                    "height": 534,
                    "width": 320
                },
                "position": {
                    "x": 1472.0991866325971,
                    "y": -182.4108205734875
                },
                "selected": false,
                "type": "genericNode"
                },
                {
                "data": {
                    "id": "TypeConverterComponent-pwAAO",
                    "node": {
                    "base_classes": [
                        "Message"
                    ],
                    "beta": false,
                    "category": "processing",
                    "conditional_paths": [],
                    "custom_fields": {},
                    "description": "Convert between different types (Message, Data, DataFrame)",
                    "display_name": "Type Convert",
                    "documentation": "",
                    "edited": false,
                    "field_order": [
                        "input_data",
                        "output_type"
                    ],
                    "frozen": false,
                    "icon": "repeat",
                    "key": "TypeConverterComponent",
                    "legacy": false,
                    "metadata": {
                        "code_hash": "38e56a852063",
                        "module": "langflow.components.processing.converter.TypeConverterComponent"
                    },
                    "minimized": false,
                    "output_types": [],
                    "outputs": [
                        {
                        "allows_loop": false,
                        "cache": true,
                        "display_name": "Data Output",
                        "group_outputs": false,
                        "hidden": null,
                        "method": "convert_to_data",
                        "name": "data_output",
                        "options": null,
                        "required_inputs": null,
                        "selected": "Data",
                        "tool_mode": true,
                        "types": [
                            "Data"
                        ],
                        "value": "__UNDEFINED__"
                        }
                    ],
                    "pinned": false,
                    "score": 0.007568328950209746,
                    "template": {
                        "_type": "Component",
                        "code": {
                        "advanced": true,
                        "dynamic": true,
                        "fileTypes": [],
                        "file_path": "",
                        "info": "",
                        "list": false,
                        "load_from_db": false,
                        "multiline": true,
                        "name": "code",
                        "password": false,
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "type": "code",
                        "value": "from typing import Any\n\nfrom langflow.custom import Component\nfrom langflow.io import HandleInput, Output, TabInput\nfrom langflow.schema import Data, DataFrame, Message\n\n\ndef convert_to_message(v) -> Message:\n    \"\"\"Convert input to Message type.\n\n    Args:\n        v: Input to convert (Message, Data, DataFrame, or dict)\n\n    Returns:\n        Message: Converted Message object\n    \"\"\"\n    return v if isinstance(v, Message) else v.to_message()\n\n\ndef convert_to_data(v: DataFrame | Data | Message | dict) -> Data:\n    \"\"\"Convert input to Data type.\n\n    Args:\n        v: Input to convert (Message, Data, DataFrame, or dict)\n\n    Returns:\n        Data: Converted Data object\n    \"\"\"\n    if isinstance(v, dict):\n        return Data(v)\n    if isinstance(v, Message):\n        return v.to_data()\n    return v if isinstance(v, Data) else v.to_data()\n\n\ndef convert_to_dataframe(v: DataFrame | Data | Message | dict) -> DataFrame:\n    \"\"\"Convert input to DataFrame type.\n\n    Args:\n        v: Input to convert (Message, Data, DataFrame, or dict)\n\n    Returns:\n        DataFrame: Converted DataFrame object\n    \"\"\"\n    if isinstance(v, dict):\n        return DataFrame([v])\n    return v if isinstance(v, DataFrame) else v.to_dataframe()\n\n\nclass TypeConverterComponent(Component):\n    display_name = \"Type Convert\"\n    description = \"Convert between different types (Message, Data, DataFrame)\"\n    documentation: str = \"https://docs.langflow.org/components-processing#type-convert\"\n    icon = \"repeat\"\n\n    inputs = [\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Input\",\n            input_types=[\"Message\", \"Data\", \"DataFrame\"],\n            info=\"Accept Message, Data or DataFrame as input\",\n            required=True,\n        ),\n        TabInput(\n            name=\"output_type\",\n            display_name=\"Output Type\",\n            options=[\"Message\", \"Data\", \"DataFrame\"],\n            info=\"Select the desired output data type\",\n            real_time_refresh=True,\n            value=\"Message\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message Output\",\n            name=\"message_output\",\n            method=\"convert_to_message\",\n        )\n    ]\n\n    def update_outputs(self, frontend_node: dict, field_name: str, field_value: Any) -> dict:\n        \"\"\"Dynamically show only the relevant output based on the selected output type.\"\"\"\n        if field_name == \"output_type\":\n            # Start with empty outputs\n            frontend_node[\"outputs\"] = []\n\n            # Add only the selected output type\n            if field_value == \"Message\":\n                frontend_node[\"outputs\"].append(\n                    Output(\n                        display_name=\"Message Output\",\n                        name=\"message_output\",\n                        method=\"convert_to_message\",\n                    ).to_dict()\n                )\n            elif field_value == \"Data\":\n                frontend_node[\"outputs\"].append(\n                    Output(\n                        display_name=\"Data Output\",\n                        name=\"data_output\",\n                        method=\"convert_to_data\",\n                    ).to_dict()\n                )\n            elif field_value == \"DataFrame\":\n                frontend_node[\"outputs\"].append(\n                    Output(\n                        display_name=\"DataFrame Output\",\n                        name=\"dataframe_output\",\n                        method=\"convert_to_dataframe\",\n                    ).to_dict()\n                )\n\n        return frontend_node\n\n    def convert_to_message(self) -> Message:\n        \"\"\"Convert input to Message type.\"\"\"\n        input_value = self.input_data[0] if isinstance(self.input_data, list) else self.input_data\n\n        # Handle string input by converting to Message first\n        if isinstance(input_value, str):\n            input_value = Message(text=input_value)\n\n        result = convert_to_message(input_value)\n        self.status = result\n        return result\n\n    def convert_to_data(self) -> Data:\n        \"\"\"Convert input to Data type.\"\"\"\n        input_value = self.input_data[0] if isinstance(self.input_data, list) else self.input_data\n\n        # Handle string input by converting to Message first\n        if isinstance(input_value, str):\n            input_value = Message(text=input_value)\n\n        result = convert_to_data(input_value)\n        self.status = result\n        return result\n\n    def convert_to_dataframe(self) -> DataFrame:\n        \"\"\"Convert input to DataFrame type.\"\"\"\n        input_value = self.input_data[0] if isinstance(self.input_data, list) else self.input_data\n\n        # Handle string input by converting to Message first\n        if isinstance(input_value, str):\n            input_value = Message(text=input_value)\n\n        result = convert_to_dataframe(input_value)\n        self.status = result\n        return result\n"
                        },
                        "input_data": {
                        "_input_type": "HandleInput",
                        "advanced": false,
                        "display_name": "Input",
                        "dynamic": false,
                        "info": "Accept Message, Data or DataFrame as input",
                        "input_types": [
                            "Message",
                            "Data",
                            "DataFrame"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "name": "input_data",
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "trace_as_metadata": true,
                        "type": "other",
                        "value": ""
                        },
                        "output_type": {
                        "_input_type": "TabInput",
                        "advanced": false,
                        "display_name": "Output Type",
                        "dynamic": false,
                        "info": "Select the desired output data type",
                        "name": "output_type",
                        "options": [
                            "Message",
                            "Data",
                            "DataFrame"
                        ],
                        "placeholder": "",
                        "real_time_refresh": true,
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "tab",
                        "value": "Data"
                        }
                    },
                    "tool_mode": false
                    },
                    "showNode": true,
                    "type": "TypeConverterComponent"
                },
                "dragging": false,
                "id": "TypeConverterComponent-pwAAO",
                "measured": {
                    "height": 262,
                    "width": 320
                },
                "position": {
                    "x": 1862.6410760135172,
                    "y": 352.5532847926838
                },
                "selected": false,
                "type": "genericNode"
                }
            ],
            "edges": [
                {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                    "dataType": "ChatInput",
                    "id": "ChatInput-FvGHL",
                    "name": "message",
                    "output_types": [
                        "Message"
                    ]
                    },
                    "targetHandle": {
                    "fieldName": "search_query",
                    "id": "ArXivComponent-9XYf6",
                    "inputTypes": [
                        "Message"
                    ],
                    "type": "str"
                    }
                },
                "id": "reactflow__edge-ChatInput-FvGHL{œdataTypeœ:œChatInputœ,œidœ:œChatInput-FvGHLœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-ArXivComponent-9XYf6{œfieldNameœ:œsearch_queryœ,œidœ:œArXivComponent-9XYf6œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "selected": false,
                "source": "ChatInput-FvGHL",
                "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-FvGHLœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
                "target": "ArXivComponent-9XYf6",
                "targetHandle": "{œfieldNameœ:œsearch_queryœ,œidœ:œArXivComponent-9XYf6œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
                },
                {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                    "dataType": "ArXivComponent",
                    "id": "ArXivComponent-9XYf6",
                    "name": "dataframe",
                    "output_types": [
                        "DataFrame"
                    ]
                    },
                    "targetHandle": {
                    "fieldName": "data",
                    "id": "LoopComponent-UEMV2",
                    "inputTypes": [
                        "DataFrame"
                    ],
                    "type": "other"
                    }
                },
                "id": "reactflow__edge-ArXivComponent-9XYf6{œdataTypeœ:œArXivComponentœ,œidœ:œArXivComponent-9XYf6œ,œnameœ:œdataframeœ,œoutput_typesœ:[œDataFrameœ]}-LoopComponent-UEMV2{œfieldNameœ:œdataœ,œidœ:œLoopComponent-UEMV2œ,œinputTypesœ:[œDataFrameœ],œtypeœ:œotherœ}",
                "selected": false,
                "source": "ArXivComponent-9XYf6",
                "sourceHandle": "{œdataTypeœ:œArXivComponentœ,œidœ:œArXivComponent-9XYf6œ,œnameœ:œdataframeœ,œoutput_typesœ:[œDataFrameœ]}",
                "target": "LoopComponent-UEMV2",
                "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œLoopComponent-UEMV2œ,œinputTypesœ:[œDataFrameœ],œtypeœ:œotherœ}"
                },
                {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                    "dataType": "LoopComponent",
                    "id": "LoopComponent-UEMV2",
                    "name": "item",
                    "output_types": [
                        "Data"
                    ]
                    },
                    "targetHandle": {
                    "fieldName": "input_data",
                    "id": "ParserComponent-9WZlS",
                    "inputTypes": [
                        "DataFrame",
                        "Data"
                    ],
                    "type": "other"
                    }
                },
                "id": "reactflow__edge-LoopComponent-UEMV2{œdataTypeœ:œLoopComponentœ,œidœ:œLoopComponent-UEMV2œ,œnameœ:œitemœ,œoutput_typesœ:[œDataœ]}-ParserComponent-9WZlS{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-9WZlSœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}",
                "selected": false,
                "source": "LoopComponent-UEMV2",
                "sourceHandle": "{œdataTypeœ:œLoopComponentœ,œidœ:œLoopComponent-UEMV2œ,œnameœ:œitemœ,œoutput_typesœ:[œDataœ]}",
                "target": "ParserComponent-9WZlS",
                "targetHandle": "{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-9WZlSœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}"
                },
                {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                    "dataType": "ParserComponent",
                    "id": "ParserComponent-9WZlS",
                    "name": "parsed_text",
                    "output_types": [
                        "Message"
                    ]
                    },
                    "targetHandle": {
                    "fieldName": "input_value",
                    "id": "LanguageModelComponent-Xaabd",
                    "inputTypes": [
                        "Message"
                    ],
                    "type": "str"
                    }
                },
                "id": "reactflow__edge-ParserComponent-9WZlS{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-9WZlSœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}-LanguageModelComponent-Xaabd{œfieldNameœ:œinput_valueœ,œidœ:œLanguageModelComponent-Xaabdœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "selected": false,
                "source": "ParserComponent-9WZlS",
                "sourceHandle": "{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-9WZlSœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}",
                "target": "LanguageModelComponent-Xaabd",
                "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œLanguageModelComponent-Xaabdœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
                },
                {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                    "dataType": "LanguageModelComponent",
                    "id": "LanguageModelComponent-Xaabd",
                    "name": "text_output",
                    "output_types": [
                        "Message"
                    ]
                    },
                    "targetHandle": {
                    "fieldName": "input_data",
                    "id": "TypeConverterComponent-pwAAO",
                    "inputTypes": [
                        "Message",
                        "Data",
                        "DataFrame"
                    ],
                    "type": "other"
                    }
                },
                "id": "reactflow__edge-LanguageModelComponent-Xaabd{œdataTypeœ:œLanguageModelComponentœ,œidœ:œLanguageModelComponent-Xaabdœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-TypeConverterComponent-pwAAO{œfieldNameœ:œinput_dataœ,œidœ:œTypeConverterComponent-pwAAOœ,œinputTypesœ:[œMessageœ,œDataœ,œDataFrameœ],œtypeœ:œotherœ}",
                "selected": false,
                "source": "LanguageModelComponent-Xaabd",
                "sourceHandle": "{œdataTypeœ:œLanguageModelComponentœ,œidœ:œLanguageModelComponent-Xaabdœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
                "target": "TypeConverterComponent-pwAAO",
                "targetHandle": "{œfieldNameœ:œinput_dataœ,œidœ:œTypeConverterComponent-pwAAOœ,œinputTypesœ:[œMessageœ,œDataœ,œDataFrameœ],œtypeœ:œotherœ}"
                },
                {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                    "dataType": "TypeConverterComponent",
                    "id": "TypeConverterComponent-pwAAO",
                    "name": "data_output",
                    "output_types": [
                        "Data"
                    ]
                    },
                    "targetHandle": {
                    "dataType": "LoopComponent",
                    "id": "LoopComponent-UEMV2",
                    "name": "item",
                    "output_types": [
                        "Data"
                    ]
                    }
                },
                "id": "reactflow__edge-TypeConverterComponent-pwAAO{œdataTypeœ:œTypeConverterComponentœ,œidœ:œTypeConverterComponent-pwAAOœ,œnameœ:œdata_outputœ,œoutput_typesœ:[œDataœ]}-LoopComponent-UEMV2{œdataTypeœ:œLoopComponentœ,œidœ:œLoopComponent-UEMV2œ,œnameœ:œitemœ,œoutput_typesœ:[œDataœ]}",
                "selected": false,
                "source": "TypeConverterComponent-pwAAO",
                "sourceHandle": "{œdataTypeœ:œTypeConverterComponentœ,œidœ:œTypeConverterComponent-pwAAOœ,œnameœ:œdata_outputœ,œoutput_typesœ:[œDataœ]}",
                "target": "LoopComponent-UEMV2",
                "targetHandle": "{œdataTypeœ:œLoopComponentœ,œidœ:œLoopComponent-UEMV2œ,œnameœ:œitemœ,œoutput_typesœ:[œDataœ]}"
                },
                {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                    "dataType": "LoopComponent",
                    "id": "LoopComponent-UEMV2",
                    "name": "done",
                    "output_types": [
                        "DataFrame"
                    ]
                    },
                    "targetHandle": {
                    "fieldName": "input_value",
                    "id": "ChatOutput-V5GRt",
                    "inputTypes": [
                        "Data",
                        "DataFrame",
                        "Message"
                    ],
                    "type": "other"
                    }
                },
                "id": "reactflow__edge-LoopComponent-UEMV2{œdataTypeœ:œLoopComponentœ,œidœ:œLoopComponent-UEMV2œ,œnameœ:œdoneœ,œoutput_typesœ:[œDataFrameœ]}-ChatOutput-V5GRt{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-V5GRtœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
                "selected": false,
                "source": "LoopComponent-UEMV2",
                "sourceHandle": "{œdataTypeœ:œLoopComponentœ,œidœ:œLoopComponent-UEMV2œ,œnameœ:œdoneœ,œoutput_typesœ:[œDataFrameœ]}",
                "target": "ChatOutput-V5GRt",
                "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-V5GRtœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}"
                }
            ],
            "viewport": {
                "x": 465.8490750697313,
                "y": 409.6913200079076,
                "zoom": 0.44769198915425207
            }
            },
            "is_component": false,
            "updated_at": "2025-08-12T18:38:06+00:00",
            "webhook": false,
            "endpoint_name": null,
            "tags": [
            "chatbots",
            "content-generation"
            ],
            "locked": false,
            "mcp_enabled": true,
            "action_name": null,
            "action_description": null,
            "access_type": "PRIVATE",
            "id": "85a1af66-465b-4dda-a046-ab25f2fbc3ec",
            "user_id": "f36e9f45-b0b0-4228-8303-ddff937be006",
            "folder_id": "0dd46390-23ba-4770-a01f-e4e9c23b0d5f"
        },
        "notes": "",
        "tags": [
            "chatbots",
            "content-generation"
        ],
        "source": "example_flows/Research_Translation_Loop_85a1af66-465b-4dda-a046-ab25f2fbc3ec.json"
    },
    {
        "name": "Text Input with Prompt Template",
        "description": "User input goes through a prompt template before reaching the LLM",
        "json": {
            "nodes": [
                {
                    "id": "TextInput-xyz123",
                    "type": "TextInput",
                    "position": {"x": 100, "y": 200},
                    "data": {"type": "TextInput"}
                },
                {
                    "id": "Prompt-3Um6W",
                    "type": "Prompt",
                    "position": {"x": 300, "y": 200},
                    "data": {"type": "Prompt"}
                },
                {
                    "id": "LanguageModelComponent-lRD6W",
                    "type": "LanguageModelComponent",
                    "position": {"x": 500, "y": 200},
                    "data": {"type": "LanguageModelComponent"}
                }
            ],
            "edges": [
                {
                    "source": "TextInput-xyz123",
                    "sourceHandle": "{\"dataType\":\"TextInput\",\"id\":\"TextInput-xyz123\",\"name\":\"text\",\"output_types\":[\"Message\"]}",
                    "target": "Prompt-3Um6W",
                    "targetHandle": "{\"fieldName\":\"tool_placeholder\",\"id\":\"Prompt-3Um6W\",\"inputTypes\":[\"Message\",\"str\"],\"type\":\"Message\"}",
                    "data": {
                        "sourceHandle": {
                            "dataType": "TextInput",
                            "id": "TextInput-xyz123",
                            "name": "text",
                            "output_types": ["Message"]
                        },
                        "targetHandle": {
                            "fieldName": "tool_placeholder",
                            "id": "Prompt-3Um6W",
                            "inputTypes": ["Message", "str"],
                            "type": "Message"
                        }
                    },
                    "id": "xy-edge__TextInput-xyz123{\"dataType\":\"TextInput\",\"id\":\"TextInput-xyz123\",\"name\":\"text\",\"output_types\":[\"Message\"]}-Prompt-3Um6W{\"fieldName\":\"tool_placeholder\",\"id\":\"Prompt-3Um6W\",\"inputTypes\":[\"Message\",\"str\"],\"type\":\"Message\"}"
                },
                {
                    "source": "Prompt-3Um6W",
                    "sourceHandle": "{\"dataType\":\"Prompt\",\"id\":\"Prompt-3Um6W\",\"name\":\"prompt\",\"output_types\":[\"Message\"]}",
                    "target": "LanguageModelComponent-lRD6W",
                    "targetHandle": "{\"fieldName\":\"system_message\",\"id\":\"LanguageModelComponent-lRD6W\",\"inputTypes\":[\"Message\"],\"type\":\"str\"}",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-3Um6W",
                            "name": "prompt",
                            "output_types": ["Message"]
                        },
                        "targetHandle": {
                            "fieldName": "system_message",
                            "id": "LanguageModelComponent-lRD6W",
                            "inputTypes": ["Message"],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__Prompt-3Um6W{\"dataType\":\"Prompt\",\"id\":\"Prompt-3Um6W\",\"name\":\"prompt\",\"output_types\":[\"Message\"]}-LanguageModelComponent-lRD6W{\"fieldName\":\"system_message\",\"id\":\"LanguageModelComponent-lRD6W\",\"inputTypes\":[\"Message\"],\"type\":\"str\"}"
                }
            ]
        }
    },
    {
        "kind": "exemplar",
        "title": "Basic Prompting",
        "intent": [
            "Perform basic prompting with an OpenAI model."
        ],
        "components": [],
        "flow_json": {
            "name": "Basic Prompting",
            "description": "Perform basic prompting with an OpenAI model.",
            "icon": null,
            "icon_bg_color": null,
            "gradient": null,
            "data": {
            "nodes": [
                {
                "data": {
                    "description": "Create a prompt template with dynamic variables.",
                    "display_name": "Prompt",
                    "id": "Prompt-3Um6W",
                    "node": {
                    "base_classes": [
                        "Message"
                    ],
                    "beta": false,
                    "conditional_paths": [],
                    "custom_fields": {
                        "template": []
                    },
                    "description": "Create a prompt template with dynamic variables.",
                    "display_name": "Prompt",
                    "documentation": "",
                    "edited": false,
                    "field_order": [
                        "template"
                    ],
                    "frozen": false,
                    "icon": "braces",
                    "legacy": false,
                    "lf_version": "1.4.2",
                    "metadata": {
                        "code_hash": "3bf0b511e227",
                        "module": "langflow.components.prompts.prompt.PromptComponent"
                    },
                    "output_types": [],
                    "outputs": [
                        {
                        "allows_loop": false,
                        "cache": true,
                        "display_name": "Prompt",
                        "group_outputs": false,
                        "method": "build_prompt",
                        "name": "prompt",
                        "selected": "Message",
                        "tool_mode": true,
                        "types": [
                            "Message"
                        ],
                        "value": "__UNDEFINED__"
                        }
                    ],
                    "pinned": false,
                    "template": {
                        "_type": "Component",
                        "code": {
                        "advanced": true,
                        "dynamic": true,
                        "fileTypes": [],
                        "file_path": "",
                        "info": "",
                        "list": false,
                        "load_from_db": false,
                        "multiline": true,
                        "name": "code",
                        "password": false,
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "type": "code",
                        "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"braces\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                        },
                        "template": {
                        "_input_type": "PromptInput",
                        "advanced": false,
                        "display_name": "Template",
                        "dynamic": false,
                        "info": "",
                        "list": false,
                        "load_from_db": false,
                        "name": "template",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "type": "prompt",
                        "value": "Answer the user as if you were a GenAI expert, enthusiastic about helping them get started building something fresh."
                        },
                        "tool_placeholder": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Tool Placeholder",
                        "dynamic": false,
                        "info": "A placeholder input for tool mode.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "load_from_db": false,
                        "name": "tool_placeholder",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": true,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        }
                    },
                    "tool_mode": false
                    },
                    "selected_output": "prompt",
                    "type": "Prompt"
                },
                "dragging": false,
                "height": 260,
                "id": "Prompt-3Um6W",
                "measured": {
                    "height": 260,
                    "width": 320
                },
                "position": {
                    "x": 688.9222183027662,
                    "y": 1044.5004597498394
                },
                "positionAbsolute": {
                    "x": 690.2015147036818,
                    "y": 1018.5443911764344
                },
                "selected": false,
                "type": "genericNode",
                "width": 320
                },
                {
                "data": {
                    "id": "undefined-E3wf8",
                    "node": {
                    "description": "This template demonstrates a standard chat flow with additional instructions provided by a prompt. Prompts provide instructions and inputs for a Large Language Model (LLM) beyond the standard user-provided chat input. In this example, the prompt describes the LLM's role and persona.\n\n## Quick Start\n1. Add your **OpenAI API Key** to the **Language Model** component, or select a different provider and model.\n2. Open the **Playground** to start the chat and run the flow.\n\n## Next steps\nChange the prompt template, model, or model settings, such as **Temperature**, and then see how the responses change with these different inputs.\n💡 Some component settings are hidden by default; to view all settings click **Controls** in each component's header menu.\n💡 You can use curly braces to create variables in your template, such as `{variable}`. These can be populated from other components, with Langflow global variables, or at runtime.",
                    "display_name": "Read Me",
                    "documentation": "",
                    "template": {
                        "backgroundColor": "neutral"
                    }
                    }
                },
                "dragging": false,
                "height": 403,
                "id": "undefined-E3wf8",
                "measured": {
                    "height": 403,
                    "width": 324
                },
                "position": {
                    "x": 309.22132329147314,
                    "y": 803.5424763412283
                },
                "positionAbsolute": {
                    "x": 66.38770028934243,
                    "y": 749.744424427066
                },
                "resizing": false,
                "selected": false,
                "style": {
                    "height": 250,
                    "width": 324
                },
                "type": "noteNode",
                "width": 324
                },
                {
                "data": {
                    "id": "note-I0Zt7",
                    "node": {
                    "description": "### 💡 Add your OpenAI API key here 👇",
                    "display_name": "",
                    "documentation": "",
                    "template": {
                        "backgroundColor": "transparent"
                    }
                    },
                    "type": "note"
                },
                "dragging": false,
                "height": 324,
                "id": "note-I0Zt7",
                "measured": {
                    "height": 324,
                    "width": 324
                },
                "position": {
                    "x": 1080.9467591245357,
                    "y": 744.1979207661088
                },
                "positionAbsolute": {
                    "x": 1075.829573520873,
                    "y": 657.2057655038416
                },
                "resizing": false,
                "selected": false,
                "style": {
                    "height": 324,
                    "width": 324
                },
                "type": "noteNode",
                "width": 324
                },
                {
                "data": {
                    "id": "ChatOutput-fxS6N",
                    "node": {
                    "base_classes": [
                        "Message"
                    ],
                    "beta": false,
                    "conditional_paths": [],
                    "custom_fields": {},
                    "description": "Display a chat message in the Playground.",
                    "display_name": "Chat Output",
                    "documentation": "",
                    "edited": false,
                    "field_order": [
                        "input_value",
                        "should_store_message",
                        "sender",
                        "sender_name",
                        "session_id",
                        "data_template",
                        "background_color",
                        "chat_icon",
                        "text_color"
                    ],
                    "frozen": false,
                    "icon": "MessagesSquare",
                    "legacy": false,
                    "lf_version": "1.4.2",
                    "metadata": {
                        "code_hash": "6f74e04e39d5",
                        "module": "langflow.components.input_output.chat_output.ChatOutput"
                    },
                    "output_types": [],
                    "outputs": [
                        {
                        "allows_loop": false,
                        "cache": true,
                        "display_name": "Output Message",
                        "group_outputs": false,
                        "method": "message_response",
                        "name": "message",
                        "selected": "Message",
                        "tool_mode": true,
                        "types": [
                            "Message"
                        ],
                        "value": "__UNDEFINED__"
                        }
                    ],
                    "pinned": false,
                    "template": {
                        "_type": "Component",
                        "background_color": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Background Color",
                        "dynamic": false,
                        "info": "The background color of the icon.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "load_from_db": false,
                        "name": "background_color",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "chat_icon": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Icon",
                        "dynamic": false,
                        "info": "The icon of the message.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "load_from_db": false,
                        "name": "chat_icon",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "clean_data": {
                        "_input_type": "BoolInput",
                        "advanced": true,
                        "display_name": "Basic Clean Data",
                        "dynamic": false,
                        "info": "Whether to clean the data",
                        "list": false,
                        "list_add_label": "Add More",
                        "name": "clean_data",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "bool",
                        "value": true
                        },
                        "code": {
                        "advanced": true,
                        "dynamic": true,
                        "fileTypes": [],
                        "file_path": "",
                        "info": "",
                        "list": false,
                        "load_from_db": false,
                        "multiline": true,
                        "name": "code",
                        "password": false,
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "type": "code",
                        "value": "from collections.abc import Generator\nfrom typing import Any\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, DropdownInput, HandleInput, MessageTextInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.template.field.base import Output\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-output\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Output Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _serialize_data(self, data: Data) -> str:\n        \"\"\"Serialize Data object to JSON string.\"\"\"\n        # Convert data.data to JSON-serializable format\n        serializable_data = jsonable_encoder(data.data)\n        # Serialize with orjson, enabling pretty printing with indentation\n        json_bytes = orjson.dumps(serializable_data, option=orjson.OPT_INDENT_2)\n        # Convert bytes to string and wrap in Markdown code blocks\n        return \"```json\\n\" + json_bytes.decode(\"utf-8\") + \"\\n```\"\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([safe_convert(item, clean_data=self.clean_data) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return safe_convert(self.input_value)\n"
                        },
                        "data_template": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Data Template",
                        "dynamic": false,
                        "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "load_from_db": false,
                        "name": "data_template",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "{text}"
                        },
                        "input_value": {
                        "_input_type": "MessageInput",
                        "advanced": false,
                        "display_name": "Inputs",
                        "dynamic": false,
                        "info": "Message to be passed as output.",
                        "input_types": [
                            "Data",
                            "DataFrame",
                            "Message"
                        ],
                        "list": false,
                        "load_from_db": false,
                        "name": "input_value",
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "sender": {
                        "_input_type": "DropdownInput",
                        "advanced": true,
                        "combobox": false,
                        "display_name": "Sender Type",
                        "dynamic": false,
                        "info": "Type of sender.",
                        "name": "sender",
                        "options": [
                            "Machine",
                            "User"
                        ],
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "Machine"
                        },
                        "sender_name": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Sender Name",
                        "dynamic": false,
                        "info": "Name of the sender.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "load_from_db": false,
                        "name": "sender_name",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "AI"
                        },
                        "session_id": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Session ID",
                        "dynamic": false,
                        "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "load_from_db": false,
                        "name": "session_id",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "should_store_message": {
                        "_input_type": "BoolInput",
                        "advanced": true,
                        "display_name": "Store Messages",
                        "dynamic": false,
                        "info": "Store the message in the history.",
                        "list": false,
                        "name": "should_store_message",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "trace_as_metadata": true,
                        "type": "bool",
                        "value": true
                        },
                        "text_color": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Text Color",
                        "dynamic": false,
                        "info": "The text color of the name",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "load_from_db": false,
                        "name": "text_color",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        }
                    },
                    "tool_mode": false
                    },
                    "type": "ChatOutput"
                },
                "dragging": false,
                "height": 234,
                "id": "ChatOutput-fxS6N",
                "measured": {
                    "height": 234,
                    "width": 320
                },
                "position": {
                    "x": 1460.070372772908,
                    "y": 872.7273956769025
                },
                "positionAbsolute": {
                    "x": 1444.936881624563,
                    "y": 872.7273956769025
                },
                "selected": false,
                "type": "genericNode",
                "width": 320
                },
                {
                "data": {
                    "id": "LanguageModelComponent-lRD6W",
                    "node": {
                    "base_classes": [
                        "LanguageModel",
                        "Message"
                    ],
                    "beta": false,
                    "conditional_paths": [],
                    "custom_fields": {},
                    "description": "Runs a language model given a specified provider. ",
                    "display_name": "Language Model",
                    "documentation": "",
                    "edited": false,
                    "field_order": [
                        "provider",
                        "model_name",
                        "api_key",
                        "input_value",
                        "system_message",
                        "stream",
                        "temperature"
                    ],
                    "frozen": false,
                    "icon": "brain-circuit",
                    "legacy": false,
                    "metadata": {
                        "keywords": [
                        "model",
                        "llm",
                        "language model",
                        "large language model"
                        ]
                    },
                    "minimized": false,
                    "output_types": [],
                    "outputs": [
                        {
                        "types": [
                            "Message"
                        ],
                        "selected": "Message",
                        "name": "text_output",
                        "hidden": null,
                        "display_name": "Model Response",
                        "method": "text_response",
                        "value": "__UNDEFINED__",
                        "cache": true,
                        "required_inputs": null,
                        "allows_loop": false,
                        "group_outputs": false,
                        "options": null,
                        "tool_mode": true
                        },
                        {
                        "types": [
                            "LanguageModel"
                        ],
                        "selected": "LanguageModel",
                        "name": "model_output",
                        "hidden": null,
                        "display_name": "Language Model",
                        "method": "build_model",
                        "value": "__UNDEFINED__",
                        "cache": true,
                        "required_inputs": null,
                        "allows_loop": false,
                        "group_outputs": false,
                        "options": null,
                        "tool_mode": true
                        }
                    ],
                    "pinned": false,
                    "priority": 0,
                    "template": {
                        "_type": "Component",
                        "api_key": {
                        "_input_type": "SecretStrInput",
                        "advanced": false,
                        "display_name": "OpenAI API Key",
                        "dynamic": false,
                        "info": "Model Provider API key",
                        "input_types": [],
                        "load_from_db": true,
                        "name": "api_key",
                        "password": true,
                        "placeholder": "",
                        "real_time_refresh": true,
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "type": "str",
                        "value": "OPENAI_API_KEY"
                        },
                        "code": {
                        "advanced": true,
                        "dynamic": true,
                        "fileTypes": [],
                        "file_path": "",
                        "info": "",
                        "list": false,
                        "load_from_db": false,
                        "multiline": true,
                        "name": "code",
                        "password": false,
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "type": "code",
                        "value": "from typing import Any\n\nfrom langchain_anthropic import ChatAnthropic\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain_openai import ChatOpenAI\n\nfrom langflow.base.models.anthropic_constants import ANTHROPIC_MODELS\nfrom langflow.base.models.google_generative_ai_constants import GOOGLE_GENERATIVE_AI_MODELS\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_CHAT_MODEL_NAMES, OPENAI_REASONING_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MultilineInput, SecretStrInput, SliderInput\nfrom langflow.schema.dotdict import dotdict\n\n\nclass LanguageModelComponent(LCModelComponent):\n    display_name = \"Language Model\"\n    description = \"Runs a language model given a specified provider.\"\n    documentation: str = \"https://docs.langflow.org/components-models\"\n    icon = \"brain-circuit\"\n    category = \"models\"\n    priority = 0  # Set priority to 0 to make it appear first\n\n    inputs = [\n        DropdownInput(\n            name=\"provider\",\n            display_name=\"Model Provider\",\n            options=[\"OpenAI\", \"Anthropic\", \"Google\"],\n            value=\"OpenAI\",\n            info=\"Select the model provider\",\n            real_time_refresh=True,\n            options_metadata=[{\"icon\": \"OpenAI\"}, {\"icon\": \"Anthropic\"}, {\"icon\": \"GoogleGenerativeAI\"}],\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            options=OPENAI_CHAT_MODEL_NAMES + OPENAI_REASONING_MODEL_NAMES,\n            value=OPENAI_CHAT_MODEL_NAMES[0],\n            info=\"Select the model to use\",\n            real_time_refresh=True,\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"Model Provider API key\",\n            required=False,\n            show=True,\n            real_time_refresh=True,\n        ),\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Input\",\n            info=\"The input text to send to the model\",\n        ),\n        MultilineInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"A system message that helps set the behavior of the assistant\",\n            advanced=False,\n        ),\n        BoolInput(\n            name=\"stream\",\n            display_name=\"Stream\",\n            info=\"Whether to stream the response\",\n            value=False,\n            advanced=True,\n        ),\n        SliderInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.1,\n            info=\"Controls randomness in responses\",\n            range_spec=RangeSpec(min=0, max=1, step=0.01),\n            advanced=True,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:\n        provider = self.provider\n        model_name = self.model_name\n        temperature = self.temperature\n        stream = self.stream\n\n        if provider == \"OpenAI\":\n            if not self.api_key:\n                msg = \"OpenAI API key is required when using OpenAI provider\"\n                raise ValueError(msg)\n\n            if model_name in OPENAI_REASONING_MODEL_NAMES:\n                # reasoning models do not support temperature (yet)\n                temperature = None\n\n            return ChatOpenAI(\n                model_name=model_name,\n                temperature=temperature,\n                streaming=stream,\n                openai_api_key=self.api_key,\n            )\n        if provider == \"Anthropic\":\n            if not self.api_key:\n                msg = \"Anthropic API key is required when using Anthropic provider\"\n                raise ValueError(msg)\n            return ChatAnthropic(\n                model=model_name,\n                temperature=temperature,\n                streaming=stream,\n                anthropic_api_key=self.api_key,\n            )\n        if provider == \"Google\":\n            if not self.api_key:\n                msg = \"Google API key is required when using Google provider\"\n                raise ValueError(msg)\n            return ChatGoogleGenerativeAI(\n                model=model_name,\n                temperature=temperature,\n                streaming=stream,\n                google_api_key=self.api_key,\n            )\n        msg = f\"Unknown provider: {provider}\"\n        raise ValueError(msg)\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None) -> dotdict:\n        if field_name == \"provider\":\n            if field_value == \"OpenAI\":\n                build_config[\"model_name\"][\"options\"] = OPENAI_CHAT_MODEL_NAMES + OPENAI_REASONING_MODEL_NAMES\n                build_config[\"model_name\"][\"value\"] = OPENAI_CHAT_MODEL_NAMES[0]\n                build_config[\"api_key\"][\"display_name\"] = \"OpenAI API Key\"\n            elif field_value == \"Anthropic\":\n                build_config[\"model_name\"][\"options\"] = ANTHROPIC_MODELS\n                build_config[\"model_name\"][\"value\"] = ANTHROPIC_MODELS[0]\n                build_config[\"api_key\"][\"display_name\"] = \"Anthropic API Key\"\n            elif field_value == \"Google\":\n                build_config[\"model_name\"][\"options\"] = GOOGLE_GENERATIVE_AI_MODELS\n                build_config[\"model_name\"][\"value\"] = GOOGLE_GENERATIVE_AI_MODELS[0]\n                build_config[\"api_key\"][\"display_name\"] = \"Google API Key\"\n        elif field_name == \"model_name\" and field_value.startswith(\"o1\") and self.provider == \"OpenAI\":\n            # Hide system_message for o1 models - currently unsupported\n            if \"system_message\" in build_config:\n                build_config[\"system_message\"][\"show\"] = False\n        elif field_name == \"model_name\" and not field_value.startswith(\"o1\") and \"system_message\" in build_config:\n            build_config[\"system_message\"][\"show\"] = True\n        return build_config\n"
                        },
                        "input_value": {
                        "_input_type": "MessageInput",
                        "advanced": false,
                        "display_name": "Input",
                        "dynamic": false,
                        "info": "The input text to send to the model",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "input_value",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "model_name": {
                        "_input_type": "DropdownInput",
                        "advanced": false,
                        "combobox": false,
                        "dialog_inputs": {},
                        "display_name": "Model Name",
                        "dynamic": false,
                        "info": "Select the model to use",
                        "name": "model_name",
                        "options": [
                            "gpt-4o-mini",
                            "gpt-4o",
                            "gpt-4.1",
                            "gpt-4.1-mini",
                            "gpt-4.1-nano",
                            "gpt-4.5-preview",
                            "gpt-4-turbo",
                            "gpt-4-turbo-preview",
                            "gpt-4",
                            "gpt-3.5-turbo"
                        ],
                        "options_metadata": [],
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "toggle": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "gpt-4o-mini"
                        },
                        "provider": {
                        "_input_type": "DropdownInput",
                        "advanced": false,
                        "combobox": false,
                        "dialog_inputs": {},
                        "display_name": "Model Provider",
                        "dynamic": false,
                        "info": "Select the model provider",
                        "name": "provider",
                        "options": [
                            "OpenAI",
                            "Anthropic",
                            "Google"
                        ],
                        "options_metadata": [
                            {
                            "icon": "OpenAI"
                            },
                            {
                            "icon": "Anthropic"
                            },
                            {
                            "icon": "GoogleGenerativeAI"
                            }
                        ],
                        "placeholder": "",
                        "real_time_refresh": true,
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "toggle": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "OpenAI"
                        },
                        "stream": {
                        "_input_type": "BoolInput",
                        "advanced": true,
                        "display_name": "Stream",
                        "dynamic": false,
                        "info": "Whether to stream the response",
                        "list": false,
                        "list_add_label": "Add More",
                        "name": "stream",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "bool",
                        "value": false
                        },
                        "system_message": {
                        "_input_type": "MultilineInput",
                        "advanced": false,
                        "copy_field": false,
                        "display_name": "System Message",
                        "dynamic": false,
                        "info": "A system message that helps set the behavior of the assistant",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "multiline": true,
                        "name": "system_message",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "temperature": {
                        "_input_type": "SliderInput",
                        "advanced": true,
                        "display_name": "Temperature",
                        "dynamic": false,
                        "info": "Controls randomness in responses",
                        "max_label": "",
                        "max_label_icon": "",
                        "min_label": "",
                        "min_label_icon": "",
                        "name": "temperature",
                        "placeholder": "",
                        "range_spec": {
                            "max": 1,
                            "min": 0,
                            "step": 0.01,
                            "step_type": "float"
                        },
                        "required": false,
                        "show": true,
                        "slider_buttons": false,
                        "slider_buttons_options": [],
                        "slider_input": false,
                        "title_case": false,
                        "tool_mode": false,
                        "type": "slider",
                        "value": 0.1
                        }
                    },
                    "tool_mode": false,
                    "last_updated": "2025-08-12T17:45:11.447Z"
                    },
                    "selected_output": "text_output",
                    "showNode": true,
                    "type": "LanguageModelComponent"
                },
                "dragging": false,
                "id": "LanguageModelComponent-lRD6W",
                "measured": {
                    "height": 534,
                    "width": 320
                },
                "position": {
                    "x": 1085.7542386472996,
                    "y": 795.0399905192078
                },
                "selected": false,
                "type": "genericNode"
                },
                {
                "id": "CalculatorComponent-Ikug0",
                "type": "genericNode",
                "position": {
                    "x": 483.45707551928865,
                    "y": 766.1794138412027
                },
                "data": {
                    "node": {
                    "template": {
                        "_type": "Component",
                        "code": {
                        "type": "code",
                        "required": true,
                        "placeholder": "",
                        "list": false,
                        "show": true,
                        "multiline": true,
                        "value": "import ast\nimport operator\nfrom collections.abc import Callable\n\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.inputs.inputs import MessageTextInput\nfrom langflow.io import Output\nfrom langflow.schema.data import Data\n\n\nclass CalculatorComponent(Component):\n    display_name = \"Calculator\"\n    description = \"Perform basic arithmetic operations on a given expression.\"\n    documentation: str = \"https://docs.langflow.org/components-helpers#calculator\"\n    icon = \"calculator\"\n\n    # Cache operators dictionary as a class variable\n    OPERATORS: dict[type[ast.operator], Callable] = {\n        ast.Add: operator.add,\n        ast.Sub: operator.sub,\n        ast.Mult: operator.mul,\n        ast.Div: operator.truediv,\n        ast.Pow: operator.pow,\n    }\n\n    inputs = [\n        MessageTextInput(\n            name=\"expression\",\n            display_name=\"Expression\",\n            info=\"The arithmetic expression to evaluate (e.g., '4*4*(33/22)+12-20').\",\n            tool_mode=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"result\", type_=Data, method=\"evaluate_expression\"),\n    ]\n\n    def _eval_expr(self, node: ast.AST) -> float:\n        \"\"\"Evaluate an AST node recursively.\"\"\"\n        if isinstance(node, ast.Constant):\n            if isinstance(node.value, int | float):\n                return float(node.value)\n            error_msg = f\"Unsupported constant type: {type(node.value).__name__}\"\n            raise TypeError(error_msg)\n        if isinstance(node, ast.Num):  # For backwards compatibility\n            if isinstance(node.n, int | float):\n                return float(node.n)\n            error_msg = f\"Unsupported number type: {type(node.n).__name__}\"\n            raise TypeError(error_msg)\n\n        if isinstance(node, ast.BinOp):\n            op_type = type(node.op)\n            if op_type not in self.OPERATORS:\n                error_msg = f\"Unsupported binary operator: {op_type.__name__}\"\n                raise TypeError(error_msg)\n\n            left = self._eval_expr(node.left)\n            right = self._eval_expr(node.right)\n            return self.OPERATORS[op_type](left, right)\n\n        error_msg = f\"Unsupported operation or expression type: {type(node).__name__}\"\n        raise TypeError(error_msg)\n\n    def evaluate_expression(self) -> Data:\n        \"\"\"Evaluate the mathematical expression and return the result.\"\"\"\n        try:\n            tree = ast.parse(self.expression, mode=\"eval\")\n            result = self._eval_expr(tree.body)\n\n            formatted_result = f\"{float(result):.6f}\".rstrip(\"0\").rstrip(\".\")\n            self.log(f\"Calculation result: {formatted_result}\")\n\n            self.status = formatted_result\n            return Data(data={\"result\": formatted_result})\n\n        except ZeroDivisionError:\n            error_message = \"Error: Division by zero\"\n            self.status = error_message\n            return Data(data={\"error\": error_message, \"input\": self.expression})\n\n        except (SyntaxError, TypeError, KeyError, ValueError, AttributeError, OverflowError) as e:\n            error_message = f\"Invalid expression: {e!s}\"\n            self.status = error_message\n            return Data(data={\"error\": error_message, \"input\": self.expression})\n\n    def build(self):\n        \"\"\"Return the main evaluation function.\"\"\"\n        return self.evaluate_expression\n",
                        "fileTypes": [],
                        "file_path": "",
                        "password": false,
                        "name": "code",
                        "advanced": true,
                        "dynamic": true,
                        "info": "",
                        "load_from_db": false,
                        "title_case": false
                        },
                        "expression": {
                        "tool_mode": true,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "load_from_db": false,
                        "list": false,
                        "list_add_label": "Add More",
                        "required": false,
                        "placeholder": "",
                        "show": true,
                        "name": "expression",
                        "value": "",
                        "display_name": "Expression",
                        "advanced": false,
                        "input_types": [
                            "Message"
                        ],
                        "dynamic": false,
                        "info": "The arithmetic expression to evaluate (e.g., '4*4*(33/22)+12-20').",
                        "title_case": false,
                        "type": "str",
                        "_input_type": "MessageTextInput"
                        }
                    },
                    "description": "Perform basic arithmetic operations on a given expression.",
                    "icon": "calculator",
                    "base_classes": [
                        "Data"
                    ],
                    "display_name": "Calculator",
                    "documentation": "https://docs.langflow.org/components-helpers#calculator",
                    "minimized": false,
                    "custom_fields": {},
                    "output_types": [],
                    "pinned": false,
                    "conditional_paths": [],
                    "frozen": false,
                    "outputs": [
                        {
                        "types": [
                            "Data"
                        ],
                        "selected": "Data",
                        "name": "result",
                        "display_name": "Data",
                        "method": "evaluate_expression",
                        "value": "__UNDEFINED__",
                        "cache": true,
                        "allows_loop": false,
                        "group_outputs": false,
                        "tool_mode": true
                        }
                    ],
                    "field_order": [
                        "expression"
                    ],
                    "beta": false,
                    "legacy": false,
                    "edited": false,
                    "metadata": {
                        "module": "langflow.components.helpers.calculator_core.CalculatorComponent",
                        "code_hash": "3139fe9e04a5"
                    },
                    "tool_mode": false
                    },
                    "showNode": true,
                    "type": "CalculatorComponent",
                    "id": "CalculatorComponent-Ikug0"
                },
                "selected": false,
                "measured": {
                    "width": 320,
                    "height": 220
                },
                "dragging": false
                },
                {
                "id": "ChatInput-wx5WJ",
                "type": "genericNode",
                "position": {
                    "x": 851.5769170369281,
                    "y": 844.6189556426584
                },
                "data": {
                    "node": {
                    "template": {
                        "_type": "Component",
                        "files": {
                        "trace_as_metadata": true,
                        "file_path": "",
                        "fileTypes": [
                            "txt",
                            "md",
                            "mdx",
                            "csv",
                            "json",
                            "yaml",
                            "yml",
                            "xml",
                            "html",
                            "htm",
                            "pdf",
                            "docx",
                            "py",
                            "sh",
                            "sql",
                            "js",
                            "ts",
                            "tsx",
                            "jpg",
                            "jpeg",
                            "png",
                            "bmp",
                            "image"
                        ],
                        "temp_file": true,
                        "list": true,
                        "list_add_label": "Add More",
                        "required": false,
                        "placeholder": "",
                        "show": true,
                        "name": "files",
                        "value": "",
                        "display_name": "Files",
                        "advanced": true,
                        "dynamic": false,
                        "info": "Files to be sent with the message.",
                        "title_case": false,
                        "type": "file",
                        "_input_type": "FileInput"
                        },
                        "background_color": {
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "load_from_db": false,
                        "list": false,
                        "list_add_label": "Add More",
                        "required": false,
                        "placeholder": "",
                        "show": true,
                        "name": "background_color",
                        "value": "",
                        "display_name": "Background Color",
                        "advanced": true,
                        "input_types": [
                            "Message"
                        ],
                        "dynamic": false,
                        "info": "The background color of the icon.",
                        "title_case": false,
                        "type": "str",
                        "_input_type": "MessageTextInput"
                        },
                        "chat_icon": {
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "load_from_db": false,
                        "list": false,
                        "list_add_label": "Add More",
                        "required": false,
                        "placeholder": "",
                        "show": true,
                        "name": "chat_icon",
                        "value": "",
                        "display_name": "Icon",
                        "advanced": true,
                        "input_types": [
                            "Message"
                        ],
                        "dynamic": false,
                        "info": "The icon of the message.",
                        "title_case": false,
                        "type": "str",
                        "_input_type": "MessageTextInput"
                        },
                        "code": {
                        "type": "code",
                        "required": true,
                        "placeholder": "",
                        "list": false,
                        "show": true,
                        "multiline": true,
                        "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-input\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Chat Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n",
                        "fileTypes": [],
                        "file_path": "",
                        "password": false,
                        "name": "code",
                        "advanced": true,
                        "dynamic": true,
                        "info": "",
                        "load_from_db": false,
                        "title_case": false
                        },
                        "input_value": {
                        "tool_mode": false,
                        "trace_as_input": true,
                        "multiline": true,
                        "trace_as_metadata": true,
                        "load_from_db": false,
                        "list": false,
                        "list_add_label": "Add More",
                        "required": false,
                        "placeholder": "",
                        "show": true,
                        "name": "input_value",
                        "value": "",
                        "display_name": "Input Text",
                        "advanced": false,
                        "input_types": [],
                        "dynamic": false,
                        "info": "Message to be passed as input.",
                        "title_case": false,
                        "copy_field": false,
                        "type": "str",
                        "_input_type": "MultilineInput"
                        },
                        "sender": {
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "options": [
                            "Machine",
                            "User"
                        ],
                        "options_metadata": [],
                        "combobox": false,
                        "dialog_inputs": {},
                        "toggle": false,
                        "required": false,
                        "placeholder": "",
                        "show": true,
                        "name": "sender",
                        "value": "User",
                        "display_name": "Sender Type",
                        "advanced": true,
                        "dynamic": false,
                        "info": "Type of sender.",
                        "title_case": false,
                        "type": "str",
                        "_input_type": "DropdownInput"
                        },
                        "sender_name": {
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "load_from_db": false,
                        "list": false,
                        "list_add_label": "Add More",
                        "required": false,
                        "placeholder": "",
                        "show": true,
                        "name": "sender_name",
                        "value": "User",
                        "display_name": "Sender Name",
                        "advanced": true,
                        "input_types": [
                            "Message"
                        ],
                        "dynamic": false,
                        "info": "Name of the sender.",
                        "title_case": false,
                        "type": "str",
                        "_input_type": "MessageTextInput"
                        },
                        "session_id": {
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "load_from_db": false,
                        "list": false,
                        "list_add_label": "Add More",
                        "required": false,
                        "placeholder": "",
                        "show": true,
                        "name": "session_id",
                        "value": "",
                        "display_name": "Session ID",
                        "advanced": true,
                        "input_types": [
                            "Message"
                        ],
                        "dynamic": false,
                        "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                        "title_case": false,
                        "type": "str",
                        "_input_type": "MessageTextInput"
                        },
                        "should_store_message": {
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "list": false,
                        "list_add_label": "Add More",
                        "required": false,
                        "placeholder": "",
                        "show": true,
                        "name": "should_store_message",
                        "value": true,
                        "display_name": "Store Messages",
                        "advanced": true,
                        "dynamic": false,
                        "info": "Store the message in the history.",
                        "title_case": false,
                        "type": "bool",
                        "_input_type": "BoolInput"
                        },
                        "text_color": {
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "load_from_db": false,
                        "list": false,
                        "list_add_label": "Add More",
                        "required": false,
                        "placeholder": "",
                        "show": true,
                        "name": "text_color",
                        "value": "",
                        "display_name": "Text Color",
                        "advanced": true,
                        "input_types": [
                            "Message"
                        ],
                        "dynamic": false,
                        "info": "The text color of the name",
                        "title_case": false,
                        "type": "str",
                        "_input_type": "MessageTextInput"
                        }
                    },
                    "description": "Get chat inputs from the Playground.",
                    "icon": "MessagesSquare",
                    "base_classes": [
                        "Message"
                    ],
                    "display_name": "Chat Input",
                    "documentation": "https://docs.langflow.org/components-io#chat-input",
                    "minimized": true,
                    "custom_fields": {},
                    "output_types": [],
                    "pinned": false,
                    "conditional_paths": [],
                    "frozen": false,
                    "outputs": [
                        {
                        "types": [
                            "Message"
                        ],
                        "selected": "Message",
                        "name": "message",
                        "display_name": "Chat Message",
                        "method": "message_response",
                        "value": "__UNDEFINED__",
                        "cache": true,
                        "allows_loop": false,
                        "group_outputs": false,
                        "tool_mode": true
                        }
                    ],
                    "field_order": [
                        "input_value",
                        "should_store_message",
                        "sender",
                        "sender_name",
                        "session_id",
                        "files",
                        "background_color",
                        "chat_icon",
                        "text_color"
                    ],
                    "beta": false,
                    "legacy": false,
                    "edited": false,
                    "metadata": {
                        "module": "langflow.components.input_output.chat.ChatInput",
                        "code_hash": "192913db3453"
                    },
                    "tool_mode": false
                    },
                    "showNode": false,
                    "type": "ChatInput",
                    "id": "ChatInput-wx5WJ"
                },
                "selected": true,
                "measured": {
                    "width": 192,
                    "height": 48
                }
                }
            ],
            "edges": [
                {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                    "dataType": "LanguageModelComponent",
                    "id": "LanguageModelComponent-lRD6W",
                    "name": "text_output",
                    "output_types": [
                        "Message"
                    ]
                    },
                    "targetHandle": {
                    "fieldName": "input_value",
                    "id": "ChatOutput-fxS6N",
                    "inputTypes": [
                        "Data",
                        "DataFrame",
                        "Message"
                    ],
                    "type": "str"
                    }
                },
                "id": "reactflow__edge-LanguageModelComponent-lRD6W{œdataTypeœ:œLanguageModelComponentœ,œidœ:œLanguageModelComponent-lRD6Wœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-fxS6N{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-fxS6Nœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œstrœ}",
                "selected": false,
                "source": "LanguageModelComponent-lRD6W",
                "sourceHandle": "{œdataTypeœ:œLanguageModelComponentœ,œidœ:œLanguageModelComponent-lRD6Wœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
                "target": "ChatOutput-fxS6N",
                "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-fxS6Nœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œstrœ}"
                },
                {
                "animated": false,
                "data": {
                    "sourceHandle": {
                    "dataType": "Prompt",
                    "id": "Prompt-3Um6W",
                    "name": "prompt",
                    "output_types": [
                        "Message"
                    ]
                    },
                    "targetHandle": {
                    "fieldName": "system_message",
                    "id": "LanguageModelComponent-lRD6W",
                    "inputTypes": [
                        "Message"
                    ],
                    "type": "str"
                    }
                },
                "id": "reactflow__edge-Prompt-3Um6W{œdataTypeœ:œPromptœ,œidœ:œPrompt-3Um6Wœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-LanguageModelComponent-lRD6W{œfieldNameœ:œsystem_messageœ,œidœ:œLanguageModelComponent-lRD6Wœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "selected": false,
                "source": "Prompt-3Um6W",
                "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-3Um6Wœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
                "target": "LanguageModelComponent-lRD6W",
                "targetHandle": "{œfieldNameœ:œsystem_messageœ,œidœ:œLanguageModelComponent-lRD6Wœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "className": ""
                }
            ],
            "viewport": {
                "x": -220.28090275414615,
                "y": -664.7716318796872,
                "zoom": 0.9355140831651793
            }
            },
            "is_component": false,
            "updated_at": "2025-08-12T18:34:34+00:00",
            "webhook": false,
            "endpoint_name": null,
            "tags": [
            "chatbots"
            ],
            "locked": false,
            "mcp_enabled": true,
            "action_name": null,
            "action_description": null,
            "access_type": "PRIVATE",
            "id": "3711ce7c-83f3-46a9-bee1-01eae50dcbb1",
            "user_id": "f36e9f45-b0b0-4228-8303-ddff937be006",
            "folder_id": "def04754-a019-44cc-a355-d1fe00794a64"
        },
        "notes": "",
        "tags": [
            "chatbots"
        ],
        "source": "example_flows/Basic_Prompting_3711ce7c-83f3-46a9-bee1-01eae50dcbb1.json"
    },
    {
        "kind": "exemplar",
        "title": "Financial Report Parser",
        "intent": [
            "Extracts key financial metrics like Gross Profit, EBITDA, and Net Income from financial reports and structures them for easy analysis, using Structured Output Component"
        ],
        "components": [],
        "flow_json": {
            "name": "Financial Report Parser",
            "description": "Extracts key financial metrics like Gross Profit, EBITDA, and Net Income from financial reports and structures them for easy analysis, using Structured Output Component",
            "icon": null,
            "icon_bg_color": null,
            "gradient": null,
            "data": {
            "nodes": [
                {
                "data": {
                    "id": "ChatOutput-4nhAh",
                    "node": {
                    "base_classes": [
                        "Message"
                    ],
                    "beta": false,
                    "category": "outputs",
                    "conditional_paths": [],
                    "custom_fields": {},
                    "description": "Display a chat message in the Playground.",
                    "display_name": "Chat Output",
                    "documentation": "",
                    "edited": false,
                    "field_order": [
                        "input_value",
                        "should_store_message",
                        "sender",
                        "sender_name",
                        "session_id",
                        "data_template",
                        "background_color",
                        "chat_icon",
                        "text_color"
                    ],
                    "frozen": false,
                    "icon": "MessagesSquare",
                    "key": "ChatOutput",
                    "legacy": false,
                    "lf_version": "1.4.3",
                    "metadata": {
                        "code_hash": "6f74e04e39d5",
                        "module": "langflow.components.input_output.chat_output.ChatOutput"
                    },
                    "minimized": true,
                    "output_types": [],
                    "outputs": [
                        {
                        "allows_loop": false,
                        "cache": true,
                        "display_name": "Output Message",
                        "group_outputs": false,
                        "method": "message_response",
                        "name": "message",
                        "selected": "Message",
                        "tool_mode": true,
                        "types": [
                            "Message"
                        ],
                        "value": "__UNDEFINED__"
                        }
                    ],
                    "pinned": false,
                    "score": 0.003169567463043492,
                    "template": {
                        "_type": "Component",
                        "background_color": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Background Color",
                        "dynamic": false,
                        "info": "The background color of the icon.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "background_color",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "chat_icon": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Icon",
                        "dynamic": false,
                        "info": "The icon of the message.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "chat_icon",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "clean_data": {
                        "_input_type": "BoolInput",
                        "advanced": true,
                        "display_name": "Basic Clean Data",
                        "dynamic": false,
                        "info": "Whether to clean the data",
                        "list": false,
                        "list_add_label": "Add More",
                        "name": "clean_data",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "bool",
                        "value": true
                        },
                        "code": {
                        "advanced": true,
                        "dynamic": true,
                        "fileTypes": [],
                        "file_path": "",
                        "info": "",
                        "list": false,
                        "load_from_db": false,
                        "multiline": true,
                        "name": "code",
                        "password": false,
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "type": "code",
                        "value": "from collections.abc import Generator\nfrom typing import Any\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, DropdownInput, HandleInput, MessageTextInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.template.field.base import Output\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-output\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Output Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _serialize_data(self, data: Data) -> str:\n        \"\"\"Serialize Data object to JSON string.\"\"\"\n        # Convert data.data to JSON-serializable format\n        serializable_data = jsonable_encoder(data.data)\n        # Serialize with orjson, enabling pretty printing with indentation\n        json_bytes = orjson.dumps(serializable_data, option=orjson.OPT_INDENT_2)\n        # Convert bytes to string and wrap in Markdown code blocks\n        return \"```json\\n\" + json_bytes.decode(\"utf-8\") + \"\\n```\"\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([safe_convert(item, clean_data=self.clean_data) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return safe_convert(self.input_value)\n"
                        },
                        "data_template": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Data Template",
                        "dynamic": false,
                        "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "data_template",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "{text}"
                        },
                        "input_value": {
                        "_input_type": "MessageInput",
                        "advanced": false,
                        "display_name": "Inputs",
                        "dynamic": false,
                        "info": "Message to be passed as output.",
                        "input_types": [
                            "Data",
                            "DataFrame",
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "input_value",
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "sender": {
                        "_input_type": "DropdownInput",
                        "advanced": true,
                        "combobox": false,
                        "dialog_inputs": {},
                        "display_name": "Sender Type",
                        "dynamic": false,
                        "info": "Type of sender.",
                        "name": "sender",
                        "options": [
                            "Machine",
                            "User"
                        ],
                        "options_metadata": [],
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "Machine"
                        },
                        "sender_name": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Sender Name",
                        "dynamic": false,
                        "info": "Name of the sender.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "sender_name",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "AI"
                        },
                        "session_id": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Session ID",
                        "dynamic": false,
                        "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "session_id",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "should_store_message": {
                        "_input_type": "BoolInput",
                        "advanced": true,
                        "display_name": "Store Messages",
                        "dynamic": false,
                        "info": "Store the message in the history.",
                        "list": false,
                        "list_add_label": "Add More",
                        "name": "should_store_message",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "bool",
                        "value": true
                        },
                        "text_color": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Text Color",
                        "dynamic": false,
                        "info": "The text color of the name",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "text_color",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        }
                    },
                    "tool_mode": false
                    },
                    "showNode": false,
                    "type": "ChatOutput"
                },
                "id": "ChatOutput-4nhAh",
                "measured": {
                    "height": 48,
                    "width": 192
                },
                "position": {
                    "x": 2235,
                    "y": 435
                },
                "selected": false,
                "type": "genericNode"
                },
                {
                "data": {
                    "id": "ChatInput-iq79U",
                    "node": {
                    "base_classes": [
                        "Message"
                    ],
                    "beta": false,
                    "category": "inputs",
                    "conditional_paths": [],
                    "custom_fields": {},
                    "description": "Get chat inputs from the Playground.",
                    "display_name": "Chat Input",
                    "documentation": "",
                    "edited": false,
                    "field_order": [
                        "input_value",
                        "should_store_message",
                        "sender",
                        "sender_name",
                        "session_id",
                        "files",
                        "background_color",
                        "chat_icon",
                        "text_color"
                    ],
                    "frozen": false,
                    "icon": "MessagesSquare",
                    "key": "ChatInput",
                    "legacy": false,
                    "lf_version": "1.4.3",
                    "metadata": {
                        "code_hash": "192913db3453",
                        "module": "langflow.components.input_output.chat.ChatInput"
                    },
                    "minimized": true,
                    "output_types": [],
                    "outputs": [
                        {
                        "allows_loop": false,
                        "cache": true,
                        "display_name": "Chat Message",
                        "group_outputs": false,
                        "method": "message_response",
                        "name": "message",
                        "selected": "Message",
                        "tool_mode": true,
                        "types": [
                            "Message"
                        ],
                        "value": "__UNDEFINED__"
                        }
                    ],
                    "pinned": false,
                    "score": 0.0020353564437605998,
                    "template": {
                        "_type": "Component",
                        "background_color": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Background Color",
                        "dynamic": false,
                        "info": "The background color of the icon.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "background_color",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "chat_icon": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Icon",
                        "dynamic": false,
                        "info": "The icon of the message.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "chat_icon",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "code": {
                        "advanced": true,
                        "dynamic": true,
                        "fileTypes": [],
                        "file_path": "",
                        "info": "",
                        "list": false,
                        "load_from_db": false,
                        "multiline": true,
                        "name": "code",
                        "password": false,
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "type": "code",
                        "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-input\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Chat Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                        },
                        "files": {
                        "_input_type": "FileInput",
                        "advanced": true,
                        "display_name": "Files",
                        "dynamic": false,
                        "fileTypes": [
                            "txt",
                            "md",
                            "mdx",
                            "csv",
                            "json",
                            "yaml",
                            "yml",
                            "xml",
                            "html",
                            "htm",
                            "pdf",
                            "docx",
                            "py",
                            "sh",
                            "sql",
                            "js",
                            "ts",
                            "tsx",
                            "jpg",
                            "jpeg",
                            "png",
                            "bmp",
                            "image"
                        ],
                        "file_path": "",
                        "info": "Files to be sent with the message.",
                        "list": true,
                        "list_add_label": "Add More",
                        "name": "files",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "temp_file": true,
                        "title_case": false,
                        "trace_as_metadata": true,
                        "type": "file",
                        "value": ""
                        },
                        "input_value": {
                        "_input_type": "MultilineInput",
                        "advanced": false,
                        "display_name": "Input Text",
                        "dynamic": false,
                        "info": "Message to be passed as input.",
                        "input_types": [],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "multiline": true,
                        "name": "input_value",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "In 2022, the company demonstrated strong financial performance, reporting a gross profit of $1.2 billion, reflecting stable revenue generation and effective cost management. The EBITDA stood at $900 million, highlighting the company’s solid operational efficiency and profitability before interest, taxes, depreciation, and amortization. Despite a slight increase in operating expenses compared to 2021, the company maintained a healthy bottom line, achieving a net income of $500 million. This growth underscores the company’s ability to navigate economic challenges while sustaining profitability, reinforcing its financial stability and competitive position in the market."
                        },
                        "sender": {
                        "_input_type": "DropdownInput",
                        "advanced": true,
                        "combobox": false,
                        "dialog_inputs": {},
                        "display_name": "Sender Type",
                        "dynamic": false,
                        "info": "Type of sender.",
                        "name": "sender",
                        "options": [
                            "Machine",
                            "User"
                        ],
                        "options_metadata": [],
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "User"
                        },
                        "sender_name": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Sender Name",
                        "dynamic": false,
                        "info": "Name of the sender.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "sender_name",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "User"
                        },
                        "session_id": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Session ID",
                        "dynamic": false,
                        "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "session_id",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "should_store_message": {
                        "_input_type": "BoolInput",
                        "advanced": true,
                        "display_name": "Store Messages",
                        "dynamic": false,
                        "info": "Store the message in the history.",
                        "list": false,
                        "list_add_label": "Add More",
                        "name": "should_store_message",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "bool",
                        "value": true
                        },
                        "text_color": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Text Color",
                        "dynamic": false,
                        "info": "The text color of the name",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "text_color",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        }
                    },
                    "tool_mode": false
                    },
                    "selected_output": "message",
                    "showNode": false,
                    "type": "ChatInput"
                },
                "dragging": false,
                "id": "ChatInput-iq79U",
                "measured": {
                    "height": 48,
                    "width": 192
                },
                "position": {
                    "x": 866.761331501802,
                    "y": 581.619639019103
                },
                "selected": false,
                "type": "genericNode"
                },
                {
                "data": {
                    "id": "note-thPHG",
                    "node": {
                    "description": "### 💡 Add your OpenAI API key here",
                    "display_name": "",
                    "documentation": "",
                    "template": {
                        "backgroundColor": "transparent"
                    }
                    },
                    "type": "note"
                },
                "dragging": false,
                "id": "note-thPHG",
                "measured": {
                    "height": 324,
                    "width": 324
                },
                "position": {
                    "x": 905.0310846743869,
                    "y": -389.43902326187924
                },
                "selected": false,
                "type": "noteNode"
                },
                {
                "data": {
                    "id": "note-mYcPR",
                    "node": {
                    "description": "This template extracts key financial metrics from a given financial report text. The extracted data is structured and formatted for chat consumption.\n\n## Quickstart\n\n1. Add your OpenAI API key to the **Language Model** component, or select a different provider and model.\n2. Open the **Playground** to start the chat and run the flow.\nFor this example, the **Chat Input** component is pre-loaded with a sample financial report. The **Language Model** component identifies and retrieves the gross profit, EBITDA, net income, and operating expenses information from the financial report. Then, the **Structured Output** component formats extracted data into a structured format for better readability and further processing. Finally, the **Parser** component converts extracted data into a messages to be returned to the user.",
                    "display_name": "",
                    "documentation": "",
                    "template": {}
                    },
                    "type": "note"
                },
                "dragging": false,
                "height": 688,
                "id": "note-mYcPR",
                "measured": {
                    "height": 688,
                    "width": 619
                },
                "position": {
                    "x": 270.9912976390468,
                    "y": -396.43811550696176
                },
                "resizing": false,
                "selected": false,
                "type": "noteNode",
                "width": 619
                },
                {
                "data": {
                    "id": "parser-V7B1O",
                    "node": {
                    "base_classes": [
                        "Message"
                    ],
                    "beta": false,
                    "category": "processing",
                    "conditional_paths": [],
                    "custom_fields": {},
                    "description": "Format a DataFrame or Data object into text using a template. Enable 'Stringify' to convert input into a readable string instead.",
                    "display_name": "Parser",
                    "documentation": "",
                    "edited": false,
                    "field_order": [
                        "mode",
                        "pattern",
                        "input_data",
                        "sep"
                    ],
                    "frozen": false,
                    "icon": "braces",
                    "key": "parser",
                    "legacy": false,
                    "lf_version": "1.4.3",
                    "metadata": {},
                    "minimized": false,
                    "output_types": [],
                    "outputs": [
                        {
                        "allows_loop": false,
                        "cache": true,
                        "display_name": "Parsed Text",
                        "hidden": false,
                        "method": "parse_combined_text",
                        "name": "parsed_text",
                        "selected": "Message",
                        "tool_mode": true,
                        "types": [
                            "Message"
                        ],
                        "value": "__UNDEFINED__"
                        }
                    ],
                    "pinned": false,
                    "score": 2.220446049250313e-16,
                    "template": {
                        "_type": "Component",
                        "code": {
                        "advanced": true,
                        "dynamic": true,
                        "fileTypes": [],
                        "file_path": "",
                        "info": "",
                        "list": false,
                        "load_from_db": false,
                        "multiline": true,
                        "name": "code",
                        "password": false,
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "type": "code",
                        "value": "import json\nfrom typing import Any\n\nfrom langflow.custom import Component\nfrom langflow.io import (\n    BoolInput,\n    HandleInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n    TabInput,\n)\nfrom langflow.schema import Data, DataFrame\nfrom langflow.schema.message import Message\n\n\nclass ParserComponent(Component):\n    name = \"parser\"\n    display_name = \"Parser\"\n    description = (\n        \"Format a DataFrame or Data object into text using a template. \"\n        \"Enable 'Stringify' to convert input into a readable string instead.\"\n    )\n    icon = \"braces\"\n\n    inputs = [\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use variables within curly brackets to extract column values for DataFrames \"\n                \"or key values for Data.\"\n                \"For example: `Name: {Name}, Age: {Age}, Country: {Country}`\"\n            ),\n            value=\"Text: {text}\",  # Example default\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    def parse_combined_text(self) -> Message:\n        \"\"\"Parse all rows/items into a single text or convert input to string if `stringify` is enabled.\"\"\"\n        # Early return for stringify option\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        df, data = self._clean_args()\n\n        lines = []\n        if df is not None:\n            for _, row in df.iterrows():\n                formatted_text = self.pattern.format(**row.to_dict())\n                lines.append(formatted_text)\n        elif data is not None:\n            formatted_text = self.pattern.format(**data.data)\n            lines.append(formatted_text)\n\n        combined_text = self.sep.join(lines)\n        self.status = combined_text\n        return Message(text=combined_text)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                return json.dumps(data.data)\n            if isinstance(data, DataFrame):\n                if hasattr(self, \"clean_data\") and self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n                return data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([self._safe_convert(item) for item in self.input_data])\n        else:\n            result = self._safe_convert(self.input_data)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n"
                        },
                        "input_data": {
                        "_input_type": "HandleInput",
                        "advanced": false,
                        "display_name": "Data or DataFrame",
                        "dynamic": false,
                        "info": "Accepts either a DataFrame or a Data object.",
                        "input_types": [
                            "DataFrame",
                            "Data"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "name": "input_data",
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "trace_as_metadata": true,
                        "type": "other",
                        "value": ""
                        },
                        "mode": {
                        "_input_type": "TabInput",
                        "advanced": false,
                        "display_name": "Mode",
                        "dynamic": false,
                        "info": "Convert into raw string instead of using a template.",
                        "name": "mode",
                        "options": [
                            "Parser",
                            "Stringify"
                        ],
                        "placeholder": "",
                        "real_time_refresh": true,
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "tab",
                        "value": "Parser"
                        },
                        "pattern": {
                        "_input_type": "MultilineInput",
                        "advanced": false,
                        "copy_field": false,
                        "display_name": "Template",
                        "dynamic": true,
                        "info": "Use variables within curly brackets to extract column values for DataFrames or key values for Data.For example: `Name: {Name}, Age: {Age}, Country: {Country}`",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "multiline": true,
                        "name": "pattern",
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "EBITDA: {EBITDA}  ,  Net Income: {NET_INCOME} , GROSS_PROFIT: {GROSS_PROFIT}"
                        },
                        "sep": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Separator",
                        "dynamic": false,
                        "info": "String used to separate rows/items.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "sep",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "\n"
                        }
                    },
                    "tool_mode": false
                    },
                    "showNode": true,
                    "type": "parser"
                },
                "dragging": false,
                "id": "parser-V7B1O",
                "measured": {
                    "height": 361,
                    "width": 320
                },
                "position": {
                    "x": 1765.290752395121,
                    "y": 164.78283431885177
                },
                "selected": false,
                "type": "genericNode"
                },
                {
                "data": {
                    "id": "LanguageModelComponent-W5SYl",
                    "node": {
                    "base_classes": [
                        "LanguageModel",
                        "Message"
                    ],
                    "beta": false,
                    "conditional_paths": [],
                    "custom_fields": {},
                    "description": "Runs a language model given a specified provider. ",
                    "display_name": "Language Model",
                    "documentation": "",
                    "edited": false,
                    "field_order": [
                        "provider",
                        "model_name",
                        "api_key",
                        "input_value",
                        "system_message",
                        "stream",
                        "temperature"
                    ],
                    "frozen": false,
                    "icon": "brain-circuit",
                    "legacy": false,
                    "lf_version": "1.4.3",
                    "metadata": {
                        "keywords": [
                        "model",
                        "llm",
                        "language model",
                        "large language model"
                        ]
                    },
                    "minimized": false,
                    "output_types": [],
                    "outputs": [
                        {
                        "types": [
                            "Message"
                        ],
                        "selected": "Message",
                        "name": "text_output",
                        "display_name": "Model Response",
                        "method": "text_response",
                        "value": "__UNDEFINED__",
                        "cache": true,
                        "required_inputs": null,
                        "allows_loop": false,
                        "group_outputs": false,
                        "options": null,
                        "tool_mode": true
                        },
                        {
                        "types": [
                            "LanguageModel"
                        ],
                        "selected": "LanguageModel",
                        "name": "model_output",
                        "display_name": "Language Model",
                        "method": "build_model",
                        "value": "__UNDEFINED__",
                        "cache": true,
                        "required_inputs": null,
                        "allows_loop": false,
                        "group_outputs": false,
                        "options": null,
                        "tool_mode": true
                        }
                    ],
                    "pinned": false,
                    "priority": 0,
                    "template": {
                        "_type": "Component",
                        "api_key": {
                        "_input_type": "SecretStrInput",
                        "advanced": false,
                        "display_name": "OpenAI API Key",
                        "dynamic": false,
                        "info": "Model Provider API key",
                        "input_types": [],
                        "load_from_db": true,
                        "name": "api_key",
                        "password": true,
                        "placeholder": "",
                        "real_time_refresh": true,
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "type": "str",
                        "value": "OPENAI_API_KEY"
                        },
                        "code": {
                        "advanced": true,
                        "dynamic": true,
                        "fileTypes": [],
                        "file_path": "",
                        "info": "",
                        "list": false,
                        "load_from_db": false,
                        "multiline": true,
                        "name": "code",
                        "password": false,
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "type": "code",
                        "value": "from typing import Any\n\nfrom langchain_anthropic import ChatAnthropic\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain_openai import ChatOpenAI\n\nfrom langflow.base.models.anthropic_constants import ANTHROPIC_MODELS\nfrom langflow.base.models.google_generative_ai_constants import GOOGLE_GENERATIVE_AI_MODELS\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_CHAT_MODEL_NAMES, OPENAI_REASONING_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MultilineInput, SecretStrInput, SliderInput\nfrom langflow.schema.dotdict import dotdict\n\n\nclass LanguageModelComponent(LCModelComponent):\n    display_name = \"Language Model\"\n    description = \"Runs a language model given a specified provider.\"\n    documentation: str = \"https://docs.langflow.org/components-models\"\n    icon = \"brain-circuit\"\n    category = \"models\"\n    priority = 0  # Set priority to 0 to make it appear first\n\n    inputs = [\n        DropdownInput(\n            name=\"provider\",\n            display_name=\"Model Provider\",\n            options=[\"OpenAI\", \"Anthropic\", \"Google\"],\n            value=\"OpenAI\",\n            info=\"Select the model provider\",\n            real_time_refresh=True,\n            options_metadata=[{\"icon\": \"OpenAI\"}, {\"icon\": \"Anthropic\"}, {\"icon\": \"GoogleGenerativeAI\"}],\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            options=OPENAI_CHAT_MODEL_NAMES + OPENAI_REASONING_MODEL_NAMES,\n            value=OPENAI_CHAT_MODEL_NAMES[0],\n            info=\"Select the model to use\",\n            real_time_refresh=True,\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"Model Provider API key\",\n            required=False,\n            show=True,\n            real_time_refresh=True,\n        ),\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Input\",\n            info=\"The input text to send to the model\",\n        ),\n        MultilineInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"A system message that helps set the behavior of the assistant\",\n            advanced=False,\n        ),\n        BoolInput(\n            name=\"stream\",\n            display_name=\"Stream\",\n            info=\"Whether to stream the response\",\n            value=False,\n            advanced=True,\n        ),\n        SliderInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.1,\n            info=\"Controls randomness in responses\",\n            range_spec=RangeSpec(min=0, max=1, step=0.01),\n            advanced=True,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:\n        provider = self.provider\n        model_name = self.model_name\n        temperature = self.temperature\n        stream = self.stream\n\n        if provider == \"OpenAI\":\n            if not self.api_key:\n                msg = \"OpenAI API key is required when using OpenAI provider\"\n                raise ValueError(msg)\n\n            if model_name in OPENAI_REASONING_MODEL_NAMES:\n                # reasoning models do not support temperature (yet)\n                temperature = None\n\n            return ChatOpenAI(\n                model_name=model_name,\n                temperature=temperature,\n                streaming=stream,\n                openai_api_key=self.api_key,\n            )\n        if provider == \"Anthropic\":\n            if not self.api_key:\n                msg = \"Anthropic API key is required when using Anthropic provider\"\n                raise ValueError(msg)\n            return ChatAnthropic(\n                model=model_name,\n                temperature=temperature,\n                streaming=stream,\n                anthropic_api_key=self.api_key,\n            )\n        if provider == \"Google\":\n            if not self.api_key:\n                msg = \"Google API key is required when using Google provider\"\n                raise ValueError(msg)\n            return ChatGoogleGenerativeAI(\n                model=model_name,\n                temperature=temperature,\n                streaming=stream,\n                google_api_key=self.api_key,\n            )\n        msg = f\"Unknown provider: {provider}\"\n        raise ValueError(msg)\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None) -> dotdict:\n        if field_name == \"provider\":\n            if field_value == \"OpenAI\":\n                build_config[\"model_name\"][\"options\"] = OPENAI_CHAT_MODEL_NAMES + OPENAI_REASONING_MODEL_NAMES\n                build_config[\"model_name\"][\"value\"] = OPENAI_CHAT_MODEL_NAMES[0]\n                build_config[\"api_key\"][\"display_name\"] = \"OpenAI API Key\"\n            elif field_value == \"Anthropic\":\n                build_config[\"model_name\"][\"options\"] = ANTHROPIC_MODELS\n                build_config[\"model_name\"][\"value\"] = ANTHROPIC_MODELS[0]\n                build_config[\"api_key\"][\"display_name\"] = \"Anthropic API Key\"\n            elif field_value == \"Google\":\n                build_config[\"model_name\"][\"options\"] = GOOGLE_GENERATIVE_AI_MODELS\n                build_config[\"model_name\"][\"value\"] = GOOGLE_GENERATIVE_AI_MODELS[0]\n                build_config[\"api_key\"][\"display_name\"] = \"Google API Key\"\n        elif field_name == \"model_name\" and field_value.startswith(\"o1\") and self.provider == \"OpenAI\":\n            # Hide system_message for o1 models - currently unsupported\n            if \"system_message\" in build_config:\n                build_config[\"system_message\"][\"show\"] = False\n        elif field_name == \"model_name\" and not field_value.startswith(\"o1\") and \"system_message\" in build_config:\n            build_config[\"system_message\"][\"show\"] = True\n        return build_config\n"
                        },
                        "input_value": {
                        "_input_type": "MessageTextInput",
                        "advanced": false,
                        "display_name": "Input",
                        "dynamic": false,
                        "info": "The input text to send to the model",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "input_value",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "model_name": {
                        "_input_type": "DropdownInput",
                        "advanced": false,
                        "combobox": false,
                        "dialog_inputs": {},
                        "display_name": "Model Name",
                        "dynamic": false,
                        "info": "Select the model to use",
                        "name": "model_name",
                        "options": [
                            "gpt-4o-mini",
                            "gpt-4o",
                            "gpt-4.1",
                            "gpt-4.1-mini",
                            "gpt-4.1-nano",
                            "gpt-4.5-preview",
                            "gpt-4-turbo",
                            "gpt-4-turbo-preview",
                            "gpt-4",
                            "gpt-3.5-turbo"
                        ],
                        "options_metadata": [],
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "toggle": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "gpt-4o-mini"
                        },
                        "provider": {
                        "_input_type": "DropdownInput",
                        "advanced": false,
                        "combobox": false,
                        "dialog_inputs": {},
                        "display_name": "Model Provider",
                        "dynamic": false,
                        "info": "Select the model provider",
                        "name": "provider",
                        "options": [
                            "OpenAI",
                            "Anthropic",
                            "Google"
                        ],
                        "options_metadata": [
                            {
                            "icon": "OpenAI"
                            },
                            {
                            "icon": "Anthropic"
                            },
                            {
                            "icon": "Google"
                            }
                        ],
                        "placeholder": "",
                        "real_time_refresh": true,
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "toggle": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "OpenAI"
                        },
                        "stream": {
                        "_input_type": "BoolInput",
                        "advanced": true,
                        "display_name": "Stream",
                        "dynamic": false,
                        "info": "Whether to stream the response",
                        "list": false,
                        "list_add_label": "Add More",
                        "name": "stream",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "type": "bool",
                        "value": false
                        },
                        "system_message": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "System Message",
                        "dynamic": false,
                        "info": "A system message that helps set the behavior of the assistant",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "system_message",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "temperature": {
                        "_input_type": "SliderInput",
                        "advanced": true,
                        "display_name": "Temperature",
                        "dynamic": false,
                        "info": "Controls randomness in responses",
                        "max_label": "",
                        "max_label_icon": "",
                        "min_label": "",
                        "min_label_icon": "",
                        "name": "temperature",
                        "placeholder": "",
                        "range_spec": {
                            "max": 1,
                            "min": 0,
                            "step": 0.01,
                            "step_type": "float"
                        },
                        "required": false,
                        "show": true,
                        "slider_buttons": false,
                        "slider_buttons_options": [],
                        "slider_input": false,
                        "title_case": false,
                        "tool_mode": false,
                        "type": "slider",
                        "value": 0.1
                        }
                    },
                    "tool_mode": false,
                    "last_updated": "2025-08-12T18:38:52.103Z"
                    },
                    "selected_output": "model_output",
                    "showNode": true,
                    "type": "LanguageModelComponent"
                },
                "dragging": false,
                "id": "LanguageModelComponent-W5SYl",
                "measured": {
                    "height": 451,
                    "width": 320
                },
                "position": {
                    "x": 912.2321256553546,
                    "y": -350.4215686841271
                },
                "selected": false,
                "type": "genericNode"
                },
                {
                "data": {
                    "id": "StructuredOutput-FBy4l",
                    "node": {
                    "base_classes": [
                        "Data"
                    ],
                    "beta": false,
                    "conditional_paths": [],
                    "custom_fields": {},
                    "description": "Uses an LLM to generate structured data. Ideal for extraction and consistency.",
                    "display_name": "Structured Output",
                    "documentation": "",
                    "edited": false,
                    "field_order": [
                        "llm",
                        "input_value",
                        "system_prompt",
                        "schema_name",
                        "output_schema"
                    ],
                    "frozen": false,
                    "icon": "braces",
                    "legacy": false,
                    "lf_version": "1.4.3",
                    "metadata": {
                        "code_hash": "ad2a6f4552c0",
                        "module": "langflow.components.processing.structured_output.StructuredOutputComponent"
                    },
                    "minimized": false,
                    "output_types": [],
                    "outputs": [
                        {
                        "allows_loop": false,
                        "cache": true,
                        "display_name": "Structured Output",
                        "group_outputs": false,
                        "method": "build_structured_output",
                        "name": "structured_output",
                        "selected": "Data",
                        "tool_mode": true,
                        "types": [
                            "Data"
                        ],
                        "value": "__UNDEFINED__"
                        },
                        {
                        "allows_loop": false,
                        "cache": true,
                        "display_name": "Structured Output",
                        "group_outputs": false,
                        "method": "build_structured_dataframe",
                        "name": "dataframe_output",
                        "selected": "DataFrame",
                        "tool_mode": true,
                        "types": [
                            "DataFrame"
                        ],
                        "value": "__UNDEFINED__"
                        }
                    ],
                    "pinned": false,
                    "template": {
                        "_type": "Component",
                        "code": {
                        "advanced": true,
                        "dynamic": true,
                        "fileTypes": [],
                        "file_path": "",
                        "info": "",
                        "list": false,
                        "load_from_db": false,
                        "multiline": true,
                        "name": "code",
                        "password": false,
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "type": "code",
                        "value": "from pydantic import BaseModel, Field, create_model\nfrom trustcall import create_extractor\n\nfrom langflow.base.models.chat_result import get_chat_result\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.helpers.base_model import build_model_from_schema\nfrom langflow.io import (\n    HandleInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n    TableInput,\n)\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.table import EditMode\n\n\nclass StructuredOutputComponent(Component):\n    display_name = \"Structured Output\"\n    description = \"Uses an LLM to generate structured data. Ideal for extraction and consistency.\"\n    documentation: str = \"https://docs.langflow.org/components-processing#structured-output\"\n    name = \"StructuredOutput\"\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"The language model to use to generate the structured output.\",\n            input_types=[\"LanguageModel\"],\n            required=True,\n        ),\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input Message\",\n            info=\"The input message to the language model.\",\n            tool_mode=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Format Instructions\",\n            info=\"The instructions to the language model for formatting the output.\",\n            value=(\n                \"You are an AI that extracts structured JSON objects from unstructured text. \"\n                \"Use a predefined schema with expected types (str, int, float, bool, dict). \"\n                \"Extract ALL relevant instances that match the schema - if multiple patterns exist, capture them all. \"\n                \"Fill missing or ambiguous values with defaults: null for missing values. \"\n                \"Remove exact duplicates but keep variations that have different field values. \"\n                \"Always return valid JSON in the expected format, never throw errors. \"\n                \"If multiple objects can be extracted, return them all in the structured format.\"\n            ),\n            required=True,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"schema_name\",\n            display_name=\"Schema Name\",\n            info=\"Provide a name for the output data schema.\",\n            advanced=True,\n        ),\n        TableInput(\n            name=\"output_schema\",\n            display_name=\"Output Schema\",\n            info=\"Define the structure and data types for the model's output.\",\n            required=True,\n            # TODO: remove deault value\n            table_schema=[\n                {\n                    \"name\": \"name\",\n                    \"display_name\": \"Name\",\n                    \"type\": \"str\",\n                    \"description\": \"Specify the name of the output field.\",\n                    \"default\": \"field\",\n                    \"edit_mode\": EditMode.INLINE,\n                },\n                {\n                    \"name\": \"description\",\n                    \"display_name\": \"Description\",\n                    \"type\": \"str\",\n                    \"description\": \"Describe the purpose of the output field.\",\n                    \"default\": \"description of field\",\n                    \"edit_mode\": EditMode.POPOVER,\n                },\n                {\n                    \"name\": \"type\",\n                    \"display_name\": \"Type\",\n                    \"type\": \"str\",\n                    \"edit_mode\": EditMode.INLINE,\n                    \"description\": (\"Indicate the data type of the output field (e.g., str, int, float, bool, dict).\"),\n                    \"options\": [\"str\", \"int\", \"float\", \"bool\", \"dict\"],\n                    \"default\": \"str\",\n                },\n                {\n                    \"name\": \"multiple\",\n                    \"display_name\": \"As List\",\n                    \"type\": \"boolean\",\n                    \"description\": \"Set to True if this output field should be a list of the specified type.\",\n                    \"default\": \"False\",\n                    \"edit_mode\": EditMode.INLINE,\n                },\n            ],\n            value=[\n                {\n                    \"name\": \"field\",\n                    \"description\": \"description of field\",\n                    \"type\": \"str\",\n                    \"multiple\": \"False\",\n                }\n            ],\n        ),\n    ]\n\n    outputs = [\n        Output(\n            name=\"structured_output\",\n            display_name=\"Structured Output\",\n            method=\"build_structured_output\",\n        ),\n        Output(\n            name=\"dataframe_output\",\n            display_name=\"Structured Output\",\n            method=\"build_structured_dataframe\",\n        ),\n    ]\n\n    def build_structured_output_base(self):\n        schema_name = self.schema_name or \"OutputModel\"\n\n        if not hasattr(self.llm, \"with_structured_output\"):\n            msg = \"Language model does not support structured output.\"\n            raise TypeError(msg)\n        if not self.output_schema:\n            msg = \"Output schema cannot be empty\"\n            raise ValueError(msg)\n\n        output_model_ = build_model_from_schema(self.output_schema)\n\n        output_model = create_model(\n            schema_name,\n            __doc__=f\"A list of {schema_name}.\",\n            objects=(list[output_model_], Field(description=f\"A list of {schema_name}.\")),  # type: ignore[valid-type]\n        )\n\n        try:\n            llm_with_structured_output = create_extractor(self.llm, tools=[output_model])\n        except NotImplementedError as exc:\n            msg = f\"{self.llm.__class__.__name__} does not support structured output.\"\n            raise TypeError(msg) from exc\n\n        config_dict = {\n            \"run_name\": self.display_name,\n            \"project_name\": self.get_project_name(),\n            \"callbacks\": self.get_langchain_callbacks(),\n        }\n        result = get_chat_result(\n            runnable=llm_with_structured_output,\n            system_message=self.system_prompt,\n            input_value=self.input_value,\n            config=config_dict,\n        )\n\n        # OPTIMIZATION NOTE: Simplified processing based on trustcall response structure\n        # Handle non-dict responses (shouldn't happen with trustcall, but defensive)\n        if not isinstance(result, dict):\n            return result\n\n        # Extract first response and convert BaseModel to dict\n        responses = result.get(\"responses\", [])\n        if not responses:\n            return result\n\n        # Convert BaseModel to dict (creates the \"objects\" key)\n        first_response = responses[0]\n        structured_data = first_response.model_dump() if isinstance(first_response, BaseModel) else first_response\n\n        # Extract the objects array (guaranteed to exist due to our Pydantic model structure)\n        return structured_data.get(\"objects\", structured_data)\n\n    def build_structured_output(self) -> Data:\n        output = self.build_structured_output_base()\n        if not isinstance(output, list) or not output:\n            # handle empty or unexpected type case\n            msg = \"No structured output returned\"\n            raise ValueError(msg)\n        if len(output) == 1:\n            return Data(data=output[0])\n        if len(output) > 1:\n            # Multiple outputs - wrap them in a results container\n            return Data(data={\"results\": output})\n        return Data()\n\n    def build_structured_dataframe(self) -> DataFrame:\n        output = self.build_structured_output_base()\n        if not isinstance(output, list) or not output:\n            # handle empty or unexpected type case\n            msg = \"No structured output returned\"\n            raise ValueError(msg)\n        data_list = [Data(data=output[0])] if len(output) == 1 else [Data(data=item) for item in output]\n\n        return DataFrame(data_list)\n"
                        },
                        "input_value": {
                        "_input_type": "MessageTextInput",
                        "advanced": false,
                        "display_name": "Input Message",
                        "dynamic": false,
                        "info": "The input message to the language model.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "input_value",
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "tool_mode": true,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "llm": {
                        "_input_type": "HandleInput",
                        "advanced": false,
                        "display_name": "Language Model",
                        "dynamic": false,
                        "info": "The language model to use to generate the structured output.",
                        "input_types": [
                            "LanguageModel"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "name": "llm",
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "trace_as_metadata": true,
                        "type": "other",
                        "value": ""
                        },
                        "output_schema": {
                        "_input_type": "TableInput",
                        "advanced": false,
                        "display_name": "Output Schema",
                        "dynamic": false,
                        "info": "Define the structure and data types for the model's output.",
                        "is_list": true,
                        "list_add_label": "Add More",
                        "name": "output_schema",
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "table_icon": "Table",
                        "table_schema": {
                            "columns": [
                            {
                                "default": "field",
                                "description": "Specify the name of the output field.",
                                "disable_edit": false,
                                "display_name": "Name",
                                "edit_mode": "inline",
                                "filterable": true,
                                "formatter": "text",
                                "hidden": false,
                                "name": "name",
                                "sortable": true,
                                "type": "str"
                            },
                            {
                                "default": "description of field",
                                "description": "Describe the purpose of the output field.",
                                "disable_edit": false,
                                "display_name": "Description",
                                "edit_mode": "popover",
                                "filterable": true,
                                "formatter": "text",
                                "hidden": false,
                                "name": "description",
                                "sortable": true,
                                "type": "str"
                            },
                            {
                                "default": "str",
                                "description": "Indicate the data type of the output field (e.g., str, int, float, bool, dict).",
                                "disable_edit": false,
                                "display_name": "Type",
                                "edit_mode": "inline",
                                "filterable": true,
                                "formatter": "text",
                                "hidden": false,
                                "name": "type",
                                "options": [
                                "str",
                                "int",
                                "float",
                                "bool",
                                "dict"
                                ],
                                "sortable": true,
                                "type": "str"
                            },
                            {
                                "default": false,
                                "description": "Set to True if this output field should be a list of the specified type.",
                                "disable_edit": false,
                                "display_name": "As List",
                                "edit_mode": "inline",
                                "filterable": true,
                                "formatter": "boolean",
                                "hidden": false,
                                "name": "multiple",
                                "sortable": true,
                                "type": "boolean"
                            }
                            ]
                        },
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_metadata": true,
                        "trigger_icon": "Table",
                        "trigger_text": "Open table",
                        "type": "table",
                        "value": [
                            {
                            "description": "description of field",
                            "multiple": "False",
                            "name": "EBITDA",
                            "type": "str"
                            },
                            {
                            "description": "description of field",
                            "multiple": false,
                            "name": "NET_INCOME",
                            "type": "str"
                            },
                            {
                            "description": "description of field",
                            "multiple": false,
                            "name": "GROSS_PROFIT",
                            "type": "str"
                            }
                        ]
                        },
                        "schema_name": {
                        "_input_type": "MessageTextInput",
                        "advanced": true,
                        "display_name": "Schema Name",
                        "dynamic": false,
                        "info": "Provide a name for the output data schema.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "name": "schema_name",
                        "placeholder": "",
                        "required": false,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": ""
                        },
                        "system_prompt": {
                        "_input_type": "MultilineInput",
                        "advanced": true,
                        "copy_field": false,
                        "display_name": "Format Instructions",
                        "dynamic": false,
                        "info": "The instructions to the language model for formatting the output.",
                        "input_types": [
                            "Message"
                        ],
                        "list": false,
                        "list_add_label": "Add More",
                        "load_from_db": false,
                        "multiline": true,
                        "name": "system_prompt",
                        "placeholder": "",
                        "required": true,
                        "show": true,
                        "title_case": false,
                        "tool_mode": false,
                        "trace_as_input": true,
                        "trace_as_metadata": true,
                        "type": "str",
                        "value": "You are an AI that extracts structured JSON objects from unstructured text. Use a predefined schema with expected types (str, int, float, bool, dict). Extract ALL relevant instances that match the schema - if multiple patterns exist, capture them all. Fill missing or ambiguous values with defaults: null for missing values. Remove exact duplicates but keep variations that have different field values. Always return valid JSON in the expected format, never throw errors. If multiple objects can be extracted, return them all in the structured format."
                        }
                    },
                    "tool_mode": false
                    },
                    "selected_output": "parsed_text",
                    "showNode": true,
                    "type": "StructuredOutput"
                },
                "dragging": false,
                "id": "StructuredOutput-FBy4l",
                "measured": {
                    "height": 349,
                    "width": 320
                },
                "position": {
                    "x": 1365.3538332076944,
                    "y": 156.68214734917737
                },
                "selected": false,
                "type": "genericNode"
                }
            ],
            "edges": [
                {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                    "dataType": "parser",
                    "id": "parser-V7B1O",
                    "name": "parsed_text",
                    "output_types": [
                        "Message"
                    ]
                    },
                    "targetHandle": {
                    "fieldName": "input_value",
                    "id": "ChatOutput-4nhAh",
                    "inputTypes": [
                        "Data",
                        "DataFrame",
                        "Message"
                    ],
                    "type": "str"
                    }
                },
                "id": "reactflow__edge-parser-V7B1O{œdataTypeœ:œparserœ,œidœ:œparser-V7B1Oœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-4nhAh{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-4nhAhœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œstrœ}",
                "selected": false,
                "source": "parser-V7B1O",
                "sourceHandle": "{œdataTypeœ:œparserœ,œidœ:œparser-V7B1Oœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}",
                "target": "ChatOutput-4nhAh",
                "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-4nhAhœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œstrœ}"
                },
                {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                    "dataType": "LanguageModelComponent",
                    "id": "LanguageModelComponent-W5SYl",
                    "name": "model_output",
                    "output_types": [
                        "LanguageModel"
                    ]
                    },
                    "targetHandle": {
                    "fieldName": "llm",
                    "id": "StructuredOutput-FBy4l",
                    "inputTypes": [
                        "LanguageModel"
                    ],
                    "type": "other"
                    }
                },
                "id": "reactflow__edge-LanguageModelComponent-W5SYl{œdataTypeœ:œLanguageModelComponentœ,œidœ:œLanguageModelComponent-W5SYlœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-StructuredOutput-FBy4l{œfieldNameœ:œllmœ,œidœ:œStructuredOutput-FBy4lœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
                "selected": false,
                "source": "LanguageModelComponent-W5SYl",
                "sourceHandle": "{œdataTypeœ:œLanguageModelComponentœ,œidœ:œLanguageModelComponent-W5SYlœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
                "target": "StructuredOutput-FBy4l",
                "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œStructuredOutput-FBy4lœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}"
                },
                {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                    "dataType": "ChatInput",
                    "id": "ChatInput-iq79U",
                    "name": "message",
                    "output_types": [
                        "Message"
                    ]
                    },
                    "targetHandle": {
                    "fieldName": "input_value",
                    "id": "StructuredOutput-FBy4l",
                    "inputTypes": [
                        "Message"
                    ],
                    "type": "str"
                    }
                },
                "id": "reactflow__edge-ChatInput-iq79U{œdataTypeœ:œChatInputœ,œidœ:œChatInput-iq79Uœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-StructuredOutput-FBy4l{œfieldNameœ:œinput_valueœ,œidœ:œStructuredOutput-FBy4lœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "selected": false,
                "source": "ChatInput-iq79U",
                "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-iq79Uœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
                "target": "StructuredOutput-FBy4l",
                "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œStructuredOutput-FBy4lœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
                },
                {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                    "dataType": "StructuredOutput",
                    "id": "StructuredOutput-FBy4l",
                    "name": "structured_output",
                    "output_types": [
                        "Data"
                    ]
                    },
                    "targetHandle": {
                    "fieldName": "input_data",
                    "id": "parser-V7B1O",
                    "inputTypes": [
                        "DataFrame",
                        "Data"
                    ],
                    "type": "other"
                    }
                },
                "id": "reactflow__edge-StructuredOutput-FBy4l{œdataTypeœ:œStructuredOutputœ,œidœ:œStructuredOutput-FBy4lœ,œnameœ:œstructured_outputœ,œoutput_typesœ:[œDataœ]}-parser-V7B1O{œfieldNameœ:œinput_dataœ,œidœ:œparser-V7B1Oœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}",
                "selected": false,
                "source": "StructuredOutput-FBy4l",
                "sourceHandle": "{œdataTypeœ:œStructuredOutputœ,œidœ:œStructuredOutput-FBy4lœ,œnameœ:œstructured_outputœ,œoutput_typesœ:[œDataœ]}",
                "target": "parser-V7B1O",
                "targetHandle": "{œfieldNameœ:œinput_dataœ,œidœ:œparser-V7B1Oœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}"
                }
            ],
            "viewport": {
                "x": -103.95107628415383,
                "y": 420.58986983648333,
                "zoom": 0.6382163478715096
            }
            },
            "is_component": false,
            "updated_at": "2025-08-12T18:38:53+00:00",
            "webhook": false,
            "endpoint_name": null,
            "tags": [
            "chatbots",
            "content-generation"
            ],
            "locked": false,
            "mcp_enabled": true,
            "action_name": null,
            "action_description": null,
            "access_type": "PRIVATE",
            "id": "9cb3789e-ebac-479c-9f0b-53a327c0429f",
            "user_id": "f36e9f45-b0b0-4228-8303-ddff937be006",
            "folder_id": "0dd46390-23ba-4770-a01f-e4e9c23b0d5f"
        },
        "notes": "",
        "tags": [
            "chatbots",
            "content-generation"
        ],
        "source": "example_flows/Financial_Report_Parser_9cb3789e-ebac-479c-9f0b-53a327c0429f.json"
    }

