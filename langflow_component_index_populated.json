{
  "metadata": {
    "version": "1.0",
    "description": "Langflow Component Index for PFU Generation",
    "generated_at": "2024-01-01T00:00:00Z",
    "total_components": 307
  },
  "component_categories": {
    "input_output": {
      "description": "Components in input_output category",
      "base_path": "src/backend/base/langflow/components/input_output",
      "components": {
        "chat": {
          "file_path": "src/backend/base/langflow/components/input_output/chat.py",
          "classes": [
            {
              "name": "ChatInput",
              "bases": [
                "ChatComponent"
              ],
              "docstring": null,
              "methods": [],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "minimized",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.data.utils.IMG_FILE_TYPES",
            "langflow.base.data.utils.TEXT_FILE_TYPES",
            "langflow.base.io.chat.ChatComponent",
            "langflow.inputs.inputs.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.FileInput",
            "langflow.io.MessageTextInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.schema.message.Message",
            "langflow.utils.constants.MESSAGE_SENDER_AI",
            "langflow.utils.constants.MESSAGE_SENDER_NAME_USER",
            "langflow.utils.constants.MESSAGE_SENDER_USER"
          ],
          "docstring": null
        },
        "text": {
          "file_path": "src/backend/base/langflow/components/input_output/text.py",
          "classes": [
            {
              "name": "TextInputComponent",
              "bases": [
                "TextComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "text_response",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.io.text.TextComponent",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        },
        "text_output": {
          "file_path": "src/backend/base/langflow/components/input_output/text_output.py",
          "classes": [
            {
              "name": "TextOutputComponent",
              "bases": [
                "TextComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "text_response",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.io.text.TextComponent",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        },
        "chat_output": {
          "file_path": "src/backend/base/langflow/components/input_output/chat_output.py",
          "classes": [
            {
              "name": "ChatOutput",
              "bases": [
                "ChatComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "_build_source",
                  "docstring": null
                },
                {
                  "name": "_serialize_data",
                  "docstring": "Serialize Data object to JSON string."
                },
                {
                  "name": "_validate_input",
                  "docstring": "Validate the input data and raise ValueError if invalid."
                },
                {
                  "name": "convert_to_string",
                  "docstring": "Convert input data to string with proper error handling."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "minimized",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "collections.abc.Generator",
            "typing.Any",
            "orjson",
            "fastapi.encoders.jsonable_encoder",
            "langflow.base.io.chat.ChatComponent",
            "langflow.helpers.data.safe_convert",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame",
            "langflow.schema.message.Message",
            "langflow.schema.properties.Source",
            "langflow.template.field.base.Output",
            "langflow.utils.constants.MESSAGE_SENDER_AI",
            "langflow.utils.constants.MESSAGE_SENDER_NAME_AI",
            "langflow.utils.constants.MESSAGE_SENDER_USER"
          ],
          "docstring": null
        }
      }
    },
    "models": {
      "description": "Components in models category",
      "base_path": "src/backend/base/langflow/components/models",
      "components": {
        "language_model": {
          "file_path": "src/backend/base/langflow/components/models/language_model.py",
          "classes": [
            {
              "name": "LanguageModelComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_model",
                  "docstring": null
                },
                {
                  "name": "update_build_config",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "category",
                "priority",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "langchain_anthropic.ChatAnthropic",
            "langchain_google_genai.ChatGoogleGenerativeAI",
            "langchain_openai.ChatOpenAI",
            "langflow.base.models.anthropic_constants.ANTHROPIC_MODELS",
            "langflow.base.models.google_generative_ai_constants.GOOGLE_GENERATIVE_AI_MODELS",
            "langflow.base.models.model.LCModelComponent",
            "langflow.base.models.openai_constants.OPENAI_CHAT_MODEL_NAMES",
            "langflow.base.models.openai_constants.OPENAI_REASONING_MODEL_NAMES",
            "langflow.field_typing.LanguageModel",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.inputs.inputs.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.MessageInput",
            "langflow.io.MultilineInput",
            "langflow.io.SecretStrInput",
            "langflow.io.SliderInput",
            "langflow.schema.dotdict.dotdict"
          ],
          "docstring": null
        },
        "embedding_model": {
          "file_path": "src/backend/base/langflow/components/models/embedding_model.py",
          "classes": [
            {
              "name": "EmbeddingModelComponent",
              "bases": [
                "LCEmbeddingsModel"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_embeddings",
                  "docstring": null
                },
                {
                  "name": "update_build_config",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "category",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "langchain_openai.OpenAIEmbeddings",
            "langflow.base.embeddings.model.LCEmbeddingsModel",
            "langflow.base.models.openai_constants.OPENAI_EMBEDDING_MODEL_NAMES",
            "langflow.field_typing.Embeddings",
            "langflow.io.BoolInput",
            "langflow.io.DictInput",
            "langflow.io.DropdownInput",
            "langflow.io.FloatInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.SecretStrInput",
            "langflow.schema.dotdict.dotdict"
          ],
          "docstring": null
        }
      }
    },
    "tools": {
      "description": "Components in tools category",
      "base_path": "src/backend/base/langflow/components/tools",
      "components": {
        "google_search_api": {
          "file_path": "src/backend/base/langflow/components/tools/google_search_api.py",
          "classes": [
            {
              "name": "GoogleSearchAPIComponent",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "build_tool",
                  "docstring": null
                },
                {
                  "name": "_build_wrapper",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "legacy",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain_core.tools.Tool",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.schema.data.Data",
            "langchain_google_community.GoogleSearchAPIWrapper"
          ],
          "docstring": null
        },
        "google_serper_api": {
          "file_path": "src/backend/base/langflow/components/tools/google_serper_api.py",
          "classes": [
            {
              "name": "QuerySchema",
              "bases": [
                "BaseModel"
              ],
              "docstring": null,
              "methods": [],
              "attributes": []
            },
            {
              "name": "GoogleSerperAPIComponent",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "build_tool",
                  "docstring": null
                },
                {
                  "name": "_build_wrapper",
                  "docstring": null
                },
                {
                  "name": "_search",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "legacy",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "langchain.tools.StructuredTool",
            "langchain_community.utilities.google_serper.GoogleSerperAPIWrapper",
            "pydantic.BaseModel",
            "pydantic.Field",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.DictInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "python_code_structured_tool": {
          "file_path": "src/backend/base/langflow/components/tools/python_code_structured_tool.py",
          "classes": [
            {
              "name": "PythonCodeStructuredTool",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "_parse_code",
                  "docstring": null
                },
                {
                  "name": "_find_imports",
                  "docstring": null
                },
                {
                  "name": "_get_value",
                  "docstring": null
                },
                {
                  "name": "_find_arg",
                  "docstring": null
                }
              ],
              "attributes": [
                "DEFAULT_KEYS",
                "display_name",
                "description",
                "documentation",
                "name",
                "icon",
                "field_order",
                "inputs",
                "outputs"
              ]
            },
            {
              "name": "PythonCodeToolFunc",
              "bases": [],
              "docstring": null,
              "methods": [
                {
                  "name": "run",
                  "docstring": null
                }
              ],
              "attributes": []
            }
          ],
          "imports": [
            "ast",
            "json",
            "typing.Any",
            "langchain.agents.Tool",
            "langchain_core.tools.StructuredTool",
            "loguru.logger",
            "pydantic.v1.Field",
            "pydantic.v1.create_model",
            "pydantic.v1.fields.Undefined",
            "typing_extensions.override",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.FieldTypes",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.schema.dotdict.dotdict"
          ],
          "docstring": null
        },
        "wikipedia_api": {
          "file_path": "src/backend/base/langflow/components/tools/wikipedia_api.py",
          "classes": [
            {
              "name": "WikipediaAPIComponent",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "build_tool",
                  "docstring": null
                },
                {
                  "name": "_build_wrapper",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "legacy",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.cast",
            "langchain_community.tools.WikipediaQueryRun",
            "langchain_community.utilities.wikipedia.WikipediaAPIWrapper",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "searxng": {
          "file_path": "src/backend/base/langflow/components/tools/searxng.py",
          "classes": [
            {
              "name": "SearXNGToolComponent",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "update_build_config",
                  "docstring": null
                },
                {
                  "name": "build_tool",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "inputs",
                "outputs"
              ]
            },
            {
              "name": "SearxSearch",
              "bases": [],
              "docstring": null,
              "methods": [
                {
                  "name": "search",
                  "docstring": null
                }
              ],
              "attributes": []
            }
          ],
          "imports": [
            "json",
            "collections.abc.Sequence",
            "typing.Any",
            "requests",
            "langchain.agents.Tool",
            "langchain_core.tools.StructuredTool",
            "loguru.logger",
            "pydantic.v1.Field",
            "pydantic.v1.create_model",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.MultiselectInput",
            "langflow.io.Output",
            "langflow.schema.dotdict.dotdict"
          ],
          "docstring": null
        },
        "calculator": {
          "file_path": "src/backend/base/langflow/components/tools/calculator.py",
          "classes": [
            {
              "name": "CalculatorToolComponent",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "build_tool",
                  "docstring": null
                },
                {
                  "name": "_eval_expr",
                  "docstring": null
                },
                {
                  "name": "_eval_expr_with_error",
                  "docstring": null
                },
                {
                  "name": "_evaluate_expression",
                  "docstring": null
                },
                {
                  "name": "__init__",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "legacy",
                "inputs"
              ]
            },
            {
              "name": "CalculatorToolSchema",
              "bases": [
                "BaseModel"
              ],
              "docstring": null,
              "methods": [],
              "attributes": []
            }
          ],
          "imports": [
            "ast",
            "operator",
            "langchain.tools.StructuredTool",
            "langchain_core.tools.ToolException",
            "loguru.logger",
            "pydantic.BaseModel",
            "pydantic.Field",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "wikidata_api": {
          "file_path": "src/backend/base/langflow/components/tools/wikidata_api.py",
          "classes": [
            {
              "name": "WikidataSearchSchema",
              "bases": [
                "BaseModel"
              ],
              "docstring": null,
              "methods": [],
              "attributes": []
            },
            {
              "name": "WikidataAPIWrapper",
              "bases": [
                "BaseModel"
              ],
              "docstring": "Wrapper around Wikidata API.",
              "methods": [
                {
                  "name": "results",
                  "docstring": null
                },
                {
                  "name": "run",
                  "docstring": null
                }
              ],
              "attributes": []
            },
            {
              "name": "WikidataAPIComponent",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_tool",
                  "docstring": null
                },
                {
                  "name": "run_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "legacy",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "httpx",
            "langchain_core.tools.StructuredTool",
            "langchain_core.tools.ToolException",
            "pydantic.BaseModel",
            "pydantic.Field",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "python_repl": {
          "file_path": "src/backend/base/langflow/components/tools/python_repl.py",
          "classes": [
            {
              "name": "PythonREPLToolComponent",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_globals",
                  "docstring": null
                },
                {
                  "name": "build_tool",
                  "docstring": null
                },
                {
                  "name": "run_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "legacy",
                "inputs"
              ]
            },
            {
              "name": "PythonREPLSchema",
              "bases": [
                "BaseModel"
              ],
              "docstring": null,
              "methods": [],
              "attributes": []
            }
          ],
          "imports": [
            "importlib",
            "langchain.tools.StructuredTool",
            "langchain_core.tools.ToolException",
            "langchain_experimental.utilities.PythonREPL",
            "loguru.logger",
            "pydantic.BaseModel",
            "pydantic.Field",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "yahoo_finance": {
          "file_path": "src/backend/base/langflow/components/tools/yahoo_finance.py",
          "classes": [
            {
              "name": "YahooFinanceMethod",
              "bases": [
                "Enum"
              ],
              "docstring": null,
              "methods": [],
              "attributes": [
                "GET_INFO",
                "GET_NEWS",
                "GET_ACTIONS",
                "GET_ANALYSIS",
                "GET_BALANCE_SHEET",
                "GET_CALENDAR",
                "GET_CASHFLOW",
                "GET_INSTITUTIONAL_HOLDERS",
                "GET_RECOMMENDATIONS",
                "GET_SUSTAINABILITY",
                "GET_MAJOR_HOLDERS",
                "GET_MUTUALFUND_HOLDERS",
                "GET_INSIDER_PURCHASES",
                "GET_INSIDER_TRANSACTIONS",
                "GET_INSIDER_ROSTER_HOLDERS",
                "GET_DIVIDENDS",
                "GET_CAPITAL_GAINS",
                "GET_SPLITS",
                "GET_SHARES",
                "GET_FAST_INFO",
                "GET_SEC_FILINGS",
                "GET_RECOMMENDATIONS_SUMMARY",
                "GET_UPGRADES_DOWNGRADES",
                "GET_EARNINGS",
                "GET_INCOME_STMT"
              ]
            },
            {
              "name": "YahooFinanceSchema",
              "bases": [
                "BaseModel"
              ],
              "docstring": null,
              "methods": [],
              "attributes": []
            },
            {
              "name": "YfinanceToolComponent",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "build_tool",
                  "docstring": null
                },
                {
                  "name": "_yahoo_finance_tool",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "legacy",
                "inputs"
              ]
            }
          ],
          "imports": [
            "ast",
            "pprint",
            "enum.Enum",
            "yfinance",
            "langchain.tools.StructuredTool",
            "langchain_core.tools.ToolException",
            "loguru.logger",
            "pydantic.BaseModel",
            "pydantic.Field",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "tavily_search_tool": {
          "file_path": "src/backend/base/langflow/components/tools/tavily_search_tool.py",
          "classes": [
            {
              "name": "TavilySearchDepth",
              "bases": [
                "Enum"
              ],
              "docstring": null,
              "methods": [],
              "attributes": [
                "BASIC",
                "ADVANCED"
              ]
            },
            {
              "name": "TavilySearchTopic",
              "bases": [
                "Enum"
              ],
              "docstring": null,
              "methods": [],
              "attributes": [
                "GENERAL",
                "NEWS"
              ]
            },
            {
              "name": "TavilySearchTimeRange",
              "bases": [
                "Enum"
              ],
              "docstring": null,
              "methods": [],
              "attributes": [
                "DAY",
                "WEEK",
                "MONTH",
                "YEAR"
              ]
            },
            {
              "name": "TavilySearchSchema",
              "bases": [
                "BaseModel"
              ],
              "docstring": null,
              "methods": [],
              "attributes": []
            },
            {
              "name": "TavilySearchToolComponent",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "build_tool",
                  "docstring": null
                },
                {
                  "name": "_tavily_search",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "documentation",
                "legacy",
                "inputs"
              ]
            }
          ],
          "imports": [
            "enum.Enum",
            "httpx",
            "langchain.tools.StructuredTool",
            "langchain_core.tools.ToolException",
            "loguru.logger",
            "pydantic.BaseModel",
            "pydantic.Field",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "search_api": {
          "file_path": "src/backend/base/langflow/components/tools/search_api.py",
          "classes": [
            {
              "name": "SearchAPIComponent",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "_build_wrapper",
                  "docstring": null
                },
                {
                  "name": "build_tool",
                  "docstring": null
                },
                {
                  "name": "run_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "name",
                "icon",
                "legacy",
                "inputs"
              ]
            },
            {
              "name": "SearchAPISchema",
              "bases": [
                "BaseModel"
              ],
              "docstring": null,
              "methods": [],
              "attributes": []
            }
          ],
          "imports": [
            "typing.Any",
            "langchain.tools.StructuredTool",
            "langchain_community.utilities.searchapi.SearchApiAPIWrapper",
            "pydantic.BaseModel",
            "pydantic.Field",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.DictInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "serp_api": {
          "file_path": "src/backend/base/langflow/components/tools/serp_api.py",
          "classes": [
            {
              "name": "SerpAPISchema",
              "bases": [
                "BaseModel"
              ],
              "docstring": "Schema for SerpAPI search parameters.",
              "methods": [],
              "attributes": []
            },
            {
              "name": "SerpAPIComponent",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "_build_wrapper",
                  "docstring": "Build a SerpAPIWrapper with the provided parameters."
                },
                {
                  "name": "build_tool",
                  "docstring": null
                },
                {
                  "name": "run_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "legacy",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "langchain.tools.StructuredTool",
            "langchain_community.utilities.serpapi.SerpAPIWrapper",
            "langchain_core.tools.ToolException",
            "loguru.logger",
            "pydantic.BaseModel",
            "pydantic.Field",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.DictInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        }
      }
    },
    "agents": {
      "description": "Components in agents category",
      "base_path": "src/backend/base/langflow/components/agents",
      "components": {
        "mcp_component": {
          "file_path": "src/backend/base/langflow/components/agents/mcp_component.py",
          "classes": [
            {
              "name": "MCPToolsComponent",
              "bases": [
                "ComponentWithCache"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "__init__",
                  "docstring": null
                },
                {
                  "name": "_ensure_cache_structure",
                  "docstring": "Ensure the cache has the required structure."
                },
                {
                  "name": "get_inputs_for_all_tools",
                  "docstring": "Get input schemas for all tools."
                },
                {
                  "name": "remove_input_schema_from_build_config",
                  "docstring": "Remove the input schema for the tool from the build config."
                },
                {
                  "name": "remove_non_default_keys",
                  "docstring": "Remove non-default keys from the build config."
                },
                {
                  "name": "_get_session_context",
                  "docstring": "Get the Langflow session ID for MCP session caching."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "__future__.annotations",
            "asyncio",
            "uuid",
            "typing.Any",
            "langchain_core.tools.StructuredTool",
            "langflow.api.v2.mcp.get_server",
            "langflow.base.agents.utils.maybe_unflatten_dict",
            "langflow.base.agents.utils.safe_cache_get",
            "langflow.base.agents.utils.safe_cache_set",
            "langflow.base.mcp.util.MCPSseClient",
            "langflow.base.mcp.util.MCPStdioClient",
            "langflow.base.mcp.util.create_input_schema_from_json_schema",
            "langflow.base.mcp.util.update_tools",
            "langflow.custom.custom_component.component_with_cache.ComponentWithCache",
            "langflow.inputs.inputs.InputTypes",
            "langflow.io.DropdownInput",
            "langflow.io.McpInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.schema.flatten_schema",
            "langflow.io.schema.schema_to_langflow_inputs",
            "langflow.logging.logger",
            "langflow.schema.dataframe.DataFrame",
            "langflow.schema.message.Message",
            "langflow.services.auth.utils.create_user_longterm_token",
            "langflow.services.database.models.user.crud.get_user_by_id",
            "langflow.services.deps.get_session",
            "langflow.services.deps.get_settings_service",
            "langflow.services.deps.get_storage_service"
          ],
          "docstring": null
        },
        "agent": {
          "file_path": "src/backend/base/langflow/components/agents/agent.py",
          "classes": [
            {
              "name": "AgentComponent",
              "bases": [
                "ToolCallingAgentComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_llm",
                  "docstring": null
                },
                {
                  "name": "_build_llm_model",
                  "docstring": null
                },
                {
                  "name": "set_component_params",
                  "docstring": null
                },
                {
                  "name": "delete_fields",
                  "docstring": "Delete specified fields from build_config."
                },
                {
                  "name": "update_input_types",
                  "docstring": "Update input types for all fields in build_config."
                }
              ],
              "attributes": [
                "icon",
                "beta",
                "name",
                "memory_inputs",
                "openai_inputs_filtered",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "json",
            "re",
            "langchain_core.tools.StructuredTool",
            "langflow.base.agents.agent.LCToolsAgentComponent",
            "langflow.base.agents.events.ExceptionWithMessageError",
            "langflow.base.models.model_input_constants.ALL_PROVIDER_FIELDS",
            "langflow.base.models.model_input_constants.MODEL_DYNAMIC_UPDATE_FIELDS",
            "langflow.base.models.model_input_constants.MODEL_PROVIDERS",
            "langflow.base.models.model_input_constants.MODEL_PROVIDERS_DICT",
            "langflow.base.models.model_input_constants.MODELS_METADATA",
            "langflow.base.models.model_utils.get_model_name",
            "langflow.components.helpers.current_date.CurrentDateComponent",
            "langflow.components.helpers.memory.MemoryComponent",
            "langflow.components.langchain_utilities.tool_calling.ToolCallingAgentComponent",
            "langflow.custom.custom_component.component._get_component_toolkit",
            "langflow.custom.utils.update_component_build_config",
            "langflow.field_typing.Tool",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.IntInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.logging.logger",
            "langflow.schema.data.Data",
            "langflow.schema.dotdict.dotdict",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        }
      }
    },
    "vectorstores": {
      "description": "Components in vectorstores category",
      "base_path": "src/backend/base/langflow/components/vectorstores",
      "components": {
        "cassandra": {
          "file_path": "src/backend/base/langflow/components/vectorstores/cassandra.py",
          "classes": [
            {
              "name": "CassandraVectorStoreComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_vector_store",
                  "docstring": null
                },
                {
                  "name": "_map_search_type",
                  "docstring": null
                },
                {
                  "name": "search_documents",
                  "docstring": null
                },
                {
                  "name": "_build_search_args",
                  "docstring": null
                },
                {
                  "name": "get_retriever_kwargs",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain_community.vectorstores.Cassandra",
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.helpers.data.docs_to_data",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DictInput",
            "langflow.inputs.inputs.FloatInput",
            "langflow.io.DropdownInput",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data",
            "uuid.UUID",
            "cassio",
            "langchain_community.utilities.cassandra.SetupMode"
          ],
          "docstring": null
        },
        "vectara_rag": {
          "file_path": "src/backend/base/langflow/components/vectorstores/vectara_rag.py",
          "classes": [
            {
              "name": "VectaraRagComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "generate_response",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "name",
                "SUMMARIZER_PROMPTS",
                "RERANKER_TYPES",
                "RESPONSE_LANGUAGES",
                "field_order",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.io.DropdownInput",
            "langflow.io.FloatInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.message.Message",
            "langchain_community.vectorstores.Vectara",
            "langchain_community.vectorstores.vectara.RerankConfig",
            "langchain_community.vectorstores.vectara.SummaryConfig",
            "langchain_community.vectorstores.vectara.VectaraQueryConfig"
          ],
          "docstring": null
        },
        "elasticsearch": {
          "file_path": "src/backend/base/langflow/components/vectorstores/elasticsearch.py",
          "classes": [
            {
              "name": "ElasticsearchVectorStoreComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": "Elasticsearch Vector Store with with advanced, customizable search capabilities.",
              "methods": [
                {
                  "name": "build_vector_store",
                  "docstring": "Builds the Elasticsearch Vector Store object."
                },
                {
                  "name": "_prepare_documents",
                  "docstring": "Prepares documents from the input data to add to the vector store."
                },
                {
                  "name": "_add_documents_to_vector_store",
                  "docstring": "Adds documents to the Vector Store."
                },
                {
                  "name": "search",
                  "docstring": "Search for similar documents in the vector store or retrieve all documents if no query is provided."
                },
                {
                  "name": "get_all_documents",
                  "docstring": "Retrieve all documents from the vector store."
                },
                {
                  "name": "search_documents",
                  "docstring": "Search for documents in the vector store based on the search input.\n\nIf no search input is provided, retrieve all documents."
                },
                {
                  "name": "get_retriever_kwargs",
                  "docstring": "Get the keyword arguments for the retriever."
                }
              ],
              "attributes": [
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "elasticsearch.Elasticsearch",
            "langchain.schema.Document",
            "langchain_elasticsearch.ElasticsearchStore",
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.FloatInput",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "cassandra_graph": {
          "file_path": "src/backend/base/langflow/components/vectorstores/cassandra_graph.py",
          "classes": [
            {
              "name": "CassandraGraphVectorStoreComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_vector_store",
                  "docstring": null
                },
                {
                  "name": "_map_search_type",
                  "docstring": null
                },
                {
                  "name": "search_documents",
                  "docstring": null
                },
                {
                  "name": "_build_search_args",
                  "docstring": null
                },
                {
                  "name": "get_retriever_kwargs",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "uuid.UUID",
            "langchain_community.graph_vectorstores.CassandraGraphVectorStore",
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.helpers.data.docs_to_data",
            "langflow.inputs.inputs.DictInput",
            "langflow.inputs.inputs.FloatInput",
            "langflow.io.DropdownInput",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data",
            "cassio",
            "langchain_community.utilities.cassandra.SetupMode"
          ],
          "docstring": null
        },
        "milvus": {
          "file_path": "src/backend/base/langflow/components/vectorstores/milvus.py",
          "classes": [
            {
              "name": "MilvusVectorStoreComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": "Milvus vector store with search capabilities.",
              "methods": [
                {
                  "name": "build_vector_store",
                  "docstring": null
                },
                {
                  "name": "search_documents",
                  "docstring": null
                }
              ],
              "attributes": [
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.helpers.data.docs_to_data",
            "langflow.io.BoolInput",
            "langflow.io.DictInput",
            "langflow.io.DropdownInput",
            "langflow.io.FloatInput",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data",
            "langchain_milvus.vectorstores.Milvus"
          ],
          "docstring": null
        },
        "clickhouse": {
          "file_path": "src/backend/base/langflow/components/vectorstores/clickhouse.py",
          "classes": [
            {
              "name": "ClickhouseVectorStoreComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_vector_store",
                  "docstring": null
                },
                {
                  "name": "search_documents",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain_community.vectorstores.Clickhouse",
            "langchain_community.vectorstores.ClickhouseSettings",
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.helpers.data.docs_to_data",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.FloatInput",
            "langflow.io.DictInput",
            "langflow.io.DropdownInput",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data",
            "clickhouse_connect"
          ],
          "docstring": null
        },
        "pinecone": {
          "file_path": "src/backend/base/langflow/components/vectorstores/pinecone.py",
          "classes": [
            {
              "name": "PineconeVectorStoreComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_vector_store",
                  "docstring": "Build and return a Pinecone vector store instance."
                },
                {
                  "name": "search_documents",
                  "docstring": "Search documents in the vector store."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs"
              ]
            },
            {
              "name": "Float32Embeddings",
              "bases": [],
              "docstring": "Wrapper class to ensure float32 embeddings.",
              "methods": [
                {
                  "name": "__init__",
                  "docstring": null
                },
                {
                  "name": "embed_documents",
                  "docstring": null
                },
                {
                  "name": "embed_query",
                  "docstring": null
                },
                {
                  "name": "_force_float32",
                  "docstring": "Convert any numeric type to Python float."
                }
              ],
              "attributes": []
            }
          ],
          "imports": [
            "numpy",
            "langchain_core.vectorstores.VectorStore",
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.helpers.data.docs_to_data",
            "langflow.io.DropdownInput",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data",
            "langchain_pinecone.PineconeVectorStore",
            "langchain_pinecone._utilities.DistanceStrategy"
          ],
          "docstring": null
        },
        "opensearch": {
          "file_path": "src/backend/base/langflow/components/vectorstores/opensearch.py",
          "classes": [
            {
              "name": "OpenSearchVectorStoreComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": "OpenSearch Vector Store with advanced, customizable search capabilities.",
              "methods": [
                {
                  "name": "build_vector_store",
                  "docstring": "Builds the OpenSearch Vector Store object."
                },
                {
                  "name": "_add_documents_to_vector_store",
                  "docstring": "Adds documents to the Vector Store."
                },
                {
                  "name": "search",
                  "docstring": "Search for similar documents in the vector store or retrieve all documents if no query is provided."
                },
                {
                  "name": "search_documents",
                  "docstring": "Search for documents in the vector store based on the search input.\n\nIf no search input is provided, retrieve all documents."
                }
              ],
              "attributes": [
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "json",
            "typing.Any",
            "langchain_community.vectorstores.OpenSearchVectorSearch",
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.base.vectorstores.vector_store_connection_decorator.vector_store_connection",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.FloatInput",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.MultilineInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data",
            "langchain_community.vectorstores.OpenSearchVectorSearch"
          ],
          "docstring": null
        },
        "supabase": {
          "file_path": "src/backend/base/langflow/components/vectorstores/supabase.py",
          "classes": [
            {
              "name": "SupabaseVectorStoreComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_vector_store",
                  "docstring": null
                },
                {
                  "name": "search_documents",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain_community.vectorstores.SupabaseVectorStore",
            "supabase.client.Client",
            "supabase.client.create_client",
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.helpers.data.docs_to_data",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "qdrant": {
          "file_path": "src/backend/base/langflow/components/vectorstores/qdrant.py",
          "classes": [
            {
              "name": "QdrantVectorStoreComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_vector_store",
                  "docstring": null
                },
                {
                  "name": "search_documents",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain.embeddings.base.Embeddings",
            "langchain_community.vectorstores.Qdrant",
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.helpers.data.docs_to_data",
            "langflow.io.DropdownInput",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data",
            "qdrant_client.QdrantClient"
          ],
          "docstring": null
        },
        "astradb": {
          "file_path": "src/backend/base/langflow/components/vectorstores/astradb.py",
          "classes": [
            {
              "name": "AstraDBVectorStoreComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "map_cloud_providers",
                  "docstring": null
                },
                {
                  "name": "get_vectorize_providers",
                  "docstring": null
                },
                {
                  "name": "get_database_list_static",
                  "docstring": null
                },
                {
                  "name": "get_database_list",
                  "docstring": null
                },
                {
                  "name": "get_api_endpoint_static",
                  "docstring": null
                },
                {
                  "name": "get_api_endpoint",
                  "docstring": null
                },
                {
                  "name": "get_database_id_static",
                  "docstring": null
                },
                {
                  "name": "get_database_id",
                  "docstring": null
                },
                {
                  "name": "get_keyspace",
                  "docstring": null
                },
                {
                  "name": "get_database_object",
                  "docstring": null
                },
                {
                  "name": "collection_data",
                  "docstring": null
                },
                {
                  "name": "_initialize_database_options",
                  "docstring": null
                },
                {
                  "name": "get_provider_icon",
                  "docstring": null
                },
                {
                  "name": "_initialize_collection_options",
                  "docstring": null
                },
                {
                  "name": "reset_provider_options",
                  "docstring": "Reset provider options and related configurations in the build_config dictionary."
                },
                {
                  "name": "reset_dimension_field",
                  "docstring": "Reset dimension field options based on provided configuration."
                },
                {
                  "name": "reset_collection_list",
                  "docstring": "Reset collection list options based on provided configuration."
                },
                {
                  "name": "reset_database_list",
                  "docstring": "Reset database list options and related configurations."
                },
                {
                  "name": "reset_build_config",
                  "docstring": "Reset all build configuration options to default empty state."
                },
                {
                  "name": "_handle_hybrid_search_options",
                  "docstring": "Set hybrid search options in the build configuration."
                },
                {
                  "name": "_update_cloud_regions",
                  "docstring": "Update cloud provider regions in build config."
                },
                {
                  "name": "_handle_database_selection",
                  "docstring": "Handle database selection and update related configurations."
                },
                {
                  "name": "_handle_collection_selection",
                  "docstring": "Handle collection selection and update embedding options."
                },
                {
                  "name": "build_vector_store",
                  "docstring": null
                },
                {
                  "name": "_add_documents_to_vector_store",
                  "docstring": null
                },
                {
                  "name": "_map_search_type",
                  "docstring": null
                },
                {
                  "name": "_build_search_args",
                  "docstring": null
                },
                {
                  "name": "search_documents",
                  "docstring": null
                },
                {
                  "name": "get_retriever_kwargs",
                  "docstring": null
                }
              ],
              "attributes": [
                "name",
                "inputs"
              ]
            },
            {
              "name": "NewDatabaseInput",
              "bases": [],
              "docstring": null,
              "methods": [],
              "attributes": []
            },
            {
              "name": "NewCollectionInput",
              "bases": [],
              "docstring": null,
              "methods": [],
              "attributes": []
            }
          ],
          "imports": [
            "re",
            "collections.defaultdict",
            "dataclasses.asdict",
            "dataclasses.dataclass",
            "dataclasses.field",
            "astrapy.DataAPIClient",
            "astrapy.Database",
            "astrapy.data.info.reranking.RerankServiceOptions",
            "astrapy.info.CollectionDescriptor",
            "astrapy.info.CollectionLexicalOptions",
            "astrapy.info.CollectionRerankOptions",
            "langchain_astradb.AstraDBVectorStore",
            "langchain_astradb.VectorServiceOptions",
            "langchain_astradb.utils.astradb.HybridSearchMode",
            "langchain_astradb.utils.astradb._AstraDBCollectionEnvironment",
            "langchain_core.documents.Document",
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.base.vectorstores.vector_store_connection_decorator.vector_store_connection",
            "langflow.helpers.data.docs_to_data",
            "langflow.inputs.inputs.FloatInput",
            "langflow.inputs.inputs.NestedDictInput",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.QueryInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data",
            "langflow.serialization.serialize",
            "langflow.utils.version.get_version_info",
            "langchain_astradb.AstraDBVectorStore"
          ],
          "docstring": null
        },
        "mongodb_atlas": {
          "file_path": "src/backend/base/langflow/components/vectorstores/mongodb_atlas.py",
          "classes": [
            {
              "name": "MongoVectorStoreComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_vector_store",
                  "docstring": null
                },
                {
                  "name": "search_documents",
                  "docstring": null
                },
                {
                  "name": "__insert_mode",
                  "docstring": null
                },
                {
                  "name": "verify_search_index",
                  "docstring": "Verify if the search index exists, if not, create it.\n\nArgs:\n    collection (Collection): The collection to verify the search index on."
                },
                {
                  "name": "__create_index_definition",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "INSERT_MODES",
                "SIMILARITY_OPTIONS",
                "QUANTIZATION_OPTIONS",
                "inputs"
              ]
            }
          ],
          "imports": [
            "tempfile",
            "time",
            "certifi",
            "langchain_community.vectorstores.MongoDBAtlasVectorSearch",
            "pymongo.collection.Collection",
            "pymongo.operations.SearchIndexModel",
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.helpers.data.docs_to_data",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data",
            "bson.objectid.ObjectId",
            "pymongo.MongoClient"
          ],
          "docstring": null
        },
        "faiss": {
          "file_path": "src/backend/base/langflow/components/vectorstores/faiss.py",
          "classes": [
            {
              "name": "FaissVectorStoreComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": "FAISS Vector Store with search capabilities.",
              "methods": [
                {
                  "name": "resolve_path",
                  "docstring": "Resolve the path relative to the Langflow root.\n\nArgs:\n    path: The path to resolve\nReturns:\n    str: The resolved path as a string"
                },
                {
                  "name": "get_persist_directory",
                  "docstring": "Returns the resolved persist directory path or the current directory if not set."
                },
                {
                  "name": "build_vector_store",
                  "docstring": "Builds the FAISS object."
                },
                {
                  "name": "search_documents",
                  "docstring": "Search for documents in the FAISS vector store."
                }
              ],
              "attributes": [
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "pathlib.Path",
            "langchain_community.vectorstores.FAISS",
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.helpers.data.docs_to_data",
            "langflow.io.BoolInput",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "local_db": {
          "file_path": "src/backend/base/langflow/components/vectorstores/local_db.py",
          "classes": [
            {
              "name": "LocalDBComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": "Chroma Vector Store with search capabilities.",
              "methods": [
                {
                  "name": "get_vector_store_directory",
                  "docstring": "Get the full directory path for a collection."
                },
                {
                  "name": "get_default_persist_dir",
                  "docstring": "Get the default persist directory from cache."
                },
                {
                  "name": "list_existing_collections",
                  "docstring": "List existing vector store collections from the persist directory."
                },
                {
                  "name": "update_build_config",
                  "docstring": "Update the build configuration when the mode changes."
                },
                {
                  "name": "build_vector_store",
                  "docstring": "Builds the Chroma object."
                },
                {
                  "name": "_add_documents_to_vector_store",
                  "docstring": "Adds documents to the Vector Store."
                },
                {
                  "name": "perform_search",
                  "docstring": null
                }
              ],
              "attributes": [
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "copy.deepcopy",
            "pathlib.Path",
            "langchain_chroma.Chroma",
            "loguru.logger",
            "typing_extensions.override",
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.base.vectorstores.utils.chroma_collection_to_data",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.TabInput",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame",
            "langflow.template.field.base.Output",
            "langflow.services.cache.utils.CACHE_DIR",
            "langflow.services.cache.utils.CACHE_DIR",
            "langchain_chroma.Chroma"
          ],
          "docstring": null
        },
        "pgvector": {
          "file_path": "src/backend/base/langflow/components/vectorstores/pgvector.py",
          "classes": [
            {
              "name": "PGVectorStoreComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_vector_store",
                  "docstring": null
                },
                {
                  "name": "search_documents",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain_community.vectorstores.PGVector",
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.helpers.data.docs_to_data",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data",
            "langflow.utils.connection_string_parser.transform_connection_string"
          ],
          "docstring": null
        },
        "redis": {
          "file_path": "src/backend/base/langflow/components/vectorstores/redis.py",
          "classes": [
            {
              "name": "RedisVectorStoreComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": "A custom component for implementing a Vector Store using Redis.",
              "methods": [
                {
                  "name": "build_vector_store",
                  "docstring": null
                },
                {
                  "name": "search_documents",
                  "docstring": null
                }
              ],
              "attributes": [
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "pathlib.Path",
            "langchain.text_splitter.CharacterTextSplitter",
            "langchain_community.vectorstores.redis.Redis",
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.helpers.data.docs_to_data",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "vectara": {
          "file_path": "src/backend/base/langflow/components/vectorstores/vectara.py",
          "classes": [
            {
              "name": "VectaraVectorStoreComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": "Vectara Vector Store with search capabilities.",
              "methods": [
                {
                  "name": "build_vector_store",
                  "docstring": "Builds the Vectara object."
                },
                {
                  "name": "_add_documents_to_vector_store",
                  "docstring": "Adds documents to the Vector Store."
                },
                {
                  "name": "search_documents",
                  "docstring": null
                }
              ],
              "attributes": [
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.TYPE_CHECKING",
            "langchain_community.vectorstores.Vectara",
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.helpers.data.docs_to_data",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame",
            "langchain_community.vectorstores.Vectara"
          ],
          "docstring": null
        },
        "graph_rag": {
          "file_path": "src/backend/base/langflow/components/vectorstores/graph_rag.py",
          "classes": [
            {
              "name": "GraphRAGComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": "GraphRAGComponent is a component for performing Graph RAG traversal in a vector store.\n\nAttributes:\n    display_name (str): The display name of the component.\n    description (str): A brief description of the component.\n    name (str): The name of the component.\n    icon (str): The icon representing the component.\n    inputs (list): A list of input configurations for the component.\n\nMethods:\n    _build_search_args():\n        Builds the arguments required for the search operation.\n    search_documents() -> list[Data]:\n        Searches for documents using the specified strategy, edge definition, and query.\n    _edge_definition_from_input() -> tuple:\n        Processes the edge definition input and returns it as a tuple.",
              "methods": [
                {
                  "name": "search_documents",
                  "docstring": "Searches for documents using the graph retriever based on the selected strategy, edge definition, and query.\n\nReturns:\n    list[Data]: A list of retrieved documents.\n\nRaises:\n    AttributeError: If there is an issue with attribute access.\n    TypeError: If there is a type mismatch.\n    ValueError: If there is a value error."
                },
                {
                  "name": "_edge_definition_from_input",
                  "docstring": "Generates the edge definition from the input data.\n\nReturns:\n    tuple: A tuple representing the edge definition."
                },
                {
                  "name": "_evaluate_edge_definition_input",
                  "docstring": null
                }
              ],
              "attributes": [
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "inspect",
            "abc.ABC",
            "graph_retriever.strategies",
            "langchain_graph_retriever.GraphRetriever",
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.helpers.data.docs_to_data",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.inputs.inputs.NestedDictInput",
            "langflow.inputs.inputs.StrInput",
            "langflow.schema.data.Data",
            "graph_retriever.edges.metadata.Id"
          ],
          "docstring": null
        },
        "weaviate": {
          "file_path": "src/backend/base/langflow/components/vectorstores/weaviate.py",
          "classes": [
            {
              "name": "WeaviateVectorStoreComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_vector_store",
                  "docstring": null
                },
                {
                  "name": "search_documents",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "weaviate",
            "langchain_community.vectorstores.Weaviate",
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.helpers.data.docs_to_data",
            "langflow.io.BoolInput",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "astradb_graph": {
          "file_path": "src/backend/base/langflow/components/vectorstores/astradb_graph.py",
          "classes": [
            {
              "name": "AstraDBGraphVectorStoreComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_vector_store",
                  "docstring": null
                },
                {
                  "name": "_add_documents_to_vector_store",
                  "docstring": null
                },
                {
                  "name": "_map_search_type",
                  "docstring": null
                },
                {
                  "name": "_build_search_args",
                  "docstring": null
                },
                {
                  "name": "search_documents",
                  "docstring": null
                },
                {
                  "name": "get_retriever_kwargs",
                  "docstring": null
                }
              ],
              "attributes": [
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "os",
            "orjson",
            "astrapy.admin.parse_api_endpoint",
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.helpers.data.docs_to_data",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DictInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.FloatInput",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.StrInput",
            "langflow.schema.data.Data",
            "langchain_astradb.AstraDBGraphVectorStore",
            "langchain_astradb.utils.astradb.SetupMode"
          ],
          "docstring": null
        },
        "hcd": {
          "file_path": "src/backend/base/langflow/components/vectorstores/hcd.py",
          "classes": [
            {
              "name": "HCDVectorStoreComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_vector_store",
                  "docstring": null
                },
                {
                  "name": "_add_documents_to_vector_store",
                  "docstring": null
                },
                {
                  "name": "_map_search_type",
                  "docstring": null
                },
                {
                  "name": "_build_search_args",
                  "docstring": null
                },
                {
                  "name": "search_documents",
                  "docstring": null
                },
                {
                  "name": "get_retriever_kwargs",
                  "docstring": null
                }
              ],
              "attributes": [
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.helpers.data.docs_to_data",
            "langflow.inputs.inputs.DictInput",
            "langflow.inputs.inputs.FloatInput",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.MultilineInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data",
            "langchain_astradb.AstraDBVectorStore",
            "langchain_astradb.utils.astradb.SetupMode",
            "astrapy.authentication.UsernamePasswordTokenProvider",
            "astrapy.constants.Environment",
            "astrapy.info.VectorServiceOptions"
          ],
          "docstring": null
        },
        "chroma": {
          "file_path": "src/backend/base/langflow/components/vectorstores/chroma.py",
          "classes": [
            {
              "name": "ChromaVectorStoreComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": "Chroma Vector Store with search capabilities.",
              "methods": [
                {
                  "name": "build_vector_store",
                  "docstring": "Builds the Chroma object."
                },
                {
                  "name": "_add_documents_to_vector_store",
                  "docstring": "Adds documents to the Vector Store."
                }
              ],
              "attributes": [
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "copy.deepcopy",
            "typing.TYPE_CHECKING",
            "chromadb.config.Settings",
            "langchain_chroma.Chroma",
            "typing_extensions.override",
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.base.vectorstores.utils.chroma_collection_to_data",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.StrInput",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame",
            "chromadb.Client",
            "langchain_chroma.Chroma",
            "langchain_community.vectorstores.utils.filter_complex_metadata"
          ],
          "docstring": null
        },
        "upstash": {
          "file_path": "src/backend/base/langflow/components/vectorstores/upstash.py",
          "classes": [
            {
              "name": "UpstashVectorStoreComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_vector_store",
                  "docstring": null
                },
                {
                  "name": "search_documents",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain_community.vectorstores.UpstashVectorStore",
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.helpers.data.docs_to_data",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.MultilineInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "couchbase": {
          "file_path": "src/backend/base/langflow/components/vectorstores/couchbase.py",
          "classes": [
            {
              "name": "CouchbaseVectorStoreComponent",
              "bases": [
                "LCVectorStoreComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_vector_store",
                  "docstring": null
                },
                {
                  "name": "search_documents",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "datetime.timedelta",
            "langchain_community.vectorstores.CouchbaseVectorStore",
            "langflow.base.vectorstores.model.LCVectorStoreComponent",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.helpers.data.docs_to_data",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data",
            "couchbase.auth.PasswordAuthenticator",
            "couchbase.cluster.Cluster",
            "couchbase.options.ClusterOptions"
          ],
          "docstring": null
        }
      }
    },
    "embeddings": {
      "description": "Components in embeddings category",
      "base_path": "src/backend/base/langflow/components/embeddings",
      "components": {
        "similarity": {
          "file_path": "src/backend/base/langflow/components/embeddings/similarity.py",
          "classes": [
            {
              "name": "EmbeddingSimilarityComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "compute_similarity",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "numpy",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.DataInput",
            "langflow.io.DropdownInput",
            "langflow.io.Output",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "text_embedder": {
          "file_path": "src/backend/base/langflow/components/embeddings/text_embedder.py",
          "classes": [
            {
              "name": "TextEmbedderComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "generate_embeddings",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "logging",
            "typing.TYPE_CHECKING",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.HandleInput",
            "langflow.io.MessageInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.field_typing.Embeddings",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        }
      }
    },
    "logic": {
      "description": "Components in logic category",
      "base_path": "src/backend/base/langflow/components/logic",
      "components": {
        "flow_tool": {
          "file_path": "src/backend/base/langflow/components/logic/flow_tool.py",
          "classes": [
            {
              "name": "FlowToolComponent",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [],
              "attributes": [
                "display_name",
                "description",
                "field_order",
                "trace_type",
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "loguru.logger",
            "typing_extensions.override",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.base.tools.flow_tool.FlowTool",
            "langflow.field_typing.Tool",
            "langflow.graph.graph.base.Graph",
            "langflow.helpers.flow.get_flow_inputs",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.Output",
            "langflow.io.StrInput",
            "langflow.schema.data.Data",
            "langflow.schema.dotdict.dotdict"
          ],
          "docstring": null
        },
        "sub_flow": {
          "file_path": "src/backend/base/langflow/components/logic/sub_flow.py",
          "classes": [
            {
              "name": "SubFlowComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "add_inputs_to_build_config",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "loguru.logger",
            "langflow.base.flow_processing.utils.build_data_from_result_data",
            "langflow.custom.custom_component.component.Component",
            "langflow.graph.graph.base.Graph",
            "langflow.graph.vertex.base.Vertex",
            "langflow.helpers.flow.get_flow_inputs",
            "langflow.io.DropdownInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.schema.dotdict.dotdict"
          ],
          "docstring": null
        },
        "data_conditional_router": {
          "file_path": "src/backend/base/langflow/components/logic/data_conditional_router.py",
          "classes": [
            {
              "name": "DataConditionalRouterComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "compare_values",
                  "docstring": null
                },
                {
                  "name": "parse_boolean",
                  "docstring": null
                },
                {
                  "name": "validate_input",
                  "docstring": null
                },
                {
                  "name": "process_data",
                  "docstring": null
                },
                {
                  "name": "process_single_data",
                  "docstring": null
                },
                {
                  "name": "update_build_config",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.DataInput",
            "langflow.io.DropdownInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.schema.dotdict.dotdict"
          ],
          "docstring": null
        },
        "notify": {
          "file_path": "src/backend/base/langflow/components/logic/notify.py",
          "classes": [
            {
              "name": "NotifyComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.cast",
            "langflow.custom.Component",
            "langflow.io.BoolInput",
            "langflow.io.HandleInput",
            "langflow.io.Output",
            "langflow.io.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "conditional_router": {
          "file_path": "src/backend/base/langflow/components/logic/conditional_router.py",
          "classes": [
            {
              "name": "ConditionalRouterComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "__init__",
                  "docstring": null
                },
                {
                  "name": "_pre_run_setup",
                  "docstring": null
                },
                {
                  "name": "evaluate_condition",
                  "docstring": null
                },
                {
                  "name": "iterate_and_stop_once",
                  "docstring": null
                },
                {
                  "name": "true_response",
                  "docstring": null
                },
                {
                  "name": "false_response",
                  "docstring": null
                },
                {
                  "name": "update_build_config",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "re",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.IntInput",
            "langflow.io.MessageInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        },
        "run_flow": {
          "file_path": "src/backend/base/langflow/components/logic/run_flow.py",
          "classes": [
            {
              "name": "RunFlowComponent",
              "bases": [
                "RunFlowBaseComponent"
              ],
              "docstring": null,
              "methods": [],
              "attributes": [
                "display_name",
                "description",
                "beta",
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "loguru.logger",
            "langflow.base.tools.run_flow.RunFlowBaseComponent",
            "langflow.helpers.flow.run_flow",
            "langflow.schema.dotdict.dotdict"
          ],
          "docstring": null
        },
        "loop": {
          "file_path": "src/backend/base/langflow/components/logic/loop.py",
          "classes": [
            {
              "name": "LoopComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "initialize_data",
                  "docstring": "Initialize the data list, context index, and aggregated list."
                },
                {
                  "name": "_validate_data",
                  "docstring": "Validate and return a list of Data objects."
                },
                {
                  "name": "evaluate_stop_loop",
                  "docstring": "Evaluate whether to stop item or done output."
                },
                {
                  "name": "item_output",
                  "docstring": "Output the next item in the list or stop if done."
                },
                {
                  "name": "update_dependency",
                  "docstring": null
                },
                {
                  "name": "done_output",
                  "docstring": "Trigger the done output when iteration is complete."
                },
                {
                  "name": "loop_variables",
                  "docstring": "Retrieve loop variables from context."
                },
                {
                  "name": "aggregated_output",
                  "docstring": "Return the aggregated list once all items are processed."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.HandleInput",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "listen": {
          "file_path": "src/backend/base/langflow/components/logic/listen.py",
          "classes": [
            {
              "name": "ListenComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "listen_for_data",
                  "docstring": "Retrieves a Data object from the component context using the provided context key.\n\nIf the specified context key does not exist in the context, returns an empty Data object."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.Component",
            "langflow.io.Output",
            "langflow.io.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "pass_message": {
          "file_path": "src/backend/base/langflow/components/logic/pass_message.py",
          "classes": [
            {
              "name": "PassMessageComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "pass_message",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.io.MessageInput",
            "langflow.schema.message.Message",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        }
      }
    },
    "data": {
      "description": "Components in data category",
      "base_path": "src/backend/base/langflow/components/data",
      "components": {
        "rss": {
          "file_path": "src/backend/base/langflow/components/data/rss.py",
          "classes": [
            {
              "name": "RSSReaderComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "read_rss",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "pandas",
            "requests",
            "bs4.BeautifulSoup",
            "langflow.custom.Component",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.logging.logger",
            "langflow.schema.DataFrame"
          ],
          "docstring": null
        },
        "sql_executor": {
          "file_path": "src/backend/base/langflow/components/data/sql_executor.py",
          "classes": [
            {
              "name": "SQLComponent",
              "bases": [
                "ComponentWithCache"
              ],
              "docstring": "A sql component.",
              "methods": [
                {
                  "name": "__init__",
                  "docstring": null
                },
                {
                  "name": "maybe_create_db",
                  "docstring": null
                },
                {
                  "name": "build_component",
                  "docstring": null
                },
                {
                  "name": "__execute_query",
                  "docstring": null
                },
                {
                  "name": "run_sql_query",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "metadata",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.TYPE_CHECKING",
            "typing.Any",
            "langchain_community.utilities.SQLDatabase",
            "sqlalchemy.exc.SQLAlchemyError",
            "langflow.custom.custom_component.component_with_cache.ComponentWithCache",
            "langflow.io.BoolInput",
            "langflow.io.MessageTextInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.schema.dataframe.DataFrame",
            "langflow.schema.message.Message",
            "langflow.services.cache.utils.CacheMiss",
            "sqlalchemy.engine.Result"
          ],
          "docstring": null
        },
        "news_search": {
          "file_path": "src/backend/base/langflow/components/data/news_search.py",
          "classes": [
            {
              "name": "NewsSearchComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "search_news",
                  "docstring": null
                },
                {
                  "name": "clean_html",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "urllib.parse.quote_plus",
            "pandas",
            "requests",
            "bs4.BeautifulSoup",
            "langflow.custom.Component",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.DataFrame"
          ],
          "docstring": null
        },
        "json_to_data": {
          "file_path": "src/backend/base/langflow/components/data/json_to_data.py",
          "classes": [
            {
              "name": "JSONToDataComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "convert_json_to_data",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "json",
            "pathlib.Path",
            "json_repair.repair_json",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.FileInput",
            "langflow.io.MessageTextInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "webhook": {
          "file_path": "src/backend/base/langflow/components/data/webhook.py",
          "classes": [
            {
              "name": "WebhookComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_data",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "json",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "api_request": {
          "file_path": "src/backend/base/langflow/components/data/api_request.py",
          "classes": [
            {
              "name": "APIRequestComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "_parse_json_value",
                  "docstring": "Parse a value that might be a JSON string."
                },
                {
                  "name": "_process_body",
                  "docstring": "Process the body input into a valid dictionary."
                },
                {
                  "name": "_process_dict_body",
                  "docstring": "Process dictionary body by parsing JSON values."
                },
                {
                  "name": "_process_string_body",
                  "docstring": "Process string body by attempting JSON parse."
                },
                {
                  "name": "_process_list_body",
                  "docstring": "Process list body by converting to key-value dictionary."
                },
                {
                  "name": "_is_valid_key_value_item",
                  "docstring": "Check if an item is a valid key-value dictionary."
                },
                {
                  "name": "parse_curl",
                  "docstring": "Parse a cURL command and update build configuration."
                },
                {
                  "name": "_normalize_url",
                  "docstring": "Normalize URL by adding https:// if no protocol is specified."
                },
                {
                  "name": "add_query_params",
                  "docstring": "Add query parameters to URL efficiently."
                },
                {
                  "name": "_headers_to_dict",
                  "docstring": "Convert HTTP headers to a dictionary with lowercased keys."
                },
                {
                  "name": "_process_headers",
                  "docstring": "Process the headers input into a valid dictionary."
                },
                {
                  "name": "update_build_config",
                  "docstring": "Update the build config based on the selected mode."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "json",
            "re",
            "tempfile",
            "datetime.datetime",
            "datetime.timezone",
            "pathlib.Path",
            "typing.Any",
            "urllib.parse.parse_qsl",
            "urllib.parse.urlencode",
            "urllib.parse.urlparse",
            "urllib.parse.urlunparse",
            "aiofiles",
            "aiofiles.os",
            "httpx",
            "validators",
            "langflow.base.curl.parse.parse_context",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.TabInput",
            "langflow.io.BoolInput",
            "langflow.io.DataInput",
            "langflow.io.DropdownInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.io.TableInput",
            "langflow.schema.data.Data",
            "langflow.schema.dotdict.dotdict",
            "langflow.services.deps.get_settings_service",
            "langflow.utils.component_utils.set_current_fields",
            "langflow.utils.component_utils.set_field_advanced",
            "langflow.utils.component_utils.set_field_display"
          ],
          "docstring": null
        },
        "url": {
          "file_path": "src/backend/base/langflow/components/data/url.py",
          "classes": [
            {
              "name": "URLComponent",
              "bases": [
                "Component"
              ],
              "docstring": "A component that loads and parses content from web pages recursively.\n\nThis component allows fetching content from one or more URLs, with options to:\n- Control crawl depth\n- Prevent crawling outside the root domain\n- Use async loading for better performance\n- Extract either raw HTML or clean text\n- Configure request headers and timeouts",
              "methods": [
                {
                  "name": "validate_url",
                  "docstring": "Validates if the given string matches URL pattern.\n\nArgs:\n    url: The URL string to validate\n\nReturns:\n    bool: True if the URL is valid, False otherwise"
                },
                {
                  "name": "ensure_url",
                  "docstring": "Ensures the given string is a valid URL.\n\nArgs:\n    url: The URL string to validate and normalize\n\nReturns:\n    str: The normalized URL\n\nRaises:\n    ValueError: If the URL is invalid"
                },
                {
                  "name": "_create_loader",
                  "docstring": "Creates a RecursiveUrlLoader instance with the configured settings.\n\nArgs:\n    url: The URL to load\n\nReturns:\n    RecursiveUrlLoader: Configured loader instance"
                },
                {
                  "name": "fetch_url_contents",
                  "docstring": "Load documents from the configured URLs.\n\nReturns:\n    List[Data]: List of Data objects containing the fetched content\n\nRaises:\n    ValueError: If no valid URLs are provided or if there's an error loading documents"
                },
                {
                  "name": "fetch_content",
                  "docstring": "Convert the documents to a DataFrame."
                },
                {
                  "name": "fetch_content_as_message",
                  "docstring": "Convert the documents to a Message."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "re",
            "requests",
            "bs4.BeautifulSoup",
            "langchain_community.document_loaders.RecursiveUrlLoader",
            "loguru.logger",
            "langflow.custom.custom_component.component.Component",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.helpers.data.safe_convert",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SliderInput",
            "langflow.io.TableInput",
            "langflow.schema.dataframe.DataFrame",
            "langflow.schema.message.Message",
            "langflow.services.deps.get_settings_service"
          ],
          "docstring": null
        },
        "file": {
          "file_path": "src/backend/base/langflow/components/data/file.py",
          "classes": [
            {
              "name": "FileComponent",
              "bases": [
                "BaseFileComponent"
              ],
              "docstring": "Handles loading and processing of individual or zipped text files.\n\nThis component supports processing multiple valid files within a zip archive,\nresolving paths, validating file types, and optionally using multithreading for processing.",
              "methods": [
                {
                  "name": "update_outputs",
                  "docstring": "Dynamically show only the relevant output based on the number of files processed."
                },
                {
                  "name": "process_files",
                  "docstring": "Processes files either sequentially or in parallel, depending on concurrency settings.\n\nArgs:\n    file_list (list[BaseFileComponent.BaseFile]): List of files to process.\n\nReturns:\n    list[BaseFileComponent.BaseFile]: Updated list of files with merged data."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "VALID_EXTENSIONS",
                "_base_inputs",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "copy.deepcopy",
            "typing.Any",
            "langflow.base.data.base_file.BaseFileComponent",
            "langflow.base.data.utils.TEXT_FILE_TYPES",
            "langflow.base.data.utils.parallel_load_data",
            "langflow.base.data.utils.parse_text_file_to_data",
            "langflow.io.BoolInput",
            "langflow.io.FileInput",
            "langflow.io.IntInput",
            "langflow.io.Output",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "directory": {
          "file_path": "src/backend/base/langflow/components/data/directory.py",
          "classes": [
            {
              "name": "DirectoryComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "load_directory",
                  "docstring": null
                },
                {
                  "name": "as_dataframe",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.data.utils.TEXT_FILE_TYPES",
            "langflow.base.data.utils.parallel_load_data",
            "langflow.base.data.utils.parse_text_file_to_data",
            "langflow.base.data.utils.retrieve_file_paths",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.BoolInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.MultiselectInput",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "web_search": {
          "file_path": "src/backend/base/langflow/components/data/web_search.py",
          "classes": [
            {
              "name": "WebSearchComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "validate_url",
                  "docstring": null
                },
                {
                  "name": "ensure_url",
                  "docstring": null
                },
                {
                  "name": "_sanitize_query",
                  "docstring": "Sanitize search query."
                },
                {
                  "name": "perform_search",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "re",
            "urllib.parse.parse_qs",
            "urllib.parse.unquote",
            "urllib.parse.urlparse",
            "pandas",
            "requests",
            "bs4.BeautifulSoup",
            "langflow.custom.Component",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.DataFrame",
            "langflow.services.deps.get_settings_service"
          ],
          "docstring": null
        },
        "csv_to_data": {
          "file_path": "src/backend/base/langflow/components/data/csv_to_data.py",
          "classes": [
            {
              "name": "CSVToDataComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "load_csv_to_data",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "csv",
            "io",
            "pathlib.Path",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.FileInput",
            "langflow.io.MessageTextInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        }
      }
    },
    "processing": {
      "description": "Components in processing category",
      "base_path": "src/backend/base/langflow/components/processing",
      "components": {
        "structured_output": {
          "file_path": "src/backend/base/langflow/components/processing/structured_output.py",
          "classes": [
            {
              "name": "StructuredOutputComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_structured_output_base",
                  "docstring": null
                },
                {
                  "name": "build_structured_output",
                  "docstring": null
                },
                {
                  "name": "build_structured_dataframe",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "pydantic.BaseModel",
            "pydantic.Field",
            "pydantic.create_model",
            "trustcall.create_extractor",
            "langflow.base.models.chat_result.get_chat_result",
            "langflow.custom.custom_component.component.Component",
            "langflow.helpers.base_model.build_model_from_schema",
            "langflow.io.HandleInput",
            "langflow.io.MessageTextInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.io.TableInput",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame",
            "langflow.schema.table.EditMode"
          ],
          "docstring": null
        },
        "lambda_filter": {
          "file_path": "src/backend/base/langflow/components/processing/lambda_filter.py",
          "classes": [
            {
              "name": "LambdaFilterComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_data_structure",
                  "docstring": "Extract the structure of a dictionary, replacing values with their types."
                },
                {
                  "name": "_validate_lambda",
                  "docstring": "Validate the provided lambda function text."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "__future__.annotations",
            "json",
            "re",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.DataInput",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.utils.data_structure.get_data_structure",
            "collections.abc.Callable"
          ],
          "docstring": null
        },
        "update_data": {
          "file_path": "src/backend/base/langflow/components/processing/update_data.py",
          "classes": [
            {
              "name": "UpdateDataComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "update_build_config",
                  "docstring": "Update the build configuration when the number of fields changes.\n\nArgs:\n    build_config (dotdict): The current build configuration.\n    field_value (Any): The new value for the field.\n    field_name (Optional[str]): The name of the field being updated."
                },
                {
                  "name": "get_data",
                  "docstring": "Function to get the Data from the attributes."
                },
                {
                  "name": "validate_text_key",
                  "docstring": "This function validates that the Text Key is one of the keys in the Data."
                }
              ],
              "attributes": [
                "MAX_FIELDS",
                "icon",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "langflow.custom.custom_component.component.Component",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DataInput",
            "langflow.inputs.inputs.DictInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.schema.dotdict.dotdict"
          ],
          "docstring": null
        },
        "combine_text": {
          "file_path": "src/backend/base/langflow/components/processing/combine_text.py",
          "classes": [
            {
              "name": "CombineTextComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "combine_texts",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        },
        "parse_dataframe": {
          "file_path": "src/backend/base/langflow/components/processing/parse_dataframe.py",
          "classes": [
            {
              "name": "ParseDataFrameComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "_clean_args",
                  "docstring": null
                },
                {
                  "name": "parse_data",
                  "docstring": "Converts each row of the DataFrame into a formatted string using the template.\n\nthen joins them with `sep`. Returns a single combined string as a Message."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.io.DataFrameInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.io.StrInput",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        },
        "alter_metadata": {
          "file_path": "src/backend/base/langflow/components/processing/alter_metadata.py",
          "classes": [
            {
              "name": "AlterMetadataComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "_as_clean_dict",
                  "docstring": "Convert a Data object or a standard dictionary to a standard dictionary."
                },
                {
                  "name": "process_output",
                  "docstring": null
                },
                {
                  "name": "as_dataframe",
                  "docstring": "Convert the processed data objects into a DataFrame.\n\nReturns:\n    DataFrame: A DataFrame where each row corresponds to a Data object,\n            with metadata fields as columns."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.io.HandleInput",
            "langflow.io.NestedDictInput",
            "langflow.io.Output",
            "langflow.io.StrInput",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame"
          ],
          "docstring": null
        },
        "llm_router": {
          "file_path": "src/backend/base/langflow/components/processing/llm_router.py",
          "classes": [
            {
              "name": "LLMRouterComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "__init__",
                  "docstring": null
                },
                {
                  "name": "_simplify_model_name",
                  "docstring": "Simplify model name for matching by lowercasing and removing non-alphanumerics."
                },
                {
                  "name": "_get_api_model_id_for_langflow_model",
                  "docstring": "Attempt to find the OpenRouter API ID for a given Langflow model name."
                },
                {
                  "name": "_get_model_specs_dict",
                  "docstring": "Get a dictionary of relevant model specifications for a given Langflow model name."
                },
                {
                  "name": "_create_system_prompt",
                  "docstring": "Create system prompt for the judge LLM."
                },
                {
                  "name": "_parse_judge_response",
                  "docstring": "Parse the judge's response to extract model index."
                },
                {
                  "name": "get_selected_model_info",
                  "docstring": "Return detailed information about the selected model as a list of Data objects."
                },
                {
                  "name": "get_routing_decision",
                  "docstring": "Return the comprehensive routing decision explanation."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "MAX_DESCRIPTION_LENGTH",
                "QUERY_PREVIEW_MAX_LENGTH",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "asyncio",
            "http",
            "json",
            "typing.Any",
            "aiohttp",
            "langflow.base.models.chat_result.get_chat_result",
            "langflow.base.models.model_utils.get_model_name",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.schema.data.Data",
            "langflow.schema.message.Message",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "parse_json_data": {
          "file_path": "src/backend/base/langflow/components/processing/parse_json_data.py",
          "classes": [
            {
              "name": "ParseJSONDataComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "_parse_data",
                  "docstring": null
                },
                {
                  "name": "filter_data",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "json",
            "json.JSONDecodeError",
            "jq",
            "json_repair.repair_json",
            "loguru.logger",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        },
        "json_cleaner": {
          "file_path": "src/backend/base/langflow/components/processing/json_cleaner.py",
          "classes": [
            {
              "name": "JSONCleaner",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "clean_json",
                  "docstring": null
                },
                {
                  "name": "_remove_control_characters",
                  "docstring": "Remove control characters from the string."
                },
                {
                  "name": "_normalize_unicode",
                  "docstring": "Normalize Unicode characters in the string."
                },
                {
                  "name": "_validate_json",
                  "docstring": "Validate the JSON string."
                },
                {
                  "name": "__init__",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "display_name",
                "description",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "json",
            "unicodedata",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.schema.message.Message",
            "langflow.template.field.base.Output",
            "json_repair.repair_json"
          ],
          "docstring": null
        },
        "save_file": {
          "file_path": "src/backend/base/langflow/components/processing/save_file.py",
          "classes": [
            {
              "name": "SaveToFileComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "_get_input_type",
                  "docstring": "Determine the input type based on the provided input."
                },
                {
                  "name": "_get_default_format",
                  "docstring": "Return the default file format based on input type."
                },
                {
                  "name": "_adjust_file_path_with_format",
                  "docstring": "Adjust the file path to include the correct extension."
                },
                {
                  "name": "_save_dataframe",
                  "docstring": "Save a DataFrame to the specified file format."
                },
                {
                  "name": "_save_data",
                  "docstring": "Save a Data object to the specified file format."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "DATA_FORMAT_CHOICES",
                "MESSAGE_FORMAT_CHOICES",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "json",
            "collections.abc.AsyncIterator",
            "collections.abc.Iterator",
            "pathlib.Path",
            "orjson",
            "pandas",
            "fastapi.UploadFile",
            "fastapi.encoders.jsonable_encoder",
            "langflow.api.v2.files.upload_user_file",
            "langflow.custom.Component",
            "langflow.io.DropdownInput",
            "langflow.io.HandleInput",
            "langflow.io.StrInput",
            "langflow.schema.Data",
            "langflow.schema.DataFrame",
            "langflow.schema.Message",
            "langflow.services.auth.utils.create_user_longterm_token",
            "langflow.services.database.models.user.crud.get_user_by_id",
            "langflow.services.deps.get_session",
            "langflow.services.deps.get_settings_service",
            "langflow.services.deps.get_storage_service",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "converter": {
          "file_path": "src/backend/base/langflow/components/processing/converter.py",
          "classes": [
            {
              "name": "TypeConverterComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "update_outputs",
                  "docstring": "Dynamically show only the relevant output based on the selected output type."
                },
                {
                  "name": "convert_to_message",
                  "docstring": "Convert input to Message type."
                },
                {
                  "name": "convert_to_data",
                  "docstring": "Convert input to Data type."
                },
                {
                  "name": "convert_to_dataframe",
                  "docstring": "Convert input to DataFrame type."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "langflow.custom.Component",
            "langflow.io.HandleInput",
            "langflow.io.Output",
            "langflow.io.TabInput",
            "langflow.schema.Data",
            "langflow.schema.DataFrame",
            "langflow.schema.Message"
          ],
          "docstring": null
        },
        "split_text": {
          "file_path": "src/backend/base/langflow/components/processing/split_text.py",
          "classes": [
            {
              "name": "SplitTextComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "_docs_to_data",
                  "docstring": null
                },
                {
                  "name": "_fix_separator",
                  "docstring": "Fix common separator issues and convert to proper format."
                },
                {
                  "name": "split_text_base",
                  "docstring": null
                },
                {
                  "name": "split_text",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain_text_splitters.CharacterTextSplitter",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.DropdownInput",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame",
            "langflow.schema.message.Message",
            "langflow.utils.util.unescape_string"
          ],
          "docstring": null
        },
        "parser": {
          "file_path": "src/backend/base/langflow/components/processing/parser.py",
          "classes": [
            {
              "name": "ParserComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "update_build_config",
                  "docstring": "Dynamically hide/show `template` and enforce requirement based on `stringify`."
                },
                {
                  "name": "_clean_args",
                  "docstring": "Prepare arguments based on input type."
                },
                {
                  "name": "parse_combined_text",
                  "docstring": "Parse all rows/items into a single text or convert input to string if `stringify` is enabled."
                },
                {
                  "name": "convert_to_string",
                  "docstring": "Convert input data to string with proper error handling."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.helpers.data.safe_convert",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.inputs.inputs.TabInput",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame",
            "langflow.schema.message.Message",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "merge_data": {
          "file_path": "src/backend/base/langflow/components/processing/merge_data.py",
          "classes": [
            {
              "name": "DataOperation",
              "bases": [
                "str",
                "Enum"
              ],
              "docstring": null,
              "methods": [],
              "attributes": [
                "CONCATENATE",
                "APPEND",
                "MERGE",
                "JOIN"
              ]
            },
            {
              "name": "MergeDataComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "combine_data",
                  "docstring": null
                },
                {
                  "name": "_process_operation",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "MIN_INPUTS_REQUIRED",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "enum.Enum",
            "typing.cast",
            "loguru.logger",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.DataInput",
            "langflow.io.DropdownInput",
            "langflow.io.Output",
            "langflow.schema.dataframe.DataFrame"
          ],
          "docstring": null
        },
        "extract_key": {
          "file_path": "src/backend/base/langflow/components/processing/extract_key.py",
          "classes": [
            {
              "name": "ExtractDataKeyComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "extract_key",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.io.DataInput",
            "langflow.io.Output",
            "langflow.io.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "filter_data": {
          "file_path": "src/backend/base/langflow/components/processing/filter_data.py",
          "classes": [
            {
              "name": "FilterDataComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "filter_data",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "beta",
                "name",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.io.DataInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "python_repl_core": {
          "file_path": "src/backend/base/langflow/components/processing/python_repl_core.py",
          "classes": [
            {
              "name": "PythonREPLComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_globals",
                  "docstring": "Create a globals dictionary with only the specified allowed imports."
                },
                {
                  "name": "run_python_repl",
                  "docstring": null
                },
                {
                  "name": "build",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "importlib",
            "langchain_experimental.utilities.PythonREPL",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.CodeInput",
            "langflow.io.Output",
            "langflow.io.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "select_data": {
          "file_path": "src/backend/base/langflow/components/processing/select_data.py",
          "classes": [
            {
              "name": "SelectDataComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [],
              "attributes": [
                "icon",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.inputs.inputs.DataInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.io.Output",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "batch_run": {
          "file_path": "src/backend/base/langflow/components/processing/batch_run.py",
          "classes": [
            {
              "name": "BatchRunComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "_format_row_as_toml",
                  "docstring": "Convert a dictionary (row) into a TOML-formatted string."
                },
                {
                  "name": "_create_base_row",
                  "docstring": "Create a base row with original columns and additional metadata."
                },
                {
                  "name": "_add_metadata",
                  "docstring": "Add metadata to a row if enabled."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "__future__.annotations",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "typing.cast",
            "toml",
            "loguru.logger",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.BoolInput",
            "langflow.io.DataFrameInput",
            "langflow.io.HandleInput",
            "langflow.io.MessageTextInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.schema.dataframe.DataFrame",
            "langchain_core.runnables.Runnable"
          ],
          "docstring": null
        },
        "data_to_dataframe": {
          "file_path": "src/backend/base/langflow/components/processing/data_to_dataframe.py",
          "classes": [
            {
              "name": "DataToDataFrameComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_dataframe",
                  "docstring": "Builds a DataFrame from Data objects by combining their fields.\n\nFor each Data object:\n  - Merge item.data (dictionary) as columns\n  - If item.text is present, add 'text' column\n\nReturns a DataFrame with one row per Data object."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.io.DataInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame"
          ],
          "docstring": null
        },
        "dataframe_operations": {
          "file_path": "src/backend/base/langflow/components/processing/dataframe_operations.py",
          "classes": [
            {
              "name": "DataFrameOperationsComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "update_build_config",
                  "docstring": null
                },
                {
                  "name": "perform_operation",
                  "docstring": null
                },
                {
                  "name": "filter_rows_by_value",
                  "docstring": null
                },
                {
                  "name": "sort_by_column",
                  "docstring": null
                },
                {
                  "name": "drop_column",
                  "docstring": null
                },
                {
                  "name": "rename_column",
                  "docstring": null
                },
                {
                  "name": "add_column",
                  "docstring": null
                },
                {
                  "name": "select_columns",
                  "docstring": null
                },
                {
                  "name": "head",
                  "docstring": null
                },
                {
                  "name": "tail",
                  "docstring": null
                },
                {
                  "name": "replace_values",
                  "docstring": null
                },
                {
                  "name": "drop_duplicates",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "OPERATION_CHOICES",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "pandas",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.SortableListInput",
            "langflow.io.BoolInput",
            "langflow.io.DataFrameInput",
            "langflow.io.DropdownInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.StrInput",
            "langflow.logging.logger",
            "langflow.schema.dataframe.DataFrame"
          ],
          "docstring": null
        },
        "prompt": {
          "file_path": "src/backend/base/langflow/components/processing/prompt.py",
          "classes": [
            {
              "name": "PromptComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "_update_template",
                  "docstring": null
                },
                {
                  "name": "_get_fallback_input",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "trace_type",
                "name",
                "priority",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.prompts.api_utils.process_prompt_template",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.DefaultPromptField",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.PromptInput",
            "langflow.schema.message.Message",
            "langflow.template.utils.update_template_values"
          ],
          "docstring": null
        },
        "parse_data": {
          "file_path": "src/backend/base/langflow/components/processing/parse_data.py",
          "classes": [
            {
              "name": "ParseDataComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "_clean_args",
                  "docstring": null
                },
                {
                  "name": "parse_data",
                  "docstring": null
                },
                {
                  "name": "parse_data_as_list",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "legacy",
                "metadata",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.helpers.data.data_to_text",
            "langflow.helpers.data.data_to_text_list",
            "langflow.io.DataInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.io.StrInput",
            "langflow.schema.data.Data",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        },
        "create_data": {
          "file_path": "src/backend/base/langflow/components/processing/create_data.py",
          "classes": [
            {
              "name": "CreateDataComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "update_build_config",
                  "docstring": null
                },
                {
                  "name": "get_data",
                  "docstring": "Function to get the Data from the attributes."
                },
                {
                  "name": "validate_text_key",
                  "docstring": "This function validates that the Text Key is one of the keys in the Data."
                }
              ],
              "attributes": [
                "MAX_FIELDS",
                "legacy",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "langflow.custom.custom_component.component.Component",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DictInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.schema.dotdict.dotdict"
          ],
          "docstring": null
        },
        "regex": {
          "file_path": "src/backend/base/langflow/components/processing/regex.py",
          "classes": [
            {
              "name": "RegexExtractorComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "extract_matches",
                  "docstring": null
                },
                {
                  "name": "get_matches_text",
                  "docstring": "Get matches as a formatted text message."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "re",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        },
        "message_to_data": {
          "file_path": "src/backend/base/langflow/components/processing/message_to_data.py",
          "classes": [
            {
              "name": "MessageToDataComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "convert_message_to_data",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "beta",
                "name",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "loguru.logger",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.MessageInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        },
        "filter_data_values": {
          "file_path": "src/backend/base/langflow/components/processing/filter_data_values.py",
          "classes": [
            {
              "name": "DataFilterComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "compare_values",
                  "docstring": null
                },
                {
                  "name": "filter_data",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "beta",
                "name",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.DataInput",
            "langflow.io.DropdownInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "data_operations": {
          "file_path": "src/backend/base/langflow/components/processing/data_operations.py",
          "classes": [
            {
              "name": "DataOperationsComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_data_dict",
                  "docstring": "Extract data dictionary from Data object."
                },
                {
                  "name": "get_normalized_data",
                  "docstring": "Get normalized data dictionary, handling the 'data' key if present."
                },
                {
                  "name": "data_is_list",
                  "docstring": "Check if data contains multiple items."
                },
                {
                  "name": "validate_single_data",
                  "docstring": "Validate that the operation is being performed on a single data object."
                },
                {
                  "name": "operation_exception",
                  "docstring": "Raise exception for incompatible operations."
                },
                {
                  "name": "select_keys",
                  "docstring": "Select specific keys from the data dictionary."
                },
                {
                  "name": "remove_keys",
                  "docstring": "Remove specified keys from the data dictionary."
                },
                {
                  "name": "rename_keys",
                  "docstring": "Rename keys in the data dictionary."
                },
                {
                  "name": "recursive_eval",
                  "docstring": "Recursively evaluate string values in a dictionary or list.\n\nIf the value is a string that can be evaluated, it will be evaluated.\nOtherwise, the original value is returned."
                },
                {
                  "name": "evaluate_data",
                  "docstring": "Evaluate string values in the data dictionary."
                },
                {
                  "name": "combine_data",
                  "docstring": "Combine multiple data objects into one."
                },
                {
                  "name": "compare_values",
                  "docstring": "Compare values based on the specified operator."
                },
                {
                  "name": "filter_data",
                  "docstring": "Filter list data based on key, value, and operator."
                },
                {
                  "name": "multi_filter_data",
                  "docstring": "Apply multiple filters to the data."
                },
                {
                  "name": "append_update",
                  "docstring": "Append or Update with new key-value pairs."
                },
                {
                  "name": "update_build_config",
                  "docstring": "Update build configuration based on selected action."
                },
                {
                  "name": "as_data",
                  "docstring": "Execute the selected action on the data."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "default_keys",
                "metadata",
                "actions_data",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "ast",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "langflow.custom.Component",
            "langflow.inputs.DictInput",
            "langflow.inputs.DropdownInput",
            "langflow.inputs.MessageTextInput",
            "langflow.inputs.SortableListInput",
            "langflow.io.DataInput",
            "langflow.io.Output",
            "langflow.logging.logger",
            "langflow.schema.Data",
            "langflow.schema.dotdict.dotdict",
            "langflow.utils.component_utils.set_current_fields",
            "langflow.utils.component_utils.set_field_display",
            "collections.abc.Callable"
          ],
          "docstring": null
        }
      }
    },
    "helpers": {
      "description": "Components in helpers category",
      "base_path": "src/backend/base/langflow/components/helpers",
      "components": {
        "id_generator": {
          "file_path": "src/backend/base/langflow/components/helpers/id_generator.py",
          "classes": [
            {
              "name": "IDGeneratorComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "update_build_config",
                  "docstring": null
                },
                {
                  "name": "generate_id",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "uuid",
            "typing.Any",
            "typing_extensions.override",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.dotdict.dotdict",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        },
        "create_list": {
          "file_path": "src/backend/base/langflow/components/helpers/create_list.py",
          "classes": [
            {
              "name": "CreateListComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "create_list",
                  "docstring": null
                },
                {
                  "name": "as_dataframe",
                  "docstring": "Convert the list of Data objects into a DataFrame.\n\nReturns:\n    DataFrame: A DataFrame containing the list data."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.StrInput",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "memory": {
          "file_path": "src/backend/base/langflow/components/helpers/memory.py",
          "classes": [
            {
              "name": "MemoryComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "update_outputs",
                  "docstring": "Dynamically show only the relevant output based on the selected output type."
                },
                {
                  "name": "update_build_config",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "default_keys",
                "mode_config",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "typing.cast",
            "langflow.custom.custom_component.component.Component",
            "langflow.helpers.data.data_to_text",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.inputs.inputs.TabInput",
            "langflow.memory.aget_messages",
            "langflow.memory.astore_message",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame",
            "langflow.schema.dotdict.dotdict",
            "langflow.schema.message.Message",
            "langflow.template.field.base.Output",
            "langflow.utils.component_utils.set_current_fields",
            "langflow.utils.component_utils.set_field_display",
            "langflow.utils.constants.MESSAGE_SENDER_AI",
            "langflow.utils.constants.MESSAGE_SENDER_NAME_AI",
            "langflow.utils.constants.MESSAGE_SENDER_USER"
          ],
          "docstring": null
        },
        "store_message": {
          "file_path": "src/backend/base/langflow/components/helpers/store_message.py",
          "classes": [
            {
              "name": "MessageStoreComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.memory.aget_messages",
            "langflow.memory.astore_message",
            "langflow.schema.message.Message",
            "langflow.template.field.base.Output",
            "langflow.utils.constants.MESSAGE_SENDER_AI",
            "langflow.utils.constants.MESSAGE_SENDER_NAME_AI"
          ],
          "docstring": null
        },
        "output_parser": {
          "file_path": "src/backend/base/langflow/components/helpers/output_parser.py",
          "classes": [
            {
              "name": "OutputParserComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_parser",
                  "docstring": null
                },
                {
                  "name": "format_instructions",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain_core.output_parsers.CommaSeparatedListOutputParser",
            "langflow.custom.custom_component.component.Component",
            "langflow.field_typing.constants.OutputParser",
            "langflow.io.DropdownInput",
            "langflow.io.Output",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        },
        "current_date": {
          "file_path": "src/backend/base/langflow/components/helpers/current_date.py",
          "classes": [
            {
              "name": "CurrentDateComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_current_date",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "datetime.datetime",
            "zoneinfo.ZoneInfo",
            "zoneinfo.available_timezones",
            "loguru.logger",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.DropdownInput",
            "langflow.io.Output",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        },
        "calculator_core": {
          "file_path": "src/backend/base/langflow/components/helpers/calculator_core.py",
          "classes": [
            {
              "name": "CalculatorComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "_eval_expr",
                  "docstring": "Evaluate an AST node recursively."
                },
                {
                  "name": "evaluate_expression",
                  "docstring": "Evaluate the mathematical expression and return the result."
                },
                {
                  "name": "build",
                  "docstring": "Return the main evaluation function."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "ast",
            "operator",
            "collections.abc.Callable",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        }
      }
    },
    "custom_component": {
      "description": "Components in custom_component category",
      "base_path": "src/backend/base/langflow/components/custom_component",
      "components": {
        "custom_component": {
          "file_path": "src/backend/base/langflow/components/custom_component/custom_component.py",
          "classes": [
            {
              "name": "CustomComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_output",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        }
      }
    },
    "lmstudio": {
      "description": "Components in lmstudio category",
      "base_path": "src/backend/base/langflow/components/lmstudio",
      "components": {
        "lmstudioembeddings": {
          "file_path": "src/backend/base/langflow/components/lmstudio/lmstudioembeddings.py",
          "classes": [
            {
              "name": "LMStudioEmbeddingsComponent",
              "bases": [
                "LCEmbeddingsModel"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_embeddings",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "urllib.parse.urljoin",
            "httpx",
            "langflow.base.embeddings.model.LCEmbeddingsModel",
            "langflow.field_typing.Embeddings",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.io.FloatInput",
            "langflow.io.MessageTextInput",
            "langchain_nvidia_ai_endpoints.NVIDIAEmbeddings"
          ],
          "docstring": null
        },
        "lmstudiomodel": {
          "file_path": "src/backend/base/langflow/components/lmstudio/lmstudiomodel.py",
          "classes": [
            {
              "name": "LMStudioModelComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_model",
                  "docstring": null
                },
                {
                  "name": "_get_exception_message",
                  "docstring": "Get a message from an LM Studio exception.\n\nArgs:\n    e (Exception): The exception to get the message from.\n\nReturns:\n    str: The message from the exception."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "urllib.parse.urljoin",
            "httpx",
            "langchain_openai.ChatOpenAI",
            "typing_extensions.override",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.LanguageModel",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.inputs.inputs.DictInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.FloatInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.StrInput",
            "openai.BadRequestError"
          ],
          "docstring": null
        }
      }
    },
    "cohere": {
      "description": "Components in cohere category",
      "base_path": "src/backend/base/langflow/components/cohere",
      "components": {
        "cohere_embeddings": {
          "file_path": "src/backend/base/langflow/components/cohere/cohere_embeddings.py",
          "classes": [
            {
              "name": "CohereEmbeddingsComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_embeddings",
                  "docstring": null
                },
                {
                  "name": "get_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "cohere",
            "langchain_cohere.CohereEmbeddings",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.Embeddings",
            "langflow.io.DropdownInput",
            "langflow.io.FloatInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput"
          ],
          "docstring": null
        },
        "cohere_rerank": {
          "file_path": "src/backend/base/langflow/components/cohere/cohere_rerank.py",
          "classes": [
            {
              "name": "CohereRerankComponent",
              "bases": [
                "LCCompressorComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_compressor",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.compressors.model.LCCompressorComponent",
            "langflow.field_typing.BaseDocumentCompressor",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.io.DropdownInput",
            "langflow.template.field.base.Output",
            "langchain_cohere.CohereRerank"
          ],
          "docstring": null
        },
        "cohere_models": {
          "file_path": "src/backend/base/langflow/components/cohere/cohere_models.py",
          "classes": [
            {
              "name": "CohereComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain_cohere.ChatCohere",
            "pydantic.v1.SecretStr",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.LanguageModel",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.io.SecretStrInput",
            "langflow.io.SliderInput"
          ],
          "docstring": null
        }
      }
    },
    "crewai": {
      "description": "Components in crewai category",
      "base_path": "src/backend/base/langflow/components/crewai",
      "components": {
        "sequential_task": {
          "file_path": "src/backend/base/langflow/components/crewai/sequential_task.py",
          "classes": [
            {
              "name": "SequentialTaskComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_task",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.agents.crewai.tasks.SequentialTask",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.BoolInput",
            "langflow.io.HandleInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output"
          ],
          "docstring": null
        },
        "crewai": {
          "file_path": "src/backend/base/langflow/components/crewai/crewai.py",
          "classes": [
            {
              "name": "CrewAIAgentComponent",
              "bases": [
                "Component"
              ],
              "docstring": "Component for creating a CrewAI agent.\n\nThis component allows you to create a CrewAI agent with the specified role, goal, backstory, tools,\nand language model.\n\nArgs:\n    Component (Component): Base class for all components.\n\nReturns:\n    Agent: CrewAI agent.",
              "methods": [
                {
                  "name": "build_output",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.agents.crewai.crew.convert_llm",
            "langflow.base.agents.crewai.crew.convert_tools",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.BoolInput",
            "langflow.io.DictInput",
            "langflow.io.HandleInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "crewai.Agent"
          ],
          "docstring": null
        },
        "hierarchical_crew": {
          "file_path": "src/backend/base/langflow/components/crewai/hierarchical_crew.py",
          "classes": [
            {
              "name": "HierarchicalCrewComponent",
              "bases": [
                "BaseCrewComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_crew",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "legacy",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.agents.crewai.crew.BaseCrewComponent",
            "langflow.io.HandleInput",
            "crewai.Crew",
            "crewai.Process"
          ],
          "docstring": null
        },
        "sequential_crew": {
          "file_path": "src/backend/base/langflow/components/crewai/sequential_crew.py",
          "classes": [
            {
              "name": "SequentialCrewComponent",
              "bases": [
                "BaseCrewComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "agents",
                  "docstring": null
                },
                {
                  "name": "get_tasks_and_agents",
                  "docstring": null
                },
                {
                  "name": "build_crew",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "legacy",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.agents.crewai.crew.BaseCrewComponent",
            "langflow.io.HandleInput",
            "langflow.schema.message.Message",
            "crewai.Crew",
            "crewai.Process"
          ],
          "docstring": null
        },
        "hierarchical_task": {
          "file_path": "src/backend/base/langflow/components/crewai/hierarchical_task.py",
          "classes": [
            {
              "name": "HierarchicalTaskComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_task",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.agents.crewai.tasks.HierarchicalTask",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.HandleInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output"
          ],
          "docstring": null
        },
        "sequential_task_agent": {
          "file_path": "src/backend/base/langflow/components/crewai/sequential_task_agent.py",
          "classes": [
            {
              "name": "SequentialTaskAgentComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_agent_and_task",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.agents.crewai.tasks.SequentialTask",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.BoolInput",
            "langflow.io.DictInput",
            "langflow.io.HandleInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "crewai.Agent",
            "crewai.Task"
          ],
          "docstring": null
        }
      }
    },
    "zep": {
      "description": "Components in zep category",
      "base_path": "src/backend/base/langflow/components/zep",
      "components": {
        "zep": {
          "file_path": "src/backend/base/langflow/components/zep/zep.py",
          "classes": [
            {
              "name": "ZepChatMemory",
              "bases": [
                "LCChatMemoryComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_message_history",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "legacy",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.memory.model.LCChatMemoryComponent",
            "langflow.field_typing.constants.Memory",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.SecretStrInput",
            "zep_python.zep_client",
            "zep_python.ZepClient",
            "zep_python.langchain.ZepChatMessageHistory"
          ],
          "docstring": null
        }
      }
    },
    "sambanova": {
      "description": "Components in sambanova category",
      "base_path": "src/backend/base/langflow/components/sambanova",
      "components": {
        "sambanova": {
          "file_path": "src/backend/base/langflow/components/sambanova/sambanova.py",
          "classes": [
            {
              "name": "SambaNovaComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain_sambanova.ChatSambaNovaCloud",
            "pydantic.v1.SecretStr",
            "langflow.base.models.model.LCModelComponent",
            "langflow.base.models.sambanova_constants.SAMBANOVA_MODEL_NAMES",
            "langflow.field_typing.LanguageModel",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.io.DropdownInput",
            "langflow.io.IntInput",
            "langflow.io.SecretStrInput",
            "langflow.io.SliderInput",
            "langflow.io.StrInput"
          ],
          "docstring": null
        }
      }
    },
    "cleanlab": {
      "description": "Components in cleanlab category",
      "base_path": "src/backend/base/langflow/components/cleanlab",
      "components": {
        "cleanlab_evaluator": {
          "file_path": "src/backend/base/langflow/components/cleanlab/cleanlab_evaluator.py",
          "classes": [
            {
              "name": "CleanlabEvaluator",
              "bases": [
                "Component"
              ],
              "docstring": "A component that evaluates the trustworthiness of LLM responses using Cleanlab.\n\nThis component takes a prompt and response pair, along with optional system instructions,\nand uses Cleanlab's evaluation algorithms to generate a trust score and explanation.\n\nInputs:\n    - system_prompt (MessageTextInput): Optional system-level instructions prepended to the user prompt.\n    - prompt (MessageTextInput): The user's prompt or query sent to the LLM.\n    - response (MessageTextInput): The response generated by the LLM to be evaluated. This should come from the\n      LLM component, i.e. OpenAI, Gemini, etc.\n    - api_key (SecretStrInput): Your Cleanlab API key.\n    - model (DropdownInput): The model used by Cleanlab to evaluate the response (can differ from the\n      generation model).\n    - quality_preset (DropdownInput): Tradeoff setting for accuracy vs. speed and cost. Higher presets are\n      slower but more accurate.\n\nOutputs:\n    - response_passthrough (Message): The original response, passed through for downstream use.\n    - score (number): A float between 0 and 1 indicating Cleanlab's trustworthiness score for the response.\n    - explanation (Message): A textual explanation of why the response received its score.\n\nThis component works well in conjunction with the CleanlabRemediator to create a complete trust evaluation\nand remediation pipeline.\n\nMore details on the evaluation metrics can be found here: https://help.cleanlab.ai/tlm/tutorials/tlm/",
              "methods": [
                {
                  "name": "_evaluate_once",
                  "docstring": null
                },
                {
                  "name": "get_score",
                  "docstring": null
                },
                {
                  "name": "get_explanation",
                  "docstring": null
                },
                {
                  "name": "pass_response",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "cleanlab_tlm.TLM",
            "langflow.custom.Component",
            "langflow.io.DropdownInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        },
        "cleanlab_rag_evaluator": {
          "file_path": "src/backend/base/langflow/components/cleanlab/cleanlab_rag_evaluator.py",
          "classes": [
            {
              "name": "CleanlabRAGEvaluator",
              "bases": [
                "Component"
              ],
              "docstring": "A component that evaluates the quality of RAG (Retrieval-Augmented Generation) outputs using Cleanlab.\n\nThis component takes a query, retrieved context, and generated response from a RAG pipeline,\nand uses Cleanlab's evaluation algorithms to assess various aspects of the RAG system's performance.\n\nThe component can evaluate:\n- Overall trustworthiness of the LLM generated response\n- Context sufficiency (whether the retrieved context contains information needed to answer the query)\n- Response groundedness (whether the response is supported directly by the context)\n- Response helpfulness (whether the response effectively addresses the user's query)\n- Query ease (whether the user query seems easy for an AI system to properly handle, useful to diagnose\n  queries that are: complex, vague, tricky, or disgruntled-sounding)\n\nOutputs:\n    - Trust Score: A score between 0-1 corresponding to the trustworthiness of the response. A higher score\n      indicates a higher confidence that the response is correct/good.\n    - Explanation: An LLM generated explanation of the trustworthiness assessment\n    - Other Evals: Additional evaluation metrics for selected evaluation types in the \"Controls\" tab\n    - Evaluation Summary: A comprehensive summary of context, query, response, and selected evaluation results\n\nThis component works well in conjunction with the CleanlabRemediator to create a complete trust evaluation\nand remediation pipeline.\n\nMore details on the evaluation metrics can be found here: https://help.cleanlab.ai/tlm/use-cases/tlm_rag/",
              "methods": [
                {
                  "name": "_evaluate_once",
                  "docstring": null
                },
                {
                  "name": "pass_response",
                  "docstring": null
                },
                {
                  "name": "get_trust_score",
                  "docstring": null
                },
                {
                  "name": "get_trust_explanation",
                  "docstring": null
                },
                {
                  "name": "get_other_scores",
                  "docstring": null
                },
                {
                  "name": "get_evaluation_summary",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "cleanlab_tlm.TrustworthyRAG",
            "cleanlab_tlm.get_default_evals",
            "langflow.custom.Component",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        },
        "cleanlab_remediator": {
          "file_path": "src/backend/base/langflow/components/cleanlab/cleanlab_remediator.py",
          "classes": [
            {
              "name": "CleanlabRemediator",
              "bases": [
                "Component"
              ],
              "docstring": "Remediates potentially untrustworthy LLM responses based on trust scores computed by the Cleanlab Evaluator.\n\nThis component takes a response and its associated trust score,\nand applies remediation strategies based on configurable thresholds and settings.\n\nInputs:\n    - response (MessageTextInput): The original LLM-generated response to be evaluated and possibly remediated.\n      The CleanlabEvaluator passes this response through.\n    - score (HandleInput): The trust score output from CleanlabEvaluator (expected to be a float between 0 and 1).\n    - explanation (MessageTextInput): Optional textual explanation for the trust score, to be included in the\n      output.\n    - threshold (Input[float]): Minimum trust score required to accept the response. If the score is lower, the\n      response is remediated.\n    - show_untrustworthy_response (BoolInput): If true, returns the original response with a warning; if false,\n      returns fallback text.\n    - untrustworthy_warning_text (PromptInput): Text warning to append to responses deemed untrustworthy (when\n      showing them).\n    - fallback_text (PromptInput): Replacement message returned if the response is untrustworthy and should be\n      hidden.\n\nOutputs:\n    - remediated_response (Message): Either:\n        • the original response,\n        • the original response with appended warning, or\n        • the fallback response,\n      depending on the trust score and configuration.\n\nThis component is typically used downstream of CleanlabEvaluator or CleanlabRagValidator\nto take appropriate action on low-trust responses and inform users accordingly.",
              "methods": [
                {
                  "name": "remediate_response",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.Component",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.io.BoolInput",
            "langflow.io.FloatInput",
            "langflow.io.HandleInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.PromptInput",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        }
      }
    },
    "needle": {
      "description": "Components in needle category",
      "base_path": "src/backend/base/langflow/components/needle",
      "components": {
        "needle": {
          "file_path": "src/backend/base/langflow/components/needle/needle.py",
          "classes": [
            {
              "name": "NeedleComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "run",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain_community.retrievers.needle.NeedleRetriever",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.message.Message",
            "langflow.utils.constants.MESSAGE_SENDER_AI"
          ],
          "docstring": null
        }
      }
    },
    "twelvelabs": {
      "description": "Components in twelvelabs category",
      "base_path": "src/backend/base/langflow/components/twelvelabs",
      "components": {
        "text_embeddings": {
          "file_path": "src/backend/base/langflow/components/twelvelabs/text_embeddings.py",
          "classes": [
            {
              "name": "TwelveLabsTextEmbeddings",
              "bases": [
                "Embeddings"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "__init__",
                  "docstring": null
                },
                {
                  "name": "embed_documents",
                  "docstring": null
                },
                {
                  "name": "embed_query",
                  "docstring": null
                }
              ],
              "attributes": []
            },
            {
              "name": "TwelveLabsTextEmbeddingsComponent",
              "bases": [
                "LCEmbeddingsModel"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_embeddings",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "documentation",
                "inputs"
              ]
            }
          ],
          "imports": [
            "twelvelabs.TwelveLabs",
            "langflow.base.embeddings.model.LCEmbeddingsModel",
            "langflow.field_typing.Embeddings",
            "langflow.io.DropdownInput",
            "langflow.io.FloatInput",
            "langflow.io.IntInput",
            "langflow.io.SecretStrInput"
          ],
          "docstring": null
        },
        "twelvelabs_pegasus": {
          "file_path": "src/backend/base/langflow/components/twelvelabs/twelvelabs_pegasus.py",
          "classes": [
            {
              "name": "TaskError",
              "bases": [
                "Exception"
              ],
              "docstring": "Error raised when a task fails.",
              "methods": [],
              "attributes": []
            },
            {
              "name": "TaskTimeoutError",
              "bases": [
                "Exception"
              ],
              "docstring": "Error raised when a task times out.",
              "methods": [],
              "attributes": []
            },
            {
              "name": "IndexCreationError",
              "bases": [
                "Exception"
              ],
              "docstring": "Error raised when there's an issue with an index.",
              "methods": [],
              "attributes": []
            },
            {
              "name": "ApiRequestError",
              "bases": [
                "Exception"
              ],
              "docstring": "Error raised when an API request fails.",
              "methods": [],
              "attributes": []
            },
            {
              "name": "VideoValidationError",
              "bases": [
                "Exception"
              ],
              "docstring": "Error raised when video validation fails.",
              "methods": [],
              "attributes": []
            },
            {
              "name": "TwelveLabsPegasus",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "__init__",
                  "docstring": null
                },
                {
                  "name": "_get_or_create_index",
                  "docstring": "Get existing index or create new one.\n\nReturns (index_id, index_name)."
                },
                {
                  "name": "wait_for_task_completion",
                  "docstring": "Wait for task completion with timeout and improved error handling.\n\nPolls the task status until completion or timeout."
                },
                {
                  "name": "validate_video_file",
                  "docstring": "Validate video file using ffprobe.\n\nReturns (is_valid, error_message)."
                },
                {
                  "name": "on_task_update",
                  "docstring": "Callback for task status updates.\n\nUpdates the component status with the current task status."
                },
                {
                  "name": "process_video",
                  "docstring": "Process video using Pegasus and generate response if message is provided.\n\nHandles video indexing and question answering using the TwelveLabs API."
                },
                {
                  "name": "get_video_id",
                  "docstring": "Return the video ID of the processed video as a Message.\n\nReturns an empty string if no video has been processed."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "documentation",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "json",
            "subprocess",
            "time",
            "pathlib.Path",
            "typing.Any",
            "tenacity.retry",
            "tenacity.stop_after_attempt",
            "tenacity.wait_exponential",
            "twelvelabs.TwelveLabs",
            "langflow.custom.Component",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.inputs.DataInput",
            "langflow.inputs.DropdownInput",
            "langflow.inputs.MessageInput",
            "langflow.inputs.MultilineInput",
            "langflow.inputs.SecretStrInput",
            "langflow.inputs.SliderInput",
            "langflow.io.Output",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        },
        "video_embeddings": {
          "file_path": "src/backend/base/langflow/components/twelvelabs/video_embeddings.py",
          "classes": [
            {
              "name": "TwelveLabsVideoEmbeddings",
              "bases": [
                "Embeddings"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "__init__",
                  "docstring": null
                },
                {
                  "name": "_wait_for_task_completion",
                  "docstring": null
                },
                {
                  "name": "embed_documents",
                  "docstring": null
                },
                {
                  "name": "embed_query",
                  "docstring": null
                },
                {
                  "name": "embed_video",
                  "docstring": null
                }
              ],
              "attributes": []
            },
            {
              "name": "TwelveLabsVideoEmbeddingsComponent",
              "bases": [
                "LCEmbeddingsModel"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_embeddings",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "documentation",
                "inputs"
              ]
            }
          ],
          "imports": [
            "time",
            "pathlib.Path",
            "typing.Any",
            "typing.cast",
            "twelvelabs.TwelveLabs",
            "langflow.base.embeddings.model.LCEmbeddingsModel",
            "langflow.field_typing.Embeddings",
            "langflow.io.DropdownInput",
            "langflow.io.IntInput",
            "langflow.io.SecretStrInput"
          ],
          "docstring": null
        },
        "split_video": {
          "file_path": "src/backend/base/langflow/components/twelvelabs/split_video.py",
          "classes": [
            {
              "name": "SplitVideoComponent",
              "bases": [
                "Component"
              ],
              "docstring": "A component that splits a video into multiple clips of specified duration using FFmpeg.",
              "methods": [
                {
                  "name": "get_video_duration",
                  "docstring": "Get video duration using FFmpeg."
                },
                {
                  "name": "get_output_dir",
                  "docstring": "Create a unique output directory for clips based on video name and timestamp."
                },
                {
                  "name": "process_video",
                  "docstring": "Process video and split it into clips using FFmpeg."
                },
                {
                  "name": "process",
                  "docstring": "Process the input video and return a list of Data objects containing the clips."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "documentation",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "hashlib",
            "math",
            "subprocess",
            "datetime.datetime",
            "datetime.timezone",
            "pathlib.Path",
            "typing.Any",
            "langflow.custom.Component",
            "langflow.inputs.BoolInput",
            "langflow.inputs.DropdownInput",
            "langflow.inputs.HandleInput",
            "langflow.inputs.IntInput",
            "langflow.schema.Data",
            "langflow.template.Output"
          ],
          "docstring": null
        },
        "convert_astra_results": {
          "file_path": "src/backend/base/langflow/components/twelvelabs/convert_astra_results.py",
          "classes": [
            {
              "name": "ConvertAstraToTwelveLabs",
              "bases": [
                "Component"
              ],
              "docstring": "Convert Astra DB search results to TwelveLabs Pegasus inputs.",
              "methods": [
                {
                  "name": "__init__",
                  "docstring": null
                },
                {
                  "name": "build",
                  "docstring": "Process the Astra DB results and extract TwelveLabs index information."
                },
                {
                  "name": "get_video_id",
                  "docstring": "Return the extracted video ID as a Message."
                },
                {
                  "name": "get_index_id",
                  "docstring": "Return the extracted index ID as a Message."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "documentation",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "langflow.custom.Component",
            "langflow.io.HandleInput",
            "langflow.io.Output",
            "langflow.schema.Data",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        },
        "video_file": {
          "file_path": "src/backend/base/langflow/components/twelvelabs/video_file.py",
          "classes": [
            {
              "name": "VideoFileComponent",
              "bases": [
                "BaseFileComponent"
              ],
              "docstring": "Handles loading and processing of video files.\n\nThis component supports processing video files in common video formats.",
              "methods": [
                {
                  "name": "process_files",
                  "docstring": "Process video files."
                },
                {
                  "name": "load_files",
                  "docstring": "Load video files and return a list of Data objects."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "documentation",
                "VALID_EXTENSIONS",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "pathlib.Path",
            "langflow.base.data.BaseFileComponent",
            "langflow.io.FileInput",
            "langflow.schema.Data",
            "langflow.schema.DataFrame"
          ],
          "docstring": null
        },
        "pegasus_index": {
          "file_path": "src/backend/base/langflow/components/twelvelabs/pegasus_index.py",
          "classes": [
            {
              "name": "TwelveLabsError",
              "bases": [
                "Exception"
              ],
              "docstring": "Base exception for TwelveLabs errors.",
              "methods": [],
              "attributes": []
            },
            {
              "name": "IndexCreationError",
              "bases": [
                "TwelveLabsError"
              ],
              "docstring": "Error raised when there's an issue with an index.",
              "methods": [],
              "attributes": []
            },
            {
              "name": "TaskError",
              "bases": [
                "TwelveLabsError"
              ],
              "docstring": "Error raised when a task fails.",
              "methods": [],
              "attributes": []
            },
            {
              "name": "TaskTimeoutError",
              "bases": [
                "TwelveLabsError"
              ],
              "docstring": "Error raised when a task times out.",
              "methods": [],
              "attributes": []
            },
            {
              "name": "PegasusIndexVideo",
              "bases": [
                "Component"
              ],
              "docstring": "Indexes videos using TwelveLabs Pegasus API and adds the video ID to metadata.",
              "methods": [
                {
                  "name": "_get_or_create_index",
                  "docstring": "Get existing index or create new one.\n\nReturns (index_id, index_name)."
                },
                {
                  "name": "on_task_update",
                  "docstring": "Callback for task status updates.\n\nUpdates the component status with the current task status."
                },
                {
                  "name": "_check_task_status",
                  "docstring": "Check task status once.\n\nMakes a single API call to check the status of a task."
                },
                {
                  "name": "_wait_for_task_completion",
                  "docstring": "Wait for task completion with timeout and improved error handling.\n\nPolls the task status until completion or timeout."
                },
                {
                  "name": "_upload_video",
                  "docstring": "Upload a single video and return its task ID.\n\nUploads a video file to the specified index and returns the task ID."
                },
                {
                  "name": "index_videos",
                  "docstring": "Indexes each video and adds the video_id to its metadata."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "documentation",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "time",
            "concurrent.futures.ThreadPoolExecutor",
            "pathlib.Path",
            "typing.Any",
            "tenacity.retry",
            "tenacity.stop_after_attempt",
            "tenacity.wait_exponential",
            "twelvelabs.TwelveLabs",
            "langflow.custom.Component",
            "langflow.inputs.DataInput",
            "langflow.inputs.DropdownInput",
            "langflow.inputs.SecretStrInput",
            "langflow.inputs.StrInput",
            "langflow.io.Output",
            "langflow.schema.Data"
          ],
          "docstring": null
        }
      }
    },
    "wikipedia": {
      "description": "Components in wikipedia category",
      "base_path": "src/backend/base/langflow/components/wikipedia",
      "components": {
        "wikidata": {
          "file_path": "src/backend/base/langflow/components/wikipedia/wikidata.py",
          "classes": [
            {
              "name": "WikidataComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "fetch_content",
                  "docstring": null
                },
                {
                  "name": "fetch_content_dataframe",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "httpx",
            "httpx.HTTPError",
            "langchain_core.tools.ToolException",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "wikipedia": {
          "file_path": "src/backend/base/langflow/components/wikipedia/wikipedia.py",
          "classes": [
            {
              "name": "WikipediaComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "_build_wrapper",
                  "docstring": null
                },
                {
                  "name": "fetch_content",
                  "docstring": null
                },
                {
                  "name": "fetch_content_dataframe",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain_community.utilities.wikipedia.WikipediaAPIWrapper",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame"
          ],
          "docstring": null
        }
      }
    },
    "amazon": {
      "description": "Components in amazon category",
      "base_path": "src/backend/base/langflow/components/amazon",
      "components": {
        "amazon_bedrock_embedding": {
          "file_path": "src/backend/base/langflow/components/amazon/amazon_bedrock_embedding.py",
          "classes": [
            {
              "name": "AmazonBedrockEmbeddingsComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_embeddings",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.models.aws_constants.AWS_EMBEDDING_MODEL_IDS",
            "langflow.base.models.aws_constants.AWS_REGIONS",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.Embeddings",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.io.DropdownInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langchain_aws.BedrockEmbeddings",
            "boto3"
          ],
          "docstring": null
        },
        "s3_bucket_uploader": {
          "file_path": "src/backend/base/langflow/components/amazon/s3_bucket_uploader.py",
          "classes": [
            {
              "name": "S3BucketUploaderComponent",
              "bases": [
                "Component"
              ],
              "docstring": "S3BucketUploaderComponent is a component responsible for uploading files to an S3 bucket.\n\nIt provides two strategies for file upload: \"By Data\" and \"By File Name\". The component\nrequires AWS credentials and bucket details as inputs and processes files accordingly.\n\nAttributes:\n    display_name (str): The display name of the component.\n    description (str): A brief description of the components functionality.\n    icon (str): The icon representing the component.\n    name (str): The internal name of the component.\n    inputs (list): A list of input configurations required by the component.\n    outputs (list): A list of output configurations provided by the component.\n\nMethods:\n    process_files() -> None:\n        Processes files based on the selected strategy. Calls the appropriate method\n        based on the strategy attribute.\n    process_files_by_data() -> None:\n        Processes and uploads files to an S3 bucket based on the data inputs. Iterates\n        over the data inputs, logs the file path and text content, and uploads each file\n        to the specified S3 bucket if both file path and text content are available.\n    process_files_by_name() -> None:\n        Processes and uploads files to an S3 bucket based on their names. Iterates through\n        the list of data inputs, retrieves the file path from each data item, and uploads\n        the file to the specified S3 bucket if the file path is available. Logs the file\n        path being uploaded.\n    _s3_client() -> Any:\n        Creates and returns an S3 client using the provided AWS access key ID and secret\n        access key.\n\n    Please note that this component requires the boto3 library to be installed. It is designed\n    to work with File and Director components as inputs",
              "methods": [
                {
                  "name": "process_files",
                  "docstring": "Process files based on the selected strategy.\n\nThis method uses a strategy pattern to process files. The strategy is determined\nby the `self.strategy` attribute, which can be either \"By Data\" or \"By File Name\".\nDepending on the strategy, the corresponding method (`process_files_by_data` or\n`process_files_by_name`) is called. If an invalid strategy is provided, an error\nis logged.\n\nReturns:\n    None"
                },
                {
                  "name": "process_files_by_data",
                  "docstring": "Processes and uploads files to an S3 bucket based on the data inputs.\n\nThis method iterates over the data inputs, logs the file path and text content,\nand uploads each file to the specified S3 bucket if both file path and text content\nare available.\n\nArgs:\n    None\n\nReturns:\n    None"
                },
                {
                  "name": "process_files_by_name",
                  "docstring": "Processes and uploads files to an S3 bucket based on their names.\n\nIterates through the list of data inputs, retrieves the file path from each data item,\nand uploads the file to the specified S3 bucket if the file path is available.\nLogs the file path being uploaded.\n\nReturns:\n    None"
                },
                {
                  "name": "_s3_client",
                  "docstring": "Creates and returns an S3 client using the provided AWS access key ID and secret access key.\n\nReturns:\n    Any: A boto3 S3 client instance."
                },
                {
                  "name": "_normalize_path",
                  "docstring": "Process the file path based on the s3_prefix and path_as_prefix.\n\nArgs:\n    file_path (str): The original file path.\n    s3_prefix (str): The S3 prefix to use.\n    path_as_prefix (bool): Whether to use the file path as the S3 prefix.\n\nReturns:\n    str: The processed file path."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "pathlib.Path",
            "typing.Any",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.HandleInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "boto3"
          ],
          "docstring": null
        },
        "amazon_bedrock_model": {
          "file_path": "src/backend/base/langflow/components/amazon/amazon_bedrock_model.py",
          "classes": [
            {
              "name": "AmazonBedrockComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.models.aws_constants.AWS_REGIONS",
            "langflow.base.models.aws_constants.AWS_MODEL_IDs",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.LanguageModel",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.io.DictInput",
            "langflow.io.DropdownInput",
            "langchain_aws.ChatBedrock",
            "boto3"
          ],
          "docstring": null
        }
      }
    },
    "baidu": {
      "description": "Components in baidu category",
      "base_path": "src/backend/base/langflow/components/baidu",
      "components": {
        "baidu_qianfan_chat": {
          "file_path": "src/backend/base/langflow/components/baidu/baidu_qianfan_chat.py",
          "classes": [
            {
              "name": "QianfanChatEndpointComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain_community.chat_models.baidu_qianfan_endpoint.QianfanChatEndpoint",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.constants.LanguageModel",
            "langflow.io.DropdownInput",
            "langflow.io.FloatInput",
            "langflow.io.MessageTextInput",
            "langflow.io.SecretStrInput"
          ],
          "docstring": null
        }
      }
    },
    "homeassistant": {
      "description": "Components in homeassistant category",
      "base_path": "src/backend/base/langflow/components/homeassistant",
      "components": {
        "list_home_assistant_states": {
          "file_path": "src/backend/base/langflow/components/homeassistant/list_home_assistant_states.py",
          "classes": [
            {
              "name": "ListHomeAssistantStates",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "run_model",
                  "docstring": "Execute the LangFlow component.\n\nUses self.ha_token, self.base_url, self.filter_domain as entered in the UI.\nTriggered when 'Run' is clicked directly without an agent."
                },
                {
                  "name": "build_tool",
                  "docstring": "Build a tool object to be used by the agent.\n\nThe agent can only pass 'filter_domain' as a parameter.\n'ha_token' and 'base_url' are not exposed (stored as self attributes)."
                },
                {
                  "name": "_list_states_for_tool",
                  "docstring": "Execute the tool when called by the agent.\n\n'ha_token' and 'base_url' are stored in self (not exposed)."
                },
                {
                  "name": "_list_states",
                  "docstring": "Call the Home Assistant /api/states endpoint."
                },
                {
                  "name": "_make_data_response",
                  "docstring": "Format the response into a Data object."
                }
              ],
              "attributes": [
                "icon",
                "inputs"
              ]
            },
            {
              "name": "ToolSchema",
              "bases": [
                "BaseModel"
              ],
              "docstring": "Parameters to be passed by the agent: filter_domain only.",
              "methods": [],
              "attributes": []
            }
          ],
          "imports": [
            "json",
            "typing.Any",
            "requests",
            "langchain.tools.StructuredTool",
            "pydantic.BaseModel",
            "pydantic.Field",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "home_assistant_control": {
          "file_path": "src/backend/base/langflow/components/homeassistant/home_assistant_control.py",
          "classes": [
            {
              "name": "HomeAssistantControl",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": "This tool is used to control Home Assistant devices.\n\nA very simple tool to control Home Assistant devices.\n- The agent only needs to provide action (turn_on, turn_off, toggle) + entity_id (e.g., switch.xxx, light.xxx).\n- The domain (e.g., 'switch', 'light') is automatically extracted from entity_id.",
              "methods": [
                {
                  "name": "run_model",
                  "docstring": "Used when the 'Run' button is clicked in LangFlow.\n\n- Uses default_action and default_entity_id entered in the UI."
                },
                {
                  "name": "build_tool",
                  "docstring": "Returns a tool to be used by the agent (LLM).\n\n- The agent can only pass action and entity_id as arguments."
                },
                {
                  "name": "_control_device_for_tool",
                  "docstring": "Function called by the agent.\n\n-> Internally calls _control_device."
                },
                {
                  "name": "_control_device",
                  "docstring": "Actual logic to call the Home Assistant service.\n\nThe domain is extracted from the beginning of the entity_id.\nExample: entity_id=\"switch.unknown_switch_3\" -> domain=\"switch\"."
                },
                {
                  "name": "_make_data_response",
                  "docstring": "Returns a response in the LangFlow Data format."
                }
              ],
              "attributes": [
                "inputs"
              ]
            },
            {
              "name": "ToolSchema",
              "bases": [
                "BaseModel"
              ],
              "docstring": "Parameters to be passed by the agent: action, entity_id only.",
              "methods": [],
              "attributes": []
            }
          ],
          "imports": [
            "json",
            "typing.Any",
            "requests",
            "langchain.tools.StructuredTool",
            "pydantic.BaseModel",
            "pydantic.Field",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        }
      }
    },
    "openrouter": {
      "description": "Components in openrouter category",
      "base_path": "src/backend/base/langflow/components/openrouter",
      "components": {
        "openrouter": {
          "file_path": "src/backend/base/langflow/components/openrouter/openrouter.py",
          "classes": [
            {
              "name": "OpenRouterComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": "OpenRouter API component for language models.",
              "methods": [
                {
                  "name": "fetch_models",
                  "docstring": "Fetch available models from OpenRouter API and organize them by provider."
                },
                {
                  "name": "build_model",
                  "docstring": "Build and return the OpenRouter language model."
                },
                {
                  "name": "_get_exception_message",
                  "docstring": "Get a message from an OpenRouter exception.\n\nArgs:\n    e (Exception): The exception to get the message from.\n\nReturns:\n    str | None: The message from the exception, or None if no specific message can be extracted."
                },
                {
                  "name": "update_build_config",
                  "docstring": "Update build configuration based on field updates."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "collections.defaultdict",
            "typing.Any",
            "httpx",
            "langchain_openai.ChatOpenAI",
            "pydantic.v1.SecretStr",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.LanguageModel",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.SliderInput",
            "langflow.inputs.inputs.StrInput",
            "openai.BadRequestError"
          ],
          "docstring": null
        }
      }
    },
    "duckduckgo": {
      "description": "Components in duckduckgo category",
      "base_path": "src/backend/base/langflow/components/duckduckgo",
      "components": {
        "duck_duck_go_search_run": {
          "file_path": "src/backend/base/langflow/components/duckduckgo/duck_duck_go_search_run.py",
          "classes": [
            {
              "name": "DuckDuckGoSearchComponent",
              "bases": [
                "Component"
              ],
              "docstring": "Component for performing web searches using DuckDuckGo.",
              "methods": [
                {
                  "name": "_build_wrapper",
                  "docstring": "Build the DuckDuckGo search wrapper."
                },
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "fetch_content",
                  "docstring": "Execute the search and return results as Data objects."
                },
                {
                  "name": "fetch_content_dataframe",
                  "docstring": "Convert the search results to a DataFrame.\n\nReturns:\n    DataFrame: A DataFrame containing the search results."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain_community.tools.DuckDuckGoSearchRun",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        }
      }
    },
    "langchain_utilities": {
      "description": "Components in langchain_utilities category",
      "base_path": "src/backend/base/langflow/components/langchain_utilities",
      "components": {
        "language_recursive": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/language_recursive.py",
          "classes": [
            {
              "name": "LanguageRecursiveTextSplitterComponent",
              "bases": [
                "LCTextSplitterComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_data_input",
                  "docstring": null
                },
                {
                  "name": "build_text_splitter",
                  "docstring": null
                }
              ],
              "attributes": [
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "langchain_text_splitters.Language",
            "langchain_text_splitters.RecursiveCharacterTextSplitter",
            "langchain_text_splitters.TextSplitter",
            "langflow.base.textsplitters.model.LCTextSplitterComponent",
            "langflow.inputs.inputs.DataInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.IntInput"
          ],
          "docstring": null
        },
        "llm_math": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/llm_math.py",
          "classes": [
            {
              "name": "LLMMathChainComponent",
              "bases": [
                "LCChainComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "invoke_chain",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain.chains.LLMMathChain",
            "langflow.base.chains.model.LCChainComponent",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.schema.message.Message",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "conversation": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/conversation.py",
          "classes": [
            {
              "name": "ConversationChainComponent",
              "bases": [
                "LCChainComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "invoke_chain",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain.chains.ConversationChain",
            "langflow.base.chains.model.LCChainComponent",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        },
        "openapi": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/openapi.py",
          "classes": [
            {
              "name": "OpenAPIAgentComponent",
              "bases": [
                "LCAgentComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_agent",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "pathlib.Path",
            "yaml",
            "langchain.agents.AgentExecutor",
            "langchain_community.agent_toolkits.create_openapi_agent",
            "langchain_community.agent_toolkits.openapi.toolkit.OpenAPIToolkit",
            "langchain_community.tools.json.tool.JsonSpec",
            "langchain_community.utilities.requests.TextRequestsWrapper",
            "langflow.base.agents.agent.LCAgentComponent",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.FileInput",
            "langflow.inputs.inputs.HandleInput"
          ],
          "docstring": null
        },
        "retrieval_qa": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/retrieval_qa.py",
          "classes": [
            {
              "name": "RetrievalQAComponent",
              "bases": [
                "LCChainComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "invoke_chain",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.cast",
            "langchain.chains.RetrievalQA",
            "langflow.base.chains.model.LCChainComponent",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        },
        "natural_language": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/natural_language.py",
          "classes": [
            {
              "name": "NaturalLanguageTextSplitterComponent",
              "bases": [
                "LCTextSplitterComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_data_input",
                  "docstring": null
                },
                {
                  "name": "build_text_splitter",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "langchain_text_splitters.NLTKTextSplitter",
            "langchain_text_splitters.TextSplitter",
            "langflow.base.textsplitters.model.LCTextSplitterComponent",
            "langflow.inputs.inputs.DataInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.utils.util.unescape_string"
          ],
          "docstring": null
        },
        "openai_tools": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/openai_tools.py",
          "classes": [
            {
              "name": "OpenAIToolsAgentComponent",
              "bases": [
                "LCToolsAgentComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_chat_history_data",
                  "docstring": null
                },
                {
                  "name": "create_agent_runnable",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain.agents.create_openai_tools_agent",
            "langchain_core.prompts.ChatPromptTemplate",
            "langchain_core.prompts.HumanMessagePromptTemplate",
            "langchain_core.prompts.PromptTemplate",
            "langflow.base.agents.agent.LCToolsAgentComponent",
            "langflow.inputs.inputs.DataInput",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "sql_generator": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/sql_generator.py",
          "classes": [
            {
              "name": "SQLGeneratorComponent",
              "bases": [
                "LCChainComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "invoke_chain",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.TYPE_CHECKING",
            "langchain.chains.create_sql_query_chain",
            "langchain_core.prompts.PromptTemplate",
            "langflow.base.chains.model.LCChainComponent",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.schema.message.Message",
            "langflow.template.field.base.Output",
            "langchain_core.runnables.Runnable"
          ],
          "docstring": null
        },
        "llm_checker": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/llm_checker.py",
          "classes": [
            {
              "name": "LLMCheckerChainComponent",
              "bases": [
                "LCChainComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "invoke_chain",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain.chains.LLMCheckerChain",
            "langflow.base.chains.model.LCChainComponent",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        },
        "csv_agent": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/csv_agent.py",
          "classes": [
            {
              "name": "CSVAgentComponent",
              "bases": [
                "LCAgentComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "_path",
                  "docstring": null
                },
                {
                  "name": "build_agent_response",
                  "docstring": null
                },
                {
                  "name": "build_agent",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain_experimental.agents.agent_toolkits.csv.base.create_csv_agent",
            "langflow.base.agents.agent.LCAgentComponent",
            "langflow.field_typing.AgentExecutor",
            "langflow.inputs.inputs.DictInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.FileInput",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.schema.message.Message",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "self_query": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/self_query.py",
          "classes": [
            {
              "name": "SelfQueryRetrieverComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "retrieve_documents",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain.chains.query_constructor.base.AttributeInfo",
            "langchain.retrievers.self_query.base.SelfQueryRetriever",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        },
        "html_link_extractor": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/html_link_extractor.py",
          "classes": [
            {
              "name": "HtmlLinkExtractorComponent",
              "bases": [
                "LCDocumentTransformerComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_data_input",
                  "docstring": null
                },
                {
                  "name": "build_document_transformer",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "langchain_community.graph_vectorstores.extractors.HtmlLinkExtractor",
            "langchain_community.graph_vectorstores.extractors.LinkExtractorTransformer",
            "langchain_core.documents.BaseDocumentTransformer",
            "langflow.base.document_transformers.model.LCDocumentTransformerComponent",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DataInput",
            "langflow.inputs.inputs.StrInput"
          ],
          "docstring": null
        },
        "sql_database": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/sql_database.py",
          "classes": [
            {
              "name": "SQLDatabaseComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "clean_up_uri",
                  "docstring": null
                },
                {
                  "name": "build_sqldatabase",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain_community.utilities.sql_database.SQLDatabase",
            "sqlalchemy.create_engine",
            "sqlalchemy.pool.StaticPool",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.Output",
            "langflow.io.StrInput"
          ],
          "docstring": null
        },
        "vector_store_info": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/vector_store_info.py",
          "classes": [
            {
              "name": "VectorStoreInfoComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_info",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain.agents.agent_toolkits.vectorstore.toolkit.VectorStoreInfo",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "xml_agent": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/xml_agent.py",
          "classes": [
            {
              "name": "XMLAgentComponent",
              "bases": [
                "LCToolsAgentComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_chat_history_data",
                  "docstring": null
                },
                {
                  "name": "create_agent_runnable",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "beta",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain.agents.create_xml_agent",
            "langchain_core.prompts.ChatPromptTemplate",
            "langchain_core.prompts.HumanMessagePromptTemplate",
            "langchain_core.prompts.PromptTemplate",
            "langflow.base.agents.agent.LCToolsAgentComponent",
            "langflow.inputs.inputs.DataInput",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "vector_store_router": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/vector_store_router.py",
          "classes": [
            {
              "name": "VectorStoreRouterAgentComponent",
              "bases": [
                "LCAgentComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_agent",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain.agents.AgentExecutor",
            "langchain.agents.create_vectorstore_router_agent",
            "langchain.agents.agent_toolkits.vectorstore.toolkit.VectorStoreRouterToolkit",
            "langflow.base.agents.agent.LCAgentComponent",
            "langflow.inputs.inputs.HandleInput"
          ],
          "docstring": null
        },
        "runnable_executor": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/runnable_executor.py",
          "classes": [
            {
              "name": "RunnableExecComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_output",
                  "docstring": "Retrieves the output value from the given result dictionary based on the specified input and output keys.\n\nArgs:\n    result (dict): The result dictionary containing the output value.\n    input_key (str): The key used to retrieve the input value from the result dictionary.\n    output_key (str): The key used to retrieve the output value from the result dictionary.\n\nReturns:\n    tuple: A tuple containing the output value and the status message."
                },
                {
                  "name": "get_input_dict",
                  "docstring": "Returns a dictionary containing the input key-value pair for the given runnable.\n\nArgs:\n    runnable: The runnable object.\n    input_key: The key for the input value.\n    input_value: The value for the input key.\n\nReturns:\n    input_dict: A dictionary containing the input key-value pair.\n    status: A status message indicating if the input key is not in the runnable's input keys."
                }
              ],
              "attributes": [
                "description",
                "display_name",
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain.agents.AgentExecutor",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.schema.message.Message",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "language_semantic": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/language_semantic.py",
          "classes": [
            {
              "name": "SemanticTextSplitterComponent",
              "bases": [
                "LCTextSplitterComponent"
              ],
              "docstring": "Split text into semantically meaningful chunks using semantic similarity.",
              "methods": [
                {
                  "name": "_docs_to_data",
                  "docstring": "Convert a list of Document objects to Data objects."
                },
                {
                  "name": "split_text",
                  "docstring": "Split the input data into semantically meaningful chunks."
                }
              ],
              "attributes": [
                "documentation",
                "beta",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain.docstore.document.Document",
            "langchain_experimental.text_splitter.SemanticChunker",
            "langflow.base.textsplitters.model.LCTextSplitterComponent",
            "langflow.io.DropdownInput",
            "langflow.io.FloatInput",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "character": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/character.py",
          "classes": [
            {
              "name": "CharacterTextSplitterComponent",
              "bases": [
                "LCTextSplitterComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_data_input",
                  "docstring": null
                },
                {
                  "name": "build_text_splitter",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "langchain_text_splitters.CharacterTextSplitter",
            "langchain_text_splitters.TextSplitter",
            "langflow.base.textsplitters.model.LCTextSplitterComponent",
            "langflow.inputs.inputs.DataInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.utils.util.unescape_string"
          ],
          "docstring": null
        },
        "sql": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/sql.py",
          "classes": [
            {
              "name": "SQLAgentComponent",
              "bases": [
                "LCAgentComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_agent",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain.agents.AgentExecutor",
            "langchain_community.agent_toolkits.SQLDatabaseToolkit",
            "langchain_community.agent_toolkits.sql.base.create_sql_agent",
            "langchain_community.utilities.SQLDatabase",
            "langflow.base.agents.agent.LCAgentComponent",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "recursive_character": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/recursive_character.py",
          "classes": [
            {
              "name": "RecursiveCharacterTextSplitterComponent",
              "bases": [
                "LCTextSplitterComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_data_input",
                  "docstring": null
                },
                {
                  "name": "build_text_splitter",
                  "docstring": null
                }
              ],
              "attributes": [
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "langchain_text_splitters.RecursiveCharacterTextSplitter",
            "langchain_text_splitters.TextSplitter",
            "langflow.base.textsplitters.model.LCTextSplitterComponent",
            "langflow.inputs.inputs.DataInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.utils.util.unescape_string"
          ],
          "docstring": null
        },
        "fake_embeddings": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/fake_embeddings.py",
          "classes": [
            {
              "name": "FakeEmbeddingsComponent",
              "bases": [
                "LCEmbeddingsModel"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_embeddings",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain_community.embeddings.FakeEmbeddings",
            "langflow.base.embeddings.model.LCEmbeddingsModel",
            "langflow.field_typing.Embeddings",
            "langflow.io.IntInput"
          ],
          "docstring": null
        },
        "json_agent": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/json_agent.py",
          "classes": [
            {
              "name": "JsonAgentComponent",
              "bases": [
                "LCAgentComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_agent",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "pathlib.Path",
            "yaml",
            "langchain.agents.AgentExecutor",
            "langchain_community.agent_toolkits.create_json_agent",
            "langchain_community.agent_toolkits.json.toolkit.JsonToolkit",
            "langchain_community.tools.json.tool.JsonSpec",
            "langflow.base.agents.agent.LCAgentComponent",
            "langflow.inputs.inputs.FileInput",
            "langflow.inputs.inputs.HandleInput"
          ],
          "docstring": null
        },
        "spider": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/spider.py",
          "classes": [
            {
              "name": "SpiderTool",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "crawl",
                  "docstring": null
                }
              ],
              "attributes": [
                "inputs",
                "outputs"
              ]
            },
            {
              "name": "SpiderToolError",
              "bases": [
                "Exception"
              ],
              "docstring": "SpiderTool error.",
              "methods": [],
              "attributes": []
            }
          ],
          "imports": [
            "spider.spider.Spider",
            "langflow.base.langchain_utilities.spider_constants.MODES",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.BoolInput",
            "langflow.io.DictInput",
            "langflow.io.DropdownInput",
            "langflow.io.IntInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "tool_calling": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/tool_calling.py",
          "classes": [
            {
              "name": "ToolCallingAgentComponent",
              "bases": [
                "LCToolsAgentComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_chat_history_data",
                  "docstring": null
                },
                {
                  "name": "create_agent_runnable",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain.agents.create_tool_calling_agent",
            "langchain_core.prompts.ChatPromptTemplate",
            "langflow.base.agents.agent.LCToolsAgentComponent",
            "langflow.inputs.inputs.DataInput",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "langchain_hub": {
          "file_path": "src/backend/base/langflow/components/langchain_utilities/langchain_hub.py",
          "classes": [
            {
              "name": "LangChainHubPromptComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "update_build_config",
                  "docstring": null
                },
                {
                  "name": "_fetch_langchain_hub_template",
                  "docstring": null
                }
              ],
              "attributes": [
                "beta",
                "icon",
                "trace_type",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "re",
            "langchain_core.prompts.HumanMessagePromptTemplate",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.DefaultPromptField",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.StrInput",
            "langflow.io.Output",
            "langflow.schema.message.Message",
            "langchain.hub"
          ],
          "docstring": null
        }
      }
    },
    "aiml": {
      "description": "Components in aiml category",
      "base_path": "src/backend/base/langflow/components/aiml",
      "components": {
        "aiml": {
          "file_path": "src/backend/base/langflow/components/aiml/aiml.py",
          "classes": [
            {
              "name": "AIMLModelComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "update_build_config",
                  "docstring": null
                },
                {
                  "name": "build_model",
                  "docstring": null
                },
                {
                  "name": "_get_exception_message",
                  "docstring": "Get a message from an OpenAI exception.\n\nArgs:\n    e (Exception): The exception to get the message from.\n\nReturns:\n    str: The message from the exception."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "documentation",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain_openai.ChatOpenAI",
            "pydantic.v1.SecretStr",
            "typing_extensions.override",
            "langflow.base.models.aiml_constants.AimlModels",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.LanguageModel",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.inputs.inputs.DictInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.SliderInput",
            "langflow.inputs.inputs.StrInput",
            "openai.error.BadRequestError"
          ],
          "docstring": null
        },
        "aiml_embeddings": {
          "file_path": "src/backend/base/langflow/components/aiml/aiml_embeddings.py",
          "classes": [
            {
              "name": "AIMLEmbeddingsComponent",
              "bases": [
                "LCEmbeddingsModel"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_embeddings",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.embeddings.aiml_embeddings.AIMLEmbeddingsImpl",
            "langflow.base.embeddings.model.LCEmbeddingsModel",
            "langflow.field_typing.Embeddings",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.io.SecretStrInput"
          ],
          "docstring": null
        }
      }
    },
    "redis": {
      "description": "Components in redis category",
      "base_path": "src/backend/base/langflow/components/redis",
      "components": {
        "redis": {
          "file_path": "src/backend/base/langflow/components/redis/redis.py",
          "classes": [
            {
              "name": "RedisIndexChatMemory",
              "bases": [
                "LCChatMemoryComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_message_history",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "urllib.parse",
            "langchain_community.chat_message_histories.redis.RedisChatMessageHistory",
            "langflow.base.memory.model.LCChatMemoryComponent",
            "langflow.field_typing.constants.Memory",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.StrInput"
          ],
          "docstring": null
        }
      }
    },
    "azure": {
      "description": "Components in azure category",
      "base_path": "src/backend/base/langflow/components/azure",
      "components": {
        "azure_openai_embeddings": {
          "file_path": "src/backend/base/langflow/components/azure/azure_openai_embeddings.py",
          "classes": [
            {
              "name": "AzureOpenAIEmbeddingsComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_embeddings",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "name",
                "API_VERSION_OPTIONS",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain_openai.AzureOpenAIEmbeddings",
            "langflow.base.models.model.LCModelComponent",
            "langflow.base.models.openai_constants.OPENAI_EMBEDDING_MODEL_NAMES",
            "langflow.field_typing.Embeddings",
            "langflow.io.DropdownInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput"
          ],
          "docstring": null
        },
        "azure_openai": {
          "file_path": "src/backend/base/langflow/components/azure/azure_openai.py",
          "classes": [
            {
              "name": "AzureChatOpenAIComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "beta",
                "icon",
                "name",
                "AZURE_OPENAI_API_VERSIONS",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain_openai.AzureChatOpenAI",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.LanguageModel",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.io.DropdownInput",
            "langflow.io.IntInput",
            "langflow.io.SecretStrInput",
            "langflow.io.SliderInput"
          ],
          "docstring": null
        }
      }
    },
    "agentql": {
      "description": "Components in agentql category",
      "base_path": "src/backend/base/langflow/components/agentql",
      "components": {
        "agentql_api": {
          "file_path": "src/backend/base/langflow/components/agentql/agentql_api.py",
          "classes": [
            {
              "name": "AgentQL",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_output",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "httpx",
            "loguru.logger",
            "langflow.custom.custom_component.component.Component",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        }
      }
    },
    "firecrawl": {
      "description": "Components in firecrawl category",
      "base_path": "src/backend/base/langflow/components/firecrawl",
      "components": {
        "firecrawl_map_api": {
          "file_path": "src/backend/base/langflow/components/firecrawl/firecrawl_map_api.py",
          "classes": [
            {
              "name": "FirecrawlMapApi",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "map",
                  "docstring": null
                }
              ],
              "attributes": [
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.io.BoolInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data",
            "firecrawl.FirecrawlApp"
          ],
          "docstring": null
        },
        "firecrawl_crawl_api": {
          "file_path": "src/backend/base/langflow/components/firecrawl/firecrawl_crawl_api.py",
          "classes": [
            {
              "name": "FirecrawlCrawlApi",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "crawl",
                  "docstring": null
                }
              ],
              "attributes": [
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "uuid",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.DataInput",
            "langflow.io.IntInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data",
            "firecrawl.FirecrawlApp"
          ],
          "docstring": null
        },
        "firecrawl_extract_api": {
          "file_path": "src/backend/base/langflow/components/firecrawl/firecrawl_extract_api.py",
          "classes": [
            {
              "name": "FirecrawlExtractApi",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "extract",
                  "docstring": null
                }
              ],
              "attributes": [
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "loguru.logger",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.BoolInput",
            "langflow.io.DataInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data",
            "firecrawl.FirecrawlApp"
          ],
          "docstring": null
        },
        "firecrawl_scrape_api": {
          "file_path": "src/backend/base/langflow/components/firecrawl/firecrawl_scrape_api.py",
          "classes": [
            {
              "name": "FirecrawlScrapeApi",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "scrape",
                  "docstring": null
                }
              ],
              "attributes": [
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.io.DataInput",
            "langflow.io.IntInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data",
            "firecrawl.FirecrawlApp"
          ],
          "docstring": null
        }
      }
    },
    "jigsawstack": {
      "description": "Components in jigsawstack category",
      "base_path": "src/backend/base/langflow/components/jigsawstack",
      "components": {
        "image_generation": {
          "file_path": "src/backend/base/langflow/components/jigsawstack/image_generation.py",
          "classes": [
            {
              "name": "JigsawStackImageGenerationComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "generate_image",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.io.DropdownInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data",
            "jigsawstack.JigsawStack",
            "jigsawstack.JigsawStackError"
          ],
          "docstring": null
        },
        "ai_web_search": {
          "file_path": "src/backend/base/langflow/components/jigsawstack/ai_web_search.py",
          "classes": [
            {
              "name": "JigsawStackAIWebSearchComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "search",
                  "docstring": null
                },
                {
                  "name": "get_content_text",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.Output",
            "langflow.io.QueryInput",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data",
            "langflow.schema.message.Message",
            "jigsawstack.JigsawStack",
            "jigsawstack.JigsawStackError",
            "jigsawstack.JigsawStack",
            "jigsawstack.JigsawStackError"
          ],
          "docstring": null
        },
        "nsfw": {
          "file_path": "src/backend/base/langflow/components/jigsawstack/nsfw.py",
          "classes": [
            {
              "name": "JigsawStackNSFWComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "detect_nsfw",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data",
            "jigsawstack.JigsawStack",
            "jigsawstack.JigsawStackError"
          ],
          "docstring": null
        },
        "text_translate": {
          "file_path": "src/backend/base/langflow/components/jigsawstack/text_translate.py",
          "classes": [
            {
              "name": "JigsawStackTextTranslateComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "translation",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data",
            "jigsawstack.JigsawStack",
            "jigsawstack.JigsawStackError"
          ],
          "docstring": null
        },
        "sentiment": {
          "file_path": "src/backend/base/langflow/components/jigsawstack/sentiment.py",
          "classes": [
            {
              "name": "JigsawStackSentimentComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "analyze_sentiment",
                  "docstring": null
                },
                {
                  "name": "get_sentiment_text",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data",
            "langflow.schema.message.Message",
            "jigsawstack.JigsawStack",
            "jigsawstack.JigsawStackError",
            "jigsawstack.JigsawStack",
            "jigsawstack.JigsawStackError"
          ],
          "docstring": null
        },
        "text_to_sql": {
          "file_path": "src/backend/base/langflow/components/jigsawstack/text_to_sql.py",
          "classes": [
            {
              "name": "JigsawStackTextToSQLComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "generate_sql",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.QueryInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data",
            "jigsawstack.JigsawStack",
            "jigsawstack.JigsawStackError"
          ],
          "docstring": null
        },
        "ai_scrape": {
          "file_path": "src/backend/base/langflow/components/jigsawstack/ai_scrape.py",
          "classes": [
            {
              "name": "JigsawStackAIScraperComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "scrape",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data",
            "jigsawstack.JigsawStack",
            "jigsawstack.JigsawStackError"
          ],
          "docstring": null
        },
        "vocr": {
          "file_path": "src/backend/base/langflow/components/jigsawstack/vocr.py",
          "classes": [
            {
              "name": "JigsawStackVOCRComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "vocr",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data",
            "jigsawstack.JigsawStack",
            "jigsawstack.JigsawStackError"
          ],
          "docstring": null
        },
        "file_read": {
          "file_path": "src/backend/base/langflow/components/jigsawstack/file_read.py",
          "classes": [
            {
              "name": "JigsawStackFileReadComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "read_and_save_file",
                  "docstring": "Read file from JigsawStack and save to temp file, return file path."
                },
                {
                  "name": "_detect_file_extension",
                  "docstring": "Detect file extension based on content headers."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "tempfile",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data",
            "jigsawstack.JigsawStack",
            "jigsawstack.JigsawStackError"
          ],
          "docstring": null
        },
        "object_detection": {
          "file_path": "src/backend/base/langflow/components/jigsawstack/object_detection.py",
          "classes": [
            {
              "name": "JigsawStackObjectDetectionComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "detect_objects",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data",
            "jigsawstack.JigsawStack",
            "jigsawstack.JigsawStackError"
          ],
          "docstring": null
        },
        "file_upload": {
          "file_path": "src/backend/base/langflow/components/jigsawstack/file_upload.py",
          "classes": [
            {
              "name": "JigsawStackFileUploadComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "upload_file",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "pathlib.Path",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.BoolInput",
            "langflow.io.FileInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data",
            "jigsawstack.JigsawStack",
            "jigsawstack.JigsawStackError"
          ],
          "docstring": null
        }
      }
    },
    "google": {
      "description": "Components in google category",
      "base_path": "src/backend/base/langflow/components/google",
      "components": {
        "google_generative_ai_embeddings": {
          "file_path": "src/backend/base/langflow/components/google/google_generative_ai_embeddings.py",
          "classes": [
            {
              "name": "GoogleGenerativeAIEmbeddingsComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_embeddings",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            },
            {
              "name": "HotaGoogleGenerativeAIEmbeddings",
              "bases": [
                "GoogleGenerativeAIEmbeddings"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "__init__",
                  "docstring": null
                },
                {
                  "name": "embed_documents",
                  "docstring": "Embed a list of strings.\n\nGoogle Generative AI currently sets a max batch size of 100 strings.\n\nArgs:\n    texts: List[str] The list of strings to embed.\n    batch_size: [int] The batch size of embeddings to send to the model\n    task_type: task_type (https://ai.google.dev/api/rest/v1/TaskType)\n    titles: An optional list of titles for texts provided.\n    Only applicable when TaskType is RETRIEVAL_DOCUMENT.\n    output_dimensionality: Optional reduced dimension for the output embedding.\n    https://ai.google.dev/api/rest/v1/models/batchEmbedContents#EmbedContentRequest\nReturns:\n    List of embeddings, one for each text."
                },
                {
                  "name": "embed_query",
                  "docstring": "Embed a text.\n\nArgs:\n    text: The text to embed.\n    task_type: task_type (https://ai.google.dev/api/rest/v1/TaskType)\n    title: An optional title for the text.\n    Only applicable when TaskType is RETRIEVAL_DOCUMENT.\n    output_dimensionality: Optional reduced dimension for the output embedding.\n    https://ai.google.dev/api/rest/v1/models/batchEmbedContents#EmbedContentRequest\n\nReturns:\n    Embedding for the text."
                }
              ],
              "attributes": []
            }
          ],
          "imports": [
            "google.ai.generativelanguage_v1beta.types.BatchEmbedContentsRequest",
            "langchain_core.embeddings.Embeddings",
            "langchain_google_genai.GoogleGenerativeAIEmbeddings",
            "langchain_google_genai._common.GoogleGenerativeAIError",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput"
          ],
          "docstring": null
        },
        "google_bq_sql_executor": {
          "file_path": "src/backend/base/langflow/components/google/google_bq_sql_executor.py",
          "classes": [
            {
              "name": "BigQueryExecutorComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "_clean_sql_query",
                  "docstring": "Clean SQL query by removing surrounding quotes and whitespace.\n\nAlso extracts SQL statements from text that might contain other content.\n\nArgs:\n    query: The SQL query to clean\n\nReturns:\n    The cleaned SQL query"
                },
                {
                  "name": "execute_sql",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "json",
            "re",
            "pathlib.Path",
            "google.auth.exceptions.RefreshError",
            "google.cloud.bigquery",
            "google.oauth2.service_account.Credentials",
            "langflow.custom.Component",
            "langflow.io.BoolInput",
            "langflow.io.FileInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.dataframe.DataFrame"
          ],
          "docstring": null
        },
        "google_search_api_core": {
          "file_path": "src/backend/base/langflow/components/google/google_search_api_core.py",
          "classes": [
            {
              "name": "GoogleSearchAPICore",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "search_google",
                  "docstring": "Search Google using the provided query."
                },
                {
                  "name": "build",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain_google_community.GoogleSearchAPIWrapper",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.IntInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.dataframe.DataFrame"
          ],
          "docstring": null
        },
        "google_drive_search": {
          "file_path": "src/backend/base/langflow/components/google/google_drive_search.py",
          "classes": [
            {
              "name": "GoogleDriveSearchComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "generate_query_string",
                  "docstring": null
                },
                {
                  "name": "on_inputs_changed",
                  "docstring": null
                },
                {
                  "name": "generate_file_url",
                  "docstring": "Generates the appropriate Google Drive URL for a file based on its MIME type."
                },
                {
                  "name": "search_files",
                  "docstring": null
                },
                {
                  "name": "search_doc_ids",
                  "docstring": null
                },
                {
                  "name": "search_doc_urls",
                  "docstring": null
                },
                {
                  "name": "search_doc_titles",
                  "docstring": null
                },
                {
                  "name": "search_data",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "json",
            "google.oauth2.credentials.Credentials",
            "googleapiclient.discovery.build",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "google_generative_ai": {
          "file_path": "src/backend/base/langflow/components/google/google_generative_ai.py",
          "classes": [
            {
              "name": "GoogleGenerativeAIComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_model",
                  "docstring": null
                },
                {
                  "name": "get_models",
                  "docstring": null
                },
                {
                  "name": "update_build_config",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "requests",
            "loguru.logger",
            "pydantic.v1.SecretStr",
            "langflow.base.models.google_generative_ai_constants.GOOGLE_GENERATIVE_AI_MODELS",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.LanguageModel",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.FloatInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.SliderInput",
            "langflow.schema.dotdict.dotdict",
            "langchain_google_genai.ChatGoogleGenerativeAI",
            "google.generativeai",
            "langchain_google_genai.chat_models.ChatGoogleGenerativeAI"
          ],
          "docstring": null
        },
        "gmail": {
          "file_path": "src/backend/base/langflow/components/google/gmail.py",
          "classes": [
            {
              "name": "GmailLoaderComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "load_emails",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            },
            {
              "name": "CustomGMailLoader",
              "bases": [
                "GMailLoader"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "__init__",
                  "docstring": null
                },
                {
                  "name": "clean_message_content",
                  "docstring": null
                },
                {
                  "name": "_extract_email_content",
                  "docstring": null
                },
                {
                  "name": "_get_message_data",
                  "docstring": null
                },
                {
                  "name": "lazy_load",
                  "docstring": null
                }
              ],
              "attributes": []
            }
          ],
          "imports": [
            "base64",
            "json",
            "re",
            "collections.abc.Iterator",
            "json.decoder.JSONDecodeError",
            "typing.Any",
            "google.auth.exceptions.RefreshError",
            "google.oauth2.credentials.Credentials",
            "googleapiclient.discovery.build",
            "langchain_core.chat_sessions.ChatSession",
            "langchain_core.messages.HumanMessage",
            "langchain_google_community.gmail.loader.GMailLoader",
            "loguru.logger",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "google_serper_api_core": {
          "file_path": "src/backend/base/langflow/components/google/google_serper_api_core.py",
          "classes": [
            {
              "name": "GoogleSerperAPICore",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "search_serper",
                  "docstring": null
                },
                {
                  "name": "text_search_serper",
                  "docstring": null
                },
                {
                  "name": "_build_wrapper",
                  "docstring": null
                },
                {
                  "name": "build",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain_community.utilities.google_serper.GoogleSerperAPIWrapper",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.IntInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.dataframe.DataFrame",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        },
        "google_oauth_token": {
          "file_path": "src/backend/base/langflow/components/google/google_oauth_token.py",
          "classes": [
            {
              "name": "GoogleOAuthToken",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "validate_scopes",
                  "docstring": null
                },
                {
                  "name": "build_output",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "json",
            "re",
            "pathlib.Path",
            "google.auth.transport.requests.Request",
            "google.oauth2.credentials.Credentials",
            "google_auth_oauthlib.flow.InstalledAppFlow",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.FileInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "google_drive": {
          "file_path": "src/backend/base/langflow/components/google/google_drive.py",
          "classes": [
            {
              "name": "GoogleDriveComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "load_documents",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            },
            {
              "name": "CustomGoogleDriveLoader",
              "bases": [
                "GoogleDriveLoader"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "_load_credentials",
                  "docstring": "Load credentials from the provided creds attribute or fallback to the original method."
                }
              ],
              "attributes": []
            },
            {
              "name": "Config",
              "bases": [],
              "docstring": null,
              "methods": [],
              "attributes": [
                "arbitrary_types_allowed"
              ]
            }
          ],
          "imports": [
            "json",
            "json.decoder.JSONDecodeError",
            "google.auth.exceptions.RefreshError",
            "google.oauth2.credentials.Credentials",
            "langchain_google_community.GoogleDriveLoader",
            "langflow.custom.custom_component.component.Component",
            "langflow.helpers.data.docs_to_data",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        }
      }
    },
    "bing": {
      "description": "Components in bing category",
      "base_path": "src/backend/base/langflow/components/bing",
      "components": {
        "bing_search_api": {
          "file_path": "src/backend/base/langflow/components/bing/bing_search_api.py",
          "classes": [
            {
              "name": "BingSearchAPIComponent",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "fetch_content",
                  "docstring": null
                },
                {
                  "name": "fetch_content_dataframe",
                  "docstring": null
                },
                {
                  "name": "build_tool",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.cast",
            "langchain_community.tools.bing_search.BingSearchResults",
            "langchain_community.utilities.BingSearchAPIWrapper",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        }
      }
    },
    "documentloaders": {
      "description": "Components in documentloaders category",
      "base_path": "src/backend/base/langflow/components/documentloaders",
      "components": {}
    },
    "wolframalpha": {
      "description": "Components in wolframalpha category",
      "base_path": "src/backend/base/langflow/components/wolframalpha",
      "components": {
        "wolfram_alpha_api": {
          "file_path": "src/backend/base/langflow/components/wolframalpha/wolfram_alpha_api.py",
          "classes": [
            {
              "name": "WolframAlphaAPIComponent",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "build_tool",
                  "docstring": null
                },
                {
                  "name": "_build_wrapper",
                  "docstring": null
                },
                {
                  "name": "fetch_content",
                  "docstring": null
                },
                {
                  "name": "fetch_content_dataframe",
                  "docstring": "Convert the WolframAlpha results to a DataFrame.\n\nReturns:\n    DataFrame: A DataFrame containing the query results."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "outputs",
                "inputs",
                "icon"
              ]
            }
          ],
          "imports": [
            "langchain_community.utilities.wolfram_alpha.WolframAlphaAPIWrapper",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame"
          ],
          "docstring": null
        }
      }
    },
    "exa": {
      "description": "Components in exa category",
      "base_path": "src/backend/base/langflow/components/exa",
      "components": {
        "exa_search": {
          "file_path": "src/backend/base/langflow/components/exa/exa_search.py",
          "classes": [
            {
              "name": "ExaSearchToolkit",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_toolkit",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "beta",
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain_core.tools.tool",
            "metaphor_python.Metaphor",
            "langflow.custom.custom_component.component.Component",
            "langflow.field_typing.Tool",
            "langflow.io.BoolInput",
            "langflow.io.IntInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput"
          ],
          "docstring": null
        }
      }
    },
    "cloudflare": {
      "description": "Components in cloudflare category",
      "base_path": "src/backend/base/langflow/components/cloudflare",
      "components": {
        "cloudflare": {
          "file_path": "src/backend/base/langflow/components/cloudflare/cloudflare.py",
          "classes": [
            {
              "name": "CloudflareWorkersAIEmbeddingsComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_embeddings",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain_community.embeddings.cloudflare_workersai.CloudflareWorkersAIEmbeddings",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.Embeddings",
            "langflow.io.BoolInput",
            "langflow.io.DictInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput"
          ],
          "docstring": null
        }
      }
    },
    "groq": {
      "description": "Components in groq category",
      "base_path": "src/backend/base/langflow/components/groq",
      "components": {
        "groq": {
          "file_path": "src/backend/base/langflow/components/groq/groq.py",
          "classes": [
            {
              "name": "GroqModel",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_models",
                  "docstring": null
                },
                {
                  "name": "update_build_config",
                  "docstring": null
                },
                {
                  "name": "build_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "requests",
            "loguru.logger",
            "pydantic.v1.SecretStr",
            "langflow.base.models.groq_constants.GROQ_MODELS",
            "langflow.base.models.groq_constants.TOOL_CALLING_UNSUPPORTED_GROQ_MODELS",
            "langflow.base.models.groq_constants.UNSUPPORTED_GROQ_MODELS",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.LanguageModel",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.SecretStrInput",
            "langflow.io.SliderInput",
            "langchain_groq.ChatGroq",
            "langchain_groq.ChatGroq"
          ],
          "docstring": null
        }
      }
    },
    "novita": {
      "description": "Components in novita category",
      "base_path": "src/backend/base/langflow/components/novita",
      "components": {
        "novita": {
          "file_path": "src/backend/base/langflow/components/novita/novita.py",
          "classes": [
            {
              "name": "NovitaModelComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_models",
                  "docstring": null
                },
                {
                  "name": "update_build_config",
                  "docstring": null
                },
                {
                  "name": "build_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "requests",
            "langchain_openai.ChatOpenAI",
            "pydantic.v1.SecretStr",
            "typing_extensions.override",
            "langflow.base.models.model.LCModelComponent",
            "langflow.base.models.novita_constants.MODEL_NAMES",
            "langflow.field_typing.LanguageModel",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DictInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.SliderInput"
          ],
          "docstring": null
        }
      }
    },
    "docling": {
      "description": "Components in docling category",
      "base_path": "src/backend/base/langflow/components/docling",
      "components": {
        "docling_remote": {
          "file_path": "src/backend/base/langflow/components/docling/docling_remote.py",
          "classes": [
            {
              "name": "DoclingRemoteComponent",
              "bases": [
                "BaseFileComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "process_files",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "trace_type",
                "icon",
                "name",
                "MAX_500_RETRIES",
                "VALID_EXTENSIONS",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "base64",
            "time",
            "concurrent.futures.Future",
            "concurrent.futures.ThreadPoolExecutor",
            "pathlib.Path",
            "typing.Any",
            "httpx",
            "docling_core.types.doc.DoclingDocument",
            "pydantic.ValidationError",
            "langflow.base.data.BaseFileComponent",
            "langflow.inputs.IntInput",
            "langflow.inputs.NestedDictInput",
            "langflow.inputs.StrInput",
            "langflow.inputs.inputs.FloatInput",
            "langflow.schema.Data"
          ],
          "docstring": null
        },
        "chunk_docling_document": {
          "file_path": "src/backend/base/langflow/components/docling/chunk_docling_document.py",
          "classes": [
            {
              "name": "ChunkDoclingDocumentComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "update_build_config",
                  "docstring": null
                },
                {
                  "name": "_docs_to_data",
                  "docstring": null
                },
                {
                  "name": "chunk_documents",
                  "docstring": null
                }
              ],
              "attributes": [
                "documentation",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "json",
            "tiktoken",
            "docling_core.transforms.chunker.BaseChunker",
            "docling_core.transforms.chunker.DocMeta",
            "docling_core.transforms.chunker.hierarchical_chunker.HierarchicalChunker",
            "langflow.base.data.docling_utils.extract_docling_documents",
            "langflow.custom.Component",
            "langflow.io.DropdownInput",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.StrInput",
            "langflow.schema.Data",
            "langflow.schema.DataFrame",
            "docling_core.transforms.chunker.hybrid_chunker.HybridChunker",
            "docling_core.transforms.chunker.tokenizer.huggingface.HuggingFaceTokenizer",
            "docling_core.transforms.chunker.tokenizer.openai.OpenAITokenizer"
          ],
          "docstring": null
        },
        "docling_inline": {
          "file_path": "src/backend/base/langflow/components/docling/docling_inline.py",
          "classes": [
            {
              "name": "DoclingInlineComponent",
              "bases": [
                "BaseFileComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "process_files",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "trace_type",
                "icon",
                "name",
                "VALID_EXTENSIONS",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.data.BaseFileComponent",
            "langflow.inputs.DropdownInput",
            "langflow.schema.Data",
            "docling.datamodel.base_models.ConversionStatus",
            "docling.datamodel.base_models.InputFormat",
            "docling.datamodel.pipeline_options.OcrOptions",
            "docling.datamodel.pipeline_options.PdfPipelineOptions",
            "docling.datamodel.pipeline_options.VlmPipelineOptions",
            "docling.document_converter.DocumentConverter",
            "docling.document_converter.FormatOption",
            "docling.document_converter.PdfFormatOption",
            "docling.models.factories.get_ocr_factory",
            "docling.pipeline.vlm_pipeline.VlmPipeline"
          ],
          "docstring": null
        },
        "export_docling_document": {
          "file_path": "src/backend/base/langflow/components/docling/export_docling_document.py",
          "classes": [
            {
              "name": "ExportDoclingDocumentComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "update_build_config",
                  "docstring": null
                },
                {
                  "name": "export_document",
                  "docstring": null
                },
                {
                  "name": "as_dataframe",
                  "docstring": null
                }
              ],
              "attributes": [
                "documentation",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "docling_core.types.doc.ImageRefMode",
            "langflow.base.data.docling_utils.extract_docling_documents",
            "langflow.custom.Component",
            "langflow.io.DropdownInput",
            "langflow.io.HandleInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.StrInput",
            "langflow.schema.Data",
            "langflow.schema.DataFrame"
          ],
          "docstring": null
        }
      }
    },
    "searchapi": {
      "description": "Components in searchapi category",
      "base_path": "src/backend/base/langflow/components/searchapi",
      "components": {
        "search": {
          "file_path": "src/backend/base/langflow/components/searchapi/search.py",
          "classes": [
            {
              "name": "SearchComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "_build_wrapper",
                  "docstring": null
                },
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "fetch_content",
                  "docstring": null
                },
                {
                  "name": "fetch_content_dataframe",
                  "docstring": "Convert the search results to a DataFrame.\n\nReturns:\n    DataFrame: A DataFrame containing the search results."
                }
              ],
              "attributes": [
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "langchain_community.utilities.searchapi.SearchApiAPIWrapper",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.DictInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame"
          ],
          "docstring": null
        }
      }
    },
    "toolkits": {
      "description": "Components in toolkits category",
      "base_path": "src/backend/base/langflow/components/toolkits",
      "components": {}
    },
    "maritalk": {
      "description": "Components in maritalk category",
      "base_path": "src/backend/base/langflow/components/maritalk",
      "components": {
        "maritalk": {
          "file_path": "src/backend/base/langflow/components/maritalk/maritalk.py",
          "classes": [
            {
              "name": "MaritalkModelComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain_community.chat_models.ChatMaritalk",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.LanguageModel",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.FloatInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.SecretStrInput"
          ],
          "docstring": null
        }
      }
    },
    "youtube": {
      "description": "Components in youtube category",
      "base_path": "src/backend/base/langflow/components/youtube",
      "components": {
        "trending": {
          "file_path": "src/backend/base/langflow/components/youtube/trending.py",
          "classes": [
            {
              "name": "YouTubeTrendingComponent",
              "bases": [
                "Component"
              ],
              "docstring": "A component that retrieves trending videos from YouTube.",
              "methods": [
                {
                  "name": "_format_duration",
                  "docstring": "Formats ISO 8601 duration to readable format."
                },
                {
                  "name": "youtube_client",
                  "docstring": "Context manager for YouTube API client."
                },
                {
                  "name": "get_trending_videos",
                  "docstring": "Retrieves trending videos from YouTube and returns as DataFrame."
                }
              ],
              "attributes": [
                "COUNTRY_CODES",
                "VIDEO_CATEGORIES",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "contextlib.contextmanager",
            "pandas",
            "googleapiclient.discovery.build",
            "googleapiclient.errors.HttpError",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.schema.dataframe.DataFrame",
            "langflow.template.field.base.Output",
            "re",
            "logging"
          ],
          "docstring": null
        },
        "channel": {
          "file_path": "src/backend/base/langflow/components/youtube/channel.py",
          "classes": [
            {
              "name": "YouTubeChannelComponent",
              "bases": [
                "Component"
              ],
              "docstring": "A component that retrieves detailed information about YouTube channels.",
              "methods": [
                {
                  "name": "_extract_channel_id",
                  "docstring": "Extracts the channel ID from various YouTube channel URL formats."
                },
                {
                  "name": "_get_channel_id_by_name",
                  "docstring": "Gets the channel ID using the channel name or custom URL."
                },
                {
                  "name": "_get_channel_playlists",
                  "docstring": "Gets the public playlists for a channel."
                },
                {
                  "name": "get_channel_info",
                  "docstring": "Retrieves channel information and returns it as a DataFrame."
                }
              ],
              "attributes": [
                "CHANNEL_ID_LENGTH",
                "QUOTA_EXCEEDED_STATUS",
                "NOT_FOUND_STATUS",
                "MAX_PLAYLIST_RESULTS",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "urllib.error.HTTPError",
            "pandas",
            "googleapiclient.discovery.build",
            "googleapiclient.errors.HttpError",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.schema.dataframe.DataFrame",
            "langflow.template.field.base.Output",
            "re"
          ],
          "docstring": null
        },
        "youtube_transcripts": {
          "file_path": "src/backend/base/langflow/components/youtube/youtube_transcripts.py",
          "classes": [
            {
              "name": "YouTubeTranscriptsComponent",
              "bases": [
                "Component"
              ],
              "docstring": "A component that extracts spoken content from YouTube videos as transcripts.",
              "methods": [
                {
                  "name": "_load_transcripts",
                  "docstring": "Internal method to load transcripts from YouTube."
                },
                {
                  "name": "get_dataframe_output",
                  "docstring": "Provides transcript output as a DataFrame with timestamp and text columns."
                },
                {
                  "name": "get_message_output",
                  "docstring": "Provides transcript output as continuous text."
                },
                {
                  "name": "get_data_output",
                  "docstring": "Creates a structured data object with transcript and metadata.\n\nReturns a Data object containing transcript text, video URL, and any error\nmessages that occurred during processing. The object includes:\n- 'transcript': continuous text from the entire video (concatenated if multiple parts)\n- 'video_url': the input YouTube URL\n- 'error': error message if an exception occurs"
                }
              ],
              "attributes": [
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "pandas",
            "youtube_transcript_api",
            "langchain_community.document_loaders.YoutubeLoader",
            "langchain_community.document_loaders.youtube.TranscriptFormat",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame",
            "langflow.schema.message.Message",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "playlist": {
          "file_path": "src/backend/base/langflow/components/youtube/playlist.py",
          "classes": [
            {
              "name": "YouTubePlaylistComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "extract_video_urls",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "pytube.Playlist",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "search": {
          "file_path": "src/backend/base/langflow/components/youtube/search.py",
          "classes": [
            {
              "name": "YouTubeSearchComponent",
              "bases": [
                "Component"
              ],
              "docstring": "A component that searches YouTube videos.",
              "methods": [
                {
                  "name": "youtube_client",
                  "docstring": "Context manager for YouTube API client."
                },
                {
                  "name": "search_videos",
                  "docstring": "Searches YouTube videos and returns results as DataFrame."
                }
              ],
              "attributes": [
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "contextlib.contextmanager",
            "pandas",
            "googleapiclient.discovery.build",
            "googleapiclient.errors.HttpError",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.schema.dataframe.DataFrame",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "video_details": {
          "file_path": "src/backend/base/langflow/components/youtube/video_details.py",
          "classes": [
            {
              "name": "YouTubeVideoDetailsComponent",
              "bases": [
                "Component"
              ],
              "docstring": "A component that retrieves detailed information about YouTube videos.",
              "methods": [
                {
                  "name": "youtube_client",
                  "docstring": "Context manager for YouTube API client."
                },
                {
                  "name": "_extract_video_id",
                  "docstring": "Extracts the video ID from a YouTube URL."
                },
                {
                  "name": "_format_duration",
                  "docstring": "Formats the ISO 8601 duration to a readable format."
                },
                {
                  "name": "get_video_details",
                  "docstring": "Retrieves detailed information about a YouTube video and returns as DataFrame."
                }
              ],
              "attributes": [
                "inputs",
                "outputs",
                "API_FORBIDDEN",
                "VIDEO_NOT_FOUND"
              ]
            }
          ],
          "imports": [
            "contextlib.contextmanager",
            "googleapiclient",
            "pandas",
            "googleapiclient.discovery.build",
            "googleapiclient.errors.HttpError",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.schema.dataframe.DataFrame",
            "langflow.template.field.base.Output",
            "re",
            "re"
          ],
          "docstring": null
        },
        "comments": {
          "file_path": "src/backend/base/langflow/components/youtube/comments.py",
          "classes": [
            {
              "name": "YouTubeCommentsComponent",
              "bases": [
                "Component"
              ],
              "docstring": "A component that retrieves comments from YouTube videos.",
              "methods": [
                {
                  "name": "_extract_video_id",
                  "docstring": "Extracts the video ID from a YouTube URL."
                },
                {
                  "name": "_process_reply",
                  "docstring": "Process a single reply comment."
                },
                {
                  "name": "_process_comment",
                  "docstring": "Process a single comment thread."
                },
                {
                  "name": "youtube_client",
                  "docstring": "Context manager for YouTube API client."
                },
                {
                  "name": "get_video_comments",
                  "docstring": "Retrieves comments from a YouTube video and returns as DataFrame."
                }
              ],
              "attributes": [
                "COMMENTS_DISABLED_STATUS",
                "NOT_FOUND_STATUS",
                "API_MAX_RESULTS",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "contextlib.contextmanager",
            "pandas",
            "googleapiclient.discovery.build",
            "googleapiclient.errors.HttpError",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.schema.dataframe.DataFrame",
            "langflow.template.field.base.Output",
            "re"
          ],
          "docstring": null
        }
      }
    },
    "deepseek": {
      "description": "Components in deepseek category",
      "base_path": "src/backend/base/langflow/components/deepseek",
      "components": {
        "deepseek": {
          "file_path": "src/backend/base/langflow/components/deepseek/deepseek.py",
          "classes": [
            {
              "name": "DeepSeekModelComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_models",
                  "docstring": null
                },
                {
                  "name": "update_build_config",
                  "docstring": null
                },
                {
                  "name": "build_model",
                  "docstring": null
                },
                {
                  "name": "_get_exception_message",
                  "docstring": "Get message from DeepSeek API exception."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "requests",
            "pydantic.v1.SecretStr",
            "typing_extensions.override",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.LanguageModel",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DictInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.SliderInput",
            "langflow.inputs.inputs.StrInput",
            "langchain_openai.ChatOpenAI",
            "openai.BadRequestError"
          ],
          "docstring": null
        }
      }
    },
    "xai": {
      "description": "Components in xai category",
      "base_path": "src/backend/base/langflow/components/xai",
      "components": {
        "xai": {
          "file_path": "src/backend/base/langflow/components/xai/xai.py",
          "classes": [
            {
              "name": "XAIModelComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_models",
                  "docstring": "Fetch available models from xAI API."
                },
                {
                  "name": "update_build_config",
                  "docstring": "Update build configuration with fresh model list when key fields change."
                },
                {
                  "name": "build_model",
                  "docstring": null
                },
                {
                  "name": "_get_exception_message",
                  "docstring": "Get a message from an xAI exception.\n\nArgs:\n    e (Exception): The exception to get the message from.\n\nReturns:\n    str: The message from the exception."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "requests",
            "langchain_openai.ChatOpenAI",
            "pydantic.v1.SecretStr",
            "typing_extensions.override",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.LanguageModel",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DictInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.SliderInput",
            "openai.BadRequestError"
          ],
          "docstring": null
        }
      }
    },
    "notdiamond": {
      "description": "Components in notdiamond category",
      "base_path": "src/backend/base/langflow/components/notdiamond",
      "components": {
        "notdiamond": {
          "file_path": "src/backend/base/langflow/components/notdiamond/notdiamond.py",
          "classes": [
            {
              "name": "NotDiamondComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "__init__",
                  "docstring": null
                },
                {
                  "name": "get_selected_model",
                  "docstring": null
                },
                {
                  "name": "model_select",
                  "docstring": null
                },
                {
                  "name": "_call_get_chat_result",
                  "docstring": null
                },
                {
                  "name": "_format_input",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "warnings",
            "requests",
            "langchain_core.messages.AIMessage",
            "langchain_core.messages.BaseMessage",
            "langchain_core.messages.HumanMessage",
            "langchain_core.messages.SystemMessage",
            "pydantic.v1.SecretStr",
            "langflow.base.models.chat_result.get_chat_result",
            "langflow.base.models.model_utils.get_model_name",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.HandleInput",
            "langflow.io.MessageInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        }
      }
    },
    "scrapegraph": {
      "description": "Components in scrapegraph category",
      "base_path": "src/backend/base/langflow/components/scrapegraph",
      "components": {
        "scrapegraph_markdownify_api": {
          "file_path": "src/backend/base/langflow/components/scrapegraph/scrapegraph_markdownify_api.py",
          "classes": [
            {
              "name": "ScrapeGraphMarkdownifyApi",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "scrape",
                  "docstring": null
                }
              ],
              "attributes": [
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data",
            "scrapegraph_py.Client",
            "scrapegraph_py.logger.sgai_logger"
          ],
          "docstring": null
        },
        "scrapegraph_smart_scraper_api": {
          "file_path": "src/backend/base/langflow/components/scrapegraph/scrapegraph_smart_scraper_api.py",
          "classes": [
            {
              "name": "ScrapeGraphSmartScraperApi",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "scrape",
                  "docstring": null
                }
              ],
              "attributes": [
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data",
            "scrapegraph_py.Client",
            "scrapegraph_py.logger.sgai_logger"
          ],
          "docstring": null
        },
        "scrapegraph_search_api": {
          "file_path": "src/backend/base/langflow/components/scrapegraph/scrapegraph_search_api.py",
          "classes": [
            {
              "name": "ScrapeGraphSearchApi",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "search",
                  "docstring": null
                }
              ],
              "attributes": [
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data",
            "scrapegraph_py.Client",
            "scrapegraph_py.logger.sgai_logger"
          ],
          "docstring": null
        }
      }
    },
    "Notion": {
      "description": "Components in Notion category",
      "base_path": "src/backend/base/langflow/components/Notion",
      "components": {
        "page_content_viewer": {
          "file_path": "src/backend/base/langflow/components/Notion/page_content_viewer.py",
          "classes": [
            {
              "name": "NotionPageContent",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "build_tool",
                  "docstring": null
                },
                {
                  "name": "_retrieve_page_content",
                  "docstring": null
                },
                {
                  "name": "parse_blocks",
                  "docstring": null
                },
                {
                  "name": "parse_rich_text",
                  "docstring": null
                },
                {
                  "name": "__call__",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "inputs"
              ]
            },
            {
              "name": "NotionPageContentSchema",
              "bases": [
                "BaseModel"
              ],
              "docstring": null,
              "methods": [],
              "attributes": []
            }
          ],
          "imports": [
            "requests",
            "langchain.tools.StructuredTool",
            "loguru.logger",
            "pydantic.BaseModel",
            "pydantic.Field",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "update_page_property": {
          "file_path": "src/backend/base/langflow/components/Notion/update_page_property.py",
          "classes": [
            {
              "name": "NotionPageUpdate",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "build_tool",
                  "docstring": null
                },
                {
                  "name": "_update_notion_page",
                  "docstring": null
                },
                {
                  "name": "__call__",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "inputs"
              ]
            },
            {
              "name": "NotionPageUpdateSchema",
              "bases": [
                "BaseModel"
              ],
              "docstring": null,
              "methods": [],
              "attributes": []
            }
          ],
          "imports": [
            "json",
            "typing.Any",
            "requests",
            "langchain.tools.StructuredTool",
            "loguru.logger",
            "pydantic.BaseModel",
            "pydantic.Field",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "add_content_to_page": {
          "file_path": "src/backend/base/langflow/components/Notion/add_content_to_page.py",
          "classes": [
            {
              "name": "AddContentToPage",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "build_tool",
                  "docstring": null
                },
                {
                  "name": "_add_content_to_page",
                  "docstring": null
                },
                {
                  "name": "process_node",
                  "docstring": null
                },
                {
                  "name": "extract_language_and_code",
                  "docstring": null
                },
                {
                  "name": "is_code_block",
                  "docstring": null
                },
                {
                  "name": "extract_code_block",
                  "docstring": null
                },
                {
                  "name": "is_table",
                  "docstring": null
                },
                {
                  "name": "process_list",
                  "docstring": null
                },
                {
                  "name": "process_table",
                  "docstring": null
                },
                {
                  "name": "create_block",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "inputs"
              ]
            },
            {
              "name": "AddContentToPageSchema",
              "bases": [
                "BaseModel"
              ],
              "docstring": null,
              "methods": [],
              "attributes": []
            }
          ],
          "imports": [
            "json",
            "typing.Any",
            "requests",
            "bs4.BeautifulSoup",
            "langchain.tools.StructuredTool",
            "loguru.logger",
            "markdown.markdown",
            "pydantic.BaseModel",
            "pydantic.Field",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "list_pages": {
          "file_path": "src/backend/base/langflow/components/Notion/list_pages.py",
          "classes": [
            {
              "name": "NotionListPages",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "build_tool",
                  "docstring": null
                },
                {
                  "name": "_query_notion_database",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "inputs"
              ]
            },
            {
              "name": "NotionListPagesSchema",
              "bases": [
                "BaseModel"
              ],
              "docstring": null,
              "methods": [],
              "attributes": []
            }
          ],
          "imports": [
            "json",
            "typing.Any",
            "requests",
            "langchain.tools.StructuredTool",
            "loguru.logger",
            "pydantic.BaseModel",
            "pydantic.Field",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "create_page": {
          "file_path": "src/backend/base/langflow/components/Notion/create_page.py",
          "classes": [
            {
              "name": "NotionPageCreator",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "build_tool",
                  "docstring": null
                },
                {
                  "name": "_create_notion_page",
                  "docstring": null
                },
                {
                  "name": "__call__",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "inputs"
              ]
            },
            {
              "name": "NotionPageCreatorSchema",
              "bases": [
                "BaseModel"
              ],
              "docstring": null,
              "methods": [],
              "attributes": []
            }
          ],
          "imports": [
            "json",
            "typing.Any",
            "requests",
            "langchain.tools.StructuredTool",
            "pydantic.BaseModel",
            "pydantic.Field",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "list_database_properties": {
          "file_path": "src/backend/base/langflow/components/Notion/list_database_properties.py",
          "classes": [
            {
              "name": "NotionDatabaseProperties",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "build_tool",
                  "docstring": null
                },
                {
                  "name": "_fetch_database_properties",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "inputs"
              ]
            },
            {
              "name": "NotionDatabasePropertiesSchema",
              "bases": [
                "BaseModel"
              ],
              "docstring": null,
              "methods": [],
              "attributes": []
            }
          ],
          "imports": [
            "requests",
            "langchain.tools.StructuredTool",
            "loguru.logger",
            "pydantic.BaseModel",
            "pydantic.Field",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "search": {
          "file_path": "src/backend/base/langflow/components/Notion/search.py",
          "classes": [
            {
              "name": "NotionSearch",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "build_tool",
                  "docstring": null
                },
                {
                  "name": "_search_notion",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "inputs"
              ]
            },
            {
              "name": "NotionSearchSchema",
              "bases": [
                "BaseModel"
              ],
              "docstring": null,
              "methods": [],
              "attributes": []
            }
          ],
          "imports": [
            "typing.Any",
            "requests",
            "langchain.tools.StructuredTool",
            "pydantic.BaseModel",
            "pydantic.Field",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "list_users": {
          "file_path": "src/backend/base/langflow/components/Notion/list_users.py",
          "classes": [
            {
              "name": "NotionUserList",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "build_tool",
                  "docstring": null
                },
                {
                  "name": "_list_users",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "inputs"
              ]
            },
            {
              "name": "NotionUserListSchema",
              "bases": [
                "BaseModel"
              ],
              "docstring": null,
              "methods": [],
              "attributes": []
            }
          ],
          "imports": [
            "requests",
            "langchain.tools.StructuredTool",
            "pydantic.BaseModel",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        }
      }
    },
    "ibm": {
      "description": "Components in ibm category",
      "base_path": "src/backend/base/langflow/components/ibm",
      "components": {
        "watsonx": {
          "file_path": "src/backend/base/langflow/components/ibm/watsonx.py",
          "classes": [
            {
              "name": "WatsonxAIComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "fetch_models",
                  "docstring": "Fetch available models from the watsonx.ai API."
                },
                {
                  "name": "update_build_config",
                  "docstring": "Update model options when URL or API key changes."
                },
                {
                  "name": "build_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "beta",
                "_default_models",
                "inputs"
              ]
            }
          ],
          "imports": [
            "json",
            "typing.Any",
            "requests",
            "langchain_ibm.ChatWatsonx",
            "loguru.logger",
            "pydantic.v1.SecretStr",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.LanguageModel",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.SliderInput",
            "langflow.inputs.inputs.StrInput",
            "langflow.schema.dotdict.dotdict"
          ],
          "docstring": null
        },
        "watsonx_embeddings": {
          "file_path": "src/backend/base/langflow/components/ibm/watsonx_embeddings.py",
          "classes": [
            {
              "name": "WatsonxEmbeddingsComponent",
              "bases": [
                "LCEmbeddingsModel"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "fetch_models",
                  "docstring": "Fetch available models from the watsonx.ai API."
                },
                {
                  "name": "update_build_config",
                  "docstring": "Update model options when URL or API key changes."
                },
                {
                  "name": "build_embeddings",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "_default_models",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "requests",
            "ibm_watsonx_ai.APIClient",
            "ibm_watsonx_ai.Credentials",
            "ibm_watsonx_ai.metanames.EmbedTextParamsMetaNames",
            "langchain_ibm.WatsonxEmbeddings",
            "loguru.logger",
            "pydantic.v1.SecretStr",
            "langflow.base.embeddings.model.LCEmbeddingsModel",
            "langflow.field_typing.Embeddings",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.IntInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.dotdict.dotdict"
          ],
          "docstring": null
        }
      }
    },
    "vertexai": {
      "description": "Components in vertexai category",
      "base_path": "src/backend/base/langflow/components/vertexai",
      "components": {
        "vertexai": {
          "file_path": "src/backend/base/langflow/components/vertexai/vertexai.py",
          "classes": [
            {
              "name": "ChatVertexAIComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.cast",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.LanguageModel",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.io.BoolInput",
            "langflow.io.FileInput",
            "langflow.io.FloatInput",
            "langflow.io.IntInput",
            "langflow.io.StrInput",
            "langchain_google_vertexai.ChatVertexAI",
            "google.cloud.aiplatform",
            "google.oauth2.service_account"
          ],
          "docstring": null
        },
        "vertexai_embeddings": {
          "file_path": "src/backend/base/langflow/components/vertexai/vertexai_embeddings.py",
          "classes": [
            {
              "name": "VertexAIEmbeddingsComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_embeddings",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.Embeddings",
            "langflow.io.BoolInput",
            "langflow.io.FileInput",
            "langflow.io.FloatInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "google.oauth2.service_account",
            "langchain_google_vertexai.VertexAIEmbeddings"
          ],
          "docstring": null
        }
      }
    },
    "perplexity": {
      "description": "Components in perplexity category",
      "base_path": "src/backend/base/langflow/components/perplexity",
      "components": {
        "perplexity": {
          "file_path": "src/backend/base/langflow/components/perplexity/perplexity.py",
          "classes": [
            {
              "name": "PerplexityComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain_community.chat_models.ChatPerplexity",
            "pydantic.v1.SecretStr",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.LanguageModel",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.io.DropdownInput",
            "langflow.io.FloatInput",
            "langflow.io.IntInput",
            "langflow.io.SecretStrInput",
            "langflow.io.SliderInput"
          ],
          "docstring": null
        }
      }
    },
    "link_extractors": {
      "description": "Components in link_extractors category",
      "base_path": "src/backend/base/langflow/components/link_extractors",
      "components": {}
    },
    "output_parsers": {
      "description": "Components in output_parsers category",
      "base_path": "src/backend/base/langflow/components/output_parsers",
      "components": {}
    },
    "nvidia": {
      "description": "Components in nvidia category",
      "base_path": "src/backend/base/langflow/components/nvidia",
      "components": {
        "nvidia": {
          "file_path": "src/backend/base/langflow/components/nvidia/nvidia.py",
          "classes": [
            {
              "name": "NVIDIAModelComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_models",
                  "docstring": null
                },
                {
                  "name": "update_build_config",
                  "docstring": null
                },
                {
                  "name": "build_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "loguru.logger",
            "requests.exceptions.ConnectionError",
            "urllib3.exceptions.MaxRetryError",
            "urllib3.exceptions.NameResolutionError",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.LanguageModel",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.SliderInput",
            "langflow.schema.dotdict.dotdict",
            "warnings",
            "langchain_nvidia_ai_endpoints.ChatNVIDIA",
            "langchain_nvidia_ai_endpoints.ChatNVIDIA",
            "langchain_nvidia_ai_endpoints.ChatNVIDIA"
          ],
          "docstring": null
        },
        "nvidia_embedding": {
          "file_path": "src/backend/base/langflow/components/nvidia/nvidia_embedding.py",
          "classes": [
            {
              "name": "NVIDIAEmbeddingsComponent",
              "bases": [
                "LCEmbeddingsModel"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "update_build_config",
                  "docstring": null
                },
                {
                  "name": "build_embeddings",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "langflow.base.embeddings.model.LCEmbeddingsModel",
            "langflow.field_typing.Embeddings",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.io.FloatInput",
            "langflow.io.MessageTextInput",
            "langflow.schema.dotdict.dotdict",
            "langchain_nvidia_ai_endpoints.NVIDIAEmbeddings"
          ],
          "docstring": null
        },
        "nvidia_rerank": {
          "file_path": "src/backend/base/langflow/components/nvidia/nvidia_rerank.py",
          "classes": [
            {
              "name": "NvidiaRerankComponent",
              "bases": [
                "LCCompressorComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "update_build_config",
                  "docstring": null
                },
                {
                  "name": "build_compressor",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "langflow.base.compressors.model.LCCompressorComponent",
            "langflow.field_typing.BaseDocumentCompressor",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.io.DropdownInput",
            "langflow.io.StrInput",
            "langflow.schema.dotdict.dotdict",
            "langflow.template.field.base.Output",
            "langchain_nvidia_ai_endpoints.NVIDIARerank"
          ],
          "docstring": null
        },
        "nvidia_ingest": {
          "file_path": "src/backend/base/langflow/components/nvidia/nvidia_ingest.py",
          "classes": [
            {
              "name": "NvidiaIngestComponent",
              "bases": [
                "BaseFileComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "process_files",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "beta",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "urllib.parse.urlparse",
            "pypdf.PdfReader",
            "langflow.base.data.base_file.BaseFileComponent",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.FloatInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.schema.data.Data",
            "nv_ingest_client.util.file_processing.extract.EXTENSION_TO_DOCUMENT_TYPE",
            "nv_ingest_client.client.Ingestor"
          ],
          "docstring": null
        },
        "system_assist": {
          "file_path": "src/backend/base/langflow/components/nvidia/system_assist.py",
          "classes": [
            {
              "name": "NvidiaSystemAssistComponent",
              "bases": [
                "ComponentWithCache"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "maybe_register_rise_client",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "rise_initialized",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "asyncio",
            "langflow.custom.custom_component.component_with_cache.ComponentWithCache",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.Message",
            "langflow.services.cache.utils.CacheMiss",
            "gassist.rise.register_rise_client",
            "gassist.rise.send_rise_command"
          ],
          "docstring": null
        }
      }
    },
    "prototypes": {
      "description": "Components in prototypes category",
      "base_path": "src/backend/base/langflow/components/prototypes",
      "components": {
        "python_function": {
          "file_path": "src/backend/base/langflow/components/prototypes/python_function.py",
          "classes": [
            {
              "name": "PythonFunctionComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_function_callable",
                  "docstring": null
                },
                {
                  "name": "execute_function",
                  "docstring": null
                },
                {
                  "name": "execute_function_data",
                  "docstring": null
                },
                {
                  "name": "execute_function_message",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "collections.abc.Callable",
            "loguru.logger",
            "langflow.custom.custom_component.component.Component",
            "langflow.custom.utils.get_function",
            "langflow.io.CodeInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.schema.dotdict.dotdict",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        }
      }
    },
    "icosacomputing": {
      "description": "Components in icosacomputing category",
      "base_path": "src/backend/base/langflow/components/icosacomputing",
      "components": {
        "combinatorial_reasoner": {
          "file_path": "src/backend/base/langflow/components/icosacomputing/combinatorial_reasoner.py",
          "classes": [
            {
              "name": "CombinatorialReasonerComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_prompt",
                  "docstring": null
                },
                {
                  "name": "build_reasons",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "requests",
            "requests.auth.HTTPBasicAuth",
            "langflow.base.models.openai_constants.OPENAI_CHAT_MODEL_NAMES",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.StrInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        }
      }
    },
    "textsplitters": {
      "description": "Components in textsplitters category",
      "base_path": "src/backend/base/langflow/components/textsplitters",
      "components": {}
    },
    "olivya": {
      "description": "Components in olivya category",
      "base_path": "src/backend/base/langflow/components/olivya",
      "components": {
        "olivya": {
          "file_path": "src/backend/base/langflow/components/olivya/olivya.py",
          "classes": [
            {
              "name": "OlivyaComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "json",
            "httpx",
            "loguru.logger",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        }
      }
    },
    "confluence": {
      "description": "Components in confluence category",
      "base_path": "src/backend/base/langflow/components/confluence",
      "components": {
        "confluence": {
          "file_path": "src/backend/base/langflow/components/confluence/confluence.py",
          "classes": [
            {
              "name": "ConfluenceComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_confluence",
                  "docstring": null
                },
                {
                  "name": "load_documents",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "trace_type",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain_community.document_loaders.ConfluenceLoader",
            "langchain_community.document_loaders.confluence.ContentFormat",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.IntInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        }
      }
    },
    "assemblyai": {
      "description": "Components in assemblyai category",
      "base_path": "src/backend/base/langflow/components/assemblyai",
      "components": {
        "assemblyai_list_transcripts": {
          "file_path": "src/backend/base/langflow/components/assemblyai/assemblyai_list_transcripts.py",
          "classes": [
            {
              "name": "AssemblyAIListTranscripts",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "list_transcripts",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "assemblyai",
            "loguru.logger",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "assemblyai_lemur": {
          "file_path": "src/backend/base/langflow/components/assemblyai/assemblyai_lemur.py",
          "classes": [
            {
              "name": "AssemblyAILeMUR",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "run_lemur",
                  "docstring": "Use the LeMUR task endpoint to input the LLM prompt."
                },
                {
                  "name": "perform_lemur_action",
                  "docstring": null
                },
                {
                  "name": "get_final_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "assemblyai",
            "loguru.logger",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.DataInput",
            "langflow.io.DropdownInput",
            "langflow.io.FloatInput",
            "langflow.io.IntInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "assemblyai_get_subtitles": {
          "file_path": "src/backend/base/langflow/components/assemblyai/assemblyai_get_subtitles.py",
          "classes": [
            {
              "name": "AssemblyAIGetSubtitles",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_subtitles",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "assemblyai",
            "loguru.logger",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.DataInput",
            "langflow.io.DropdownInput",
            "langflow.io.IntInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "assemblyai_start_transcript": {
          "file_path": "src/backend/base/langflow/components/assemblyai/assemblyai_start_transcript.py",
          "classes": [
            {
              "name": "AssemblyAITranscriptionJobCreator",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "create_transcription_job",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "pathlib.Path",
            "assemblyai",
            "loguru.logger",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.FileInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "assemblyai_poll_transcript": {
          "file_path": "src/backend/base/langflow/components/assemblyai/assemblyai_poll_transcript.py",
          "classes": [
            {
              "name": "AssemblyAITranscriptionJobPoller",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "poll_transcription_job",
                  "docstring": "Polls the transcription status until completion and returns the Data."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "assemblyai",
            "loguru.logger",
            "langflow.custom.custom_component.component.Component",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.io.DataInput",
            "langflow.io.FloatInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        }
      }
    },
    "glean": {
      "description": "Components in glean category",
      "base_path": "src/backend/base/langflow/components/glean",
      "components": {
        "glean_search_api": {
          "file_path": "src/backend/base/langflow/components/glean/glean_search_api.py",
          "classes": [
            {
              "name": "GleanSearchAPISchema",
              "bases": [
                "BaseModel"
              ],
              "docstring": null,
              "methods": [],
              "attributes": []
            },
            {
              "name": "GleanAPIWrapper",
              "bases": [
                "BaseModel"
              ],
              "docstring": "Wrapper around Glean API.",
              "methods": [
                {
                  "name": "_prepare_request",
                  "docstring": null
                },
                {
                  "name": "results",
                  "docstring": null
                },
                {
                  "name": "run",
                  "docstring": null
                },
                {
                  "name": "_search_api_results",
                  "docstring": null
                },
                {
                  "name": "_result_as_string",
                  "docstring": null
                }
              ],
              "attributes": []
            },
            {
              "name": "GleanSearchAPIComponent",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_tool",
                  "docstring": null
                },
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "fetch_content",
                  "docstring": null
                },
                {
                  "name": "_build_wrapper",
                  "docstring": null
                },
                {
                  "name": "fetch_content_dataframe",
                  "docstring": "Convert the Glean search results to a DataFrame.\n\nReturns:\n    DataFrame: A DataFrame containing the search results."
                }
              ],
              "attributes": [
                "outputs",
                "inputs"
              ]
            }
          ],
          "imports": [
            "json",
            "typing.Any",
            "urllib.parse.urljoin",
            "httpx",
            "langchain_core.tools.StructuredTool",
            "langchain_core.tools.ToolException",
            "pydantic.BaseModel",
            "pydantic.v1.Field",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.inputs.inputs.NestedDictInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.StrInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame"
          ],
          "docstring": null
        }
      }
    },
    "yahoosearch": {
      "description": "Components in yahoosearch category",
      "base_path": "src/backend/base/langflow/components/yahoosearch",
      "components": {
        "yahoo": {
          "file_path": "src/backend/base/langflow/components/yahoosearch/yahoo.py",
          "classes": [
            {
              "name": "YahooFinanceMethod",
              "bases": [
                "Enum"
              ],
              "docstring": null,
              "methods": [],
              "attributes": [
                "GET_INFO",
                "GET_NEWS",
                "GET_ACTIONS",
                "GET_ANALYSIS",
                "GET_BALANCE_SHEET",
                "GET_CALENDAR",
                "GET_CASHFLOW",
                "GET_INSTITUTIONAL_HOLDERS",
                "GET_RECOMMENDATIONS",
                "GET_SUSTAINABILITY",
                "GET_MAJOR_HOLDERS",
                "GET_MUTUALFUND_HOLDERS",
                "GET_INSIDER_PURCHASES",
                "GET_INSIDER_TRANSACTIONS",
                "GET_INSIDER_ROSTER_HOLDERS",
                "GET_DIVIDENDS",
                "GET_CAPITAL_GAINS",
                "GET_SPLITS",
                "GET_SHARES",
                "GET_FAST_INFO",
                "GET_SEC_FILINGS",
                "GET_RECOMMENDATIONS_SUMMARY",
                "GET_UPGRADES_DOWNGRADES",
                "GET_EARNINGS",
                "GET_INCOME_STMT"
              ]
            },
            {
              "name": "YahooFinanceSchema",
              "bases": [
                "BaseModel"
              ],
              "docstring": null,
              "methods": [],
              "attributes": []
            },
            {
              "name": "YfinanceComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "_fetch_yfinance_data",
                  "docstring": null
                },
                {
                  "name": "fetch_content",
                  "docstring": null
                },
                {
                  "name": "_yahoo_finance_tool",
                  "docstring": null
                },
                {
                  "name": "fetch_content_dataframe",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "ast",
            "pprint",
            "enum.Enum",
            "yfinance",
            "langchain_core.tools.ToolException",
            "loguru.logger",
            "pydantic.BaseModel",
            "pydantic.Field",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame"
          ],
          "docstring": null
        }
      }
    },
    "mem0": {
      "description": "Components in mem0 category",
      "base_path": "src/backend/base/langflow/components/mem0",
      "components": {
        "mem0_chat_memory": {
          "file_path": "src/backend/base/langflow/components/mem0/mem0_chat_memory.py",
          "classes": [
            {
              "name": "Mem0MemoryComponent",
              "bases": [
                "LCChatMemoryComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_mem0",
                  "docstring": "Initializes a Mem0 memory instance based on provided configuration and API keys."
                },
                {
                  "name": "ingest_data",
                  "docstring": "Ingests a new message into Mem0 memory and returns the updated memory instance."
                },
                {
                  "name": "build_search_results",
                  "docstring": "Searches the Mem0 memory for related messages based on the search query and returns the results."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "os",
            "loguru.logger",
            "mem0.Memory",
            "mem0.MemoryClient",
            "langflow.base.memory.model.LCChatMemoryComponent",
            "langflow.inputs.inputs.DictInput",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.NestedDictInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.io.Output",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        }
      }
    },
    "anthropic": {
      "description": "Components in anthropic category",
      "base_path": "src/backend/base/langflow/components/anthropic",
      "components": {
        "anthropic": {
          "file_path": "src/backend/base/langflow/components/anthropic/anthropic.py",
          "classes": [
            {
              "name": "AnthropicModelComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_model",
                  "docstring": null
                },
                {
                  "name": "get_models",
                  "docstring": null
                },
                {
                  "name": "_get_exception_message",
                  "docstring": "Get a message from an Anthropic exception.\n\nArgs:\n    exception (Exception): The exception to get the message from.\n\nReturns:\n    str: The message from the exception."
                },
                {
                  "name": "update_build_config",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "typing.cast",
            "requests",
            "loguru.logger",
            "pydantic.ValidationError",
            "langflow.base.models.anthropic_constants.ANTHROPIC_MODELS",
            "langflow.base.models.anthropic_constants.DEFAULT_ANTHROPIC_API_URL",
            "langflow.base.models.anthropic_constants.TOOL_CALLING_SUPPORTED_ANTHROPIC_MODELS",
            "langflow.base.models.anthropic_constants.TOOL_CALLING_UNSUPPORTED_ANTHROPIC_MODELS",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.LanguageModel",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.SecretStrInput",
            "langflow.io.SliderInput",
            "langflow.schema.dotdict.dotdict",
            "langchain_anthropic.chat_models.ChatAnthropic",
            "anthropic",
            "anthropic.BadRequestError",
            "langchain_anthropic.chat_models.ChatAnthropic"
          ],
          "docstring": null
        }
      }
    },
    "arxiv": {
      "description": "Components in arxiv category",
      "base_path": "src/backend/base/langflow/components/arxiv",
      "components": {
        "arxiv": {
          "file_path": "src/backend/base/langflow/components/arxiv/arxiv.py",
          "classes": [
            {
              "name": "ArXivComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_query_url",
                  "docstring": "Build the arXiv API query URL."
                },
                {
                  "name": "parse_atom_response",
                  "docstring": "Parse the Atom XML response from arXiv."
                },
                {
                  "name": "_get_text",
                  "docstring": "Safely extract text from an XML element."
                },
                {
                  "name": "_get_link",
                  "docstring": "Get link URL based on relation type."
                },
                {
                  "name": "_get_category",
                  "docstring": "Get primary category."
                },
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "search_papers",
                  "docstring": "Search arXiv and return results."
                },
                {
                  "name": "search_papers_dataframe",
                  "docstring": "Convert the Arxiv search results to a DataFrame.\n\nReturns:\n    DataFrame: A DataFrame containing the search results."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            },
            {
              "name": "RestrictedHTTPHandler",
              "bases": [],
              "docstring": null,
              "methods": [
                {
                  "name": "http_open",
                  "docstring": null
                }
              ],
              "attributes": []
            },
            {
              "name": "RestrictedHTTPSHandler",
              "bases": [],
              "docstring": null,
              "methods": [
                {
                  "name": "https_open",
                  "docstring": null
                }
              ],
              "attributes": []
            }
          ],
          "imports": [
            "urllib.request",
            "urllib.parse.urlparse",
            "xml.etree.ElementTree.Element",
            "defusedxml.ElementTree.fromstring",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.DropdownInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame"
          ],
          "docstring": null
        }
      }
    },
    "huggingface": {
      "description": "Components in huggingface category",
      "base_path": "src/backend/base/langflow/components/huggingface",
      "components": {
        "huggingface_inference_api": {
          "file_path": "src/backend/base/langflow/components/huggingface/huggingface_inference_api.py",
          "classes": [
            {
              "name": "HuggingFaceInferenceAPIEmbeddingsComponent",
              "bases": [
                "LCEmbeddingsModel"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "validate_inference_endpoint",
                  "docstring": null
                },
                {
                  "name": "get_api_url",
                  "docstring": null
                },
                {
                  "name": "create_huggingface_embeddings",
                  "docstring": null
                },
                {
                  "name": "build_embeddings",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "urllib.parse.urlparse",
            "requests",
            "langchain_community.embeddings.huggingface.HuggingFaceInferenceAPIEmbeddings",
            "pydantic.SecretStr",
            "tenacity.retry",
            "tenacity.stop_after_attempt",
            "tenacity.wait_fixed",
            "langflow.base.embeddings.model.LCEmbeddingsModel",
            "langflow.field_typing.Embeddings",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput"
          ],
          "docstring": null
        },
        "huggingface": {
          "file_path": "src/backend/base/langflow/components/huggingface/huggingface.py",
          "classes": [
            {
              "name": "HuggingFaceEndpointsComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_api_url",
                  "docstring": null
                },
                {
                  "name": "create_huggingface_endpoint",
                  "docstring": null
                },
                {
                  "name": "build_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "langchain_community.llms.huggingface_endpoint.HuggingFaceEndpoint",
            "tenacity.retry",
            "tenacity.stop_after_attempt",
            "tenacity.wait_fixed",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.LanguageModel",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.io.DictInput",
            "langflow.io.DropdownInput",
            "langflow.io.FloatInput",
            "langflow.io.IntInput",
            "langflow.io.SecretStrInput",
            "langflow.io.SliderInput",
            "langflow.io.StrInput"
          ],
          "docstring": null
        }
      }
    },
    "serpapi": {
      "description": "Components in serpapi category",
      "base_path": "src/backend/base/langflow/components/serpapi",
      "components": {
        "serp": {
          "file_path": "src/backend/base/langflow/components/serpapi/serp.py",
          "classes": [
            {
              "name": "SerpAPISchema",
              "bases": [
                "BaseModel"
              ],
              "docstring": "Schema for SerpAPI search parameters.",
              "methods": [],
              "attributes": []
            },
            {
              "name": "SerpComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "_build_wrapper",
                  "docstring": "Build a SerpAPIWrapper with the provided parameters."
                },
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "fetch_content",
                  "docstring": null
                },
                {
                  "name": "fetch_content_text",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "langchain_community.utilities.serpapi.SerpAPIWrapper",
            "langchain_core.tools.ToolException",
            "loguru.logger",
            "pydantic.BaseModel",
            "pydantic.Field",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.DictInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        }
      }
    },
    "unstructured": {
      "description": "Components in unstructured category",
      "base_path": "src/backend/base/langflow/components/unstructured",
      "components": {
        "unstructured": {
          "file_path": "src/backend/base/langflow/components/unstructured/unstructured.py",
          "classes": [
            {
              "name": "UnstructuredComponent",
              "bases": [
                "BaseFileComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "process_files",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "trace_type",
                "icon",
                "name",
                "VALID_EXTENSIONS",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain_unstructured.UnstructuredLoader",
            "langflow.base.data.base_file.BaseFileComponent",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.NestedDictInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        }
      }
    },
    "deactivated": {
      "description": "Components in deactivated category",
      "base_path": "src/backend/base/langflow/components/deactivated",
      "components": {
        "sub_flow": {
          "file_path": "src/backend/base/langflow/components/deactivated/sub_flow.py",
          "classes": [
            {
              "name": "SubFlowComponent",
              "bases": [
                "CustomComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "add_inputs_to_build_config",
                  "docstring": null
                },
                {
                  "name": "build_config",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "field_order",
                "name"
              ]
            }
          ],
          "imports": [
            "typing.TYPE_CHECKING",
            "typing.Any",
            "loguru.logger",
            "langflow.base.flow_processing.utils.build_data_from_result_data",
            "langflow.custom.custom_component.custom_component.CustomComponent",
            "langflow.graph.graph.base.Graph",
            "langflow.graph.vertex.base.Vertex",
            "langflow.helpers.flow.get_flow_inputs",
            "langflow.schema.data.Data",
            "langflow.schema.dotdict.dotdict",
            "langflow.template.field.base.Input",
            "langflow.graph.schema.RunOutputs"
          ],
          "docstring": null
        },
        "extract_key_from_data": {
          "file_path": "src/backend/base/langflow/components/deactivated/extract_key_from_data.py",
          "classes": [
            {
              "name": "ExtractKeyFromDataComponent",
              "bases": [
                "CustomComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build",
                  "docstring": "Extracts the keys from a data.\n\nArgs:\n    data (Data): The data from which to extract the keys.\n    keys (list[str]): The keys to extract from the data.\n    silent_error (bool): If True, errors will not be raised.\n\nReturns:\n    dict: The extracted keys."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "field_config"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.custom_component.CustomComponent",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "embed": {
          "file_path": "src/backend/base/langflow/components/deactivated/embed.py",
          "classes": [
            {
              "name": "EmbedComponent",
              "bases": [
                "CustomComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_config",
                  "docstring": null
                },
                {
                  "name": "build",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "name"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.custom_component.CustomComponent",
            "langflow.field_typing.Embeddings",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "amazon_kendra": {
          "file_path": "src/backend/base/langflow/components/deactivated/amazon_kendra.py",
          "classes": [
            {
              "name": "AmazonKendraRetrieverComponent",
              "bases": [
                "CustomComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_vector_store",
                  "docstring": "Builds the Amazon Kendra Retriever."
                }
              ],
              "attributes": [
                "name",
                "icon",
                "legacy",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain_community.retrievers.AmazonKendraRetriever",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.custom.custom_component.custom_component.CustomComponent",
            "langflow.io.DictInput",
            "langflow.io.IntInput",
            "langflow.io.StrInput",
            "langchain_community.retrievers.AmazonKendraRetriever"
          ],
          "docstring": null
        },
        "documents_to_data": {
          "file_path": "src/backend/base/langflow/components/deactivated/documents_to_data.py",
          "classes": [
            {
              "name": "DocumentsToDataComponent",
              "bases": [
                "CustomComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "field_config"
              ]
            }
          ],
          "imports": [
            "langchain_core.documents.Document",
            "langflow.custom.custom_component.custom_component.CustomComponent",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "vector_store": {
          "file_path": "src/backend/base/langflow/components/deactivated/vector_store.py",
          "classes": [
            {
              "name": "VectorStoreRetrieverComponent",
              "bases": [
                "CustomComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain_core.vectorstores.VectorStoreRetriever",
            "langflow.custom.custom_component.custom_component.CustomComponent",
            "langflow.field_typing.VectorStore",
            "langflow.inputs.inputs.HandleInput"
          ],
          "docstring": null
        },
        "selective_passthrough": {
          "file_path": "src/backend/base/langflow/components/deactivated/selective_passthrough.py",
          "classes": [
            {
              "name": "SelectivePassThroughComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "evaluate_condition",
                  "docstring": null
                },
                {
                  "name": "pass_through",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.component.Component",
            "langflow.field_typing.Text",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output"
          ],
          "docstring": null
        },
        "retriever": {
          "file_path": "src/backend/base/langflow/components/deactivated/retriever.py",
          "classes": [
            {
              "name": "RetrieverToolComponent",
              "bases": [
                "CustomComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "legacy",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain_core.tools.create_retriever_tool",
            "langflow.custom.custom_component.custom_component.CustomComponent",
            "langflow.field_typing.BaseRetriever",
            "langflow.field_typing.Tool",
            "langflow.io.HandleInput",
            "langflow.io.StrInput"
          ],
          "docstring": null
        },
        "store_message": {
          "file_path": "src/backend/base/langflow/components/deactivated/store_message.py",
          "classes": [
            {
              "name": "StoreMessageComponent",
              "bases": [
                "CustomComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_config",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.custom_component.CustomComponent",
            "langflow.memory.aget_messages",
            "langflow.memory.astore_message",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        },
        "should_run_next": {
          "file_path": "src/backend/base/langflow/components/deactivated/should_run_next.py",
          "classes": [
            {
              "name": "ShouldRunNextComponent",
              "bases": [
                "CustomComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name"
              ]
            }
          ],
          "imports": [
            "langchain_core.messages.BaseMessage",
            "langchain_core.prompts.PromptTemplate",
            "langflow.custom.custom_component.custom_component.CustomComponent",
            "langflow.field_typing.LanguageModel",
            "langflow.field_typing.Text"
          ],
          "docstring": null
        },
        "message": {
          "file_path": "src/backend/base/langflow/components/deactivated/message.py",
          "classes": [
            {
              "name": "MessageComponent",
              "bases": [
                "CustomComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_config",
                  "docstring": null
                },
                {
                  "name": "build",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.custom_component.CustomComponent",
            "langflow.schema.message.Message",
            "langflow.utils.constants.MESSAGE_SENDER_AI",
            "langflow.utils.constants.MESSAGE_SENDER_USER"
          ],
          "docstring": null
        },
        "code_block_extractor": {
          "file_path": "src/backend/base/langflow/components/deactivated/code_block_extractor.py",
          "classes": [
            {
              "name": "CodeBlockExtractor",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "get_code_block",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "re",
            "langflow.custom.custom_component.component.Component",
            "langflow.field_typing.Input",
            "langflow.field_typing.Output",
            "langflow.field_typing.Text"
          ],
          "docstring": null
        },
        "mcp_stdio": {
          "file_path": "src/backend/base/langflow/components/deactivated/mcp_stdio.py",
          "classes": [
            {
              "name": "MCPStdio",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [],
              "attributes": [
                "client",
                "tools",
                "tool_names",
                "display_name",
                "description",
                "icon",
                "name",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain_core.tools.StructuredTool",
            "mcp.types",
            "langflow.base.mcp.util.MCPStdioClient",
            "langflow.base.mcp.util.create_input_schema_from_json_schema",
            "langflow.base.mcp.util.create_tool_coroutine",
            "langflow.base.mcp.util.create_tool_func",
            "langflow.custom.custom_component.component.Component",
            "langflow.field_typing.Tool",
            "langflow.io.MessageTextInput",
            "langflow.io.Output"
          ],
          "docstring": null
        },
        "list_flows": {
          "file_path": "src/backend/base/langflow/components/deactivated/list_flows.py",
          "classes": [
            {
              "name": "ListFlowsComponent",
              "bases": [
                "CustomComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_config",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name"
              ]
            }
          ],
          "imports": [
            "langflow.custom.custom_component.custom_component.CustomComponent",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "split_text": {
          "file_path": "src/backend/base/langflow/components/deactivated/split_text.py",
          "classes": [
            {
              "name": "SplitTextComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "_docs_to_data",
                  "docstring": null
                },
                {
                  "name": "split_text",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain_text_splitters.CharacterTextSplitter",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.utils.util.unescape_string"
          ],
          "docstring": null
        },
        "merge_data": {
          "file_path": "src/backend/base/langflow/components/deactivated/merge_data.py",
          "classes": [
            {
              "name": "MergeDataComponent",
              "bases": [
                "Component"
              ],
              "docstring": "MergeDataComponent is responsible for combining multiple Data objects into a unified list of Data objects.\n\nIt ensures that all keys across the input Data objects are present in each merged Data object.\nMissing keys are filled with empty strings to maintain consistency.",
              "methods": [
                {
                  "name": "merge_data",
                  "docstring": "Merges multiple Data objects into a single list of Data objects.\n\nEnsures that all keys from the input Data objects are present in each merged Data object.\nMissing keys are filled with empty strings.\n\nReturns:\n    List[Data]: A list of merged Data objects with consistent keys."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "loguru.logger",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.DataInput",
            "langflow.io.Output",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "vectara_self_query": {
          "file_path": "src/backend/base/langflow/components/deactivated/vectara_self_query.py",
          "classes": [
            {
              "name": "VectaraSelfQueryRetriverComponent",
              "bases": [
                "CustomComponent"
              ],
              "docstring": "A custom component for implementing Vectara Self Query Retriever using a vector store.",
              "methods": [
                {
                  "name": "build_vector_store",
                  "docstring": "Builds the Vectara Self Query Retriever."
                }
              ],
              "attributes": [
                "name",
                "icon",
                "legacy",
                "inputs"
              ]
            }
          ],
          "imports": [
            "json",
            "langchain.chains.query_constructor.base.AttributeInfo",
            "langchain.retrievers.self_query.base.SelfQueryRetriever",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.custom.custom_component.custom_component.CustomComponent",
            "langflow.io.HandleInput",
            "langflow.io.StrInput",
            "langchain_community.vectorstores.Vectara"
          ],
          "docstring": null
        },
        "metal": {
          "file_path": "src/backend/base/langflow/components/deactivated/metal.py",
          "classes": [
            {
              "name": "MetalRetrieverComponent",
              "bases": [
                "CustomComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_vector_store",
                  "docstring": "Builds the Metal Retriever."
                }
              ],
              "attributes": [
                "name",
                "legacy",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain_community.retrievers.MetalRetriever",
            "langflow.base.vectorstores.model.check_cached_vector_store",
            "langflow.custom.custom_component.custom_component.CustomComponent",
            "langflow.io.DictInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langchain_community.retrievers.MetalRetriever",
            "metal_sdk.metal.Metal"
          ],
          "docstring": null
        },
        "multi_query": {
          "file_path": "src/backend/base/langflow/components/deactivated/multi_query.py",
          "classes": [
            {
              "name": "MultiQueryRetrieverComponent",
              "bases": [
                "CustomComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "name",
                "legacy",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain.prompts.PromptTemplate",
            "langchain.retrievers.MultiQueryRetriever",
            "langflow.custom.custom_component.custom_component.CustomComponent",
            "langflow.field_typing.BaseRetriever",
            "langflow.field_typing.LanguageModel",
            "langflow.field_typing.Text",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.StrInput"
          ],
          "docstring": null
        },
        "json_document_builder": {
          "file_path": "src/backend/base/langflow/components/deactivated/json_document_builder.py",
          "classes": [
            {
              "name": "JSONDocumentBuilder",
              "bases": [
                "CustomComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build",
                  "docstring": null
                }
              ],
              "attributes": [
                "name",
                "legacy",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain_core.documents.Document",
            "langflow.custom.custom_component.custom_component.CustomComponent",
            "langflow.io.HandleInput",
            "langflow.io.StrInput",
            "langflow.services.database.models.base.orjson_dumps"
          ],
          "docstring": null
        },
        "chat_litellm_model": {
          "file_path": "src/backend/base/langflow/components/deactivated/chat_litellm_model.py",
          "classes": [
            {
              "name": "ChatLiteLLMModelComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "documentation",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain_community.chat_models.litellm.ChatLiteLLM",
            "langchain_community.chat_models.litellm.ChatLiteLLMException",
            "langflow.base.constants.STREAM_INFO_TEXT",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.LanguageModel",
            "langflow.io.BoolInput",
            "langflow.io.DictInput",
            "langflow.io.DropdownInput",
            "langflow.io.FloatInput",
            "langflow.io.IntInput",
            "langflow.io.MessageInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "litellm"
          ],
          "docstring": null
        },
        "mcp_sse": {
          "file_path": "src/backend/base/langflow/components/deactivated/mcp_sse.py",
          "classes": [
            {
              "name": "MCPSse",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [],
              "attributes": [
                "client",
                "tools",
                "tool_names",
                "display_name",
                "description",
                "icon",
                "name",
                "legacy",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain_core.tools.StructuredTool",
            "mcp.types",
            "langflow.base.mcp.util.MCPSseClient",
            "langflow.base.mcp.util.create_input_schema_from_json_schema",
            "langflow.base.mcp.util.create_tool_coroutine",
            "langflow.base.mcp.util.create_tool_func",
            "langflow.custom.custom_component.component.Component",
            "langflow.field_typing.Tool",
            "langflow.io.MessageTextInput",
            "langflow.io.Output"
          ],
          "docstring": null
        }
      }
    },
    "tavily": {
      "description": "Components in tavily category",
      "base_path": "src/backend/base/langflow/components/tavily",
      "components": {
        "tavily_extract": {
          "file_path": "src/backend/base/langflow/components/tavily/tavily_extract.py",
          "classes": [
            {
              "name": "TavilyExtractComponent",
              "bases": [
                "Component"
              ],
              "docstring": "Separate component specifically for Tavily Extract functionality.",
              "methods": [
                {
                  "name": "run_model",
                  "docstring": null
                },
                {
                  "name": "fetch_content",
                  "docstring": "Fetches and processes extracted content into a list of Data objects."
                },
                {
                  "name": "fetch_content_dataframe",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "httpx",
            "loguru.logger",
            "langflow.custom.Component",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.Data",
            "langflow.schema.dataframe.DataFrame"
          ],
          "docstring": null
        },
        "tavily_search": {
          "file_path": "src/backend/base/langflow/components/tavily/tavily_search.py",
          "classes": [
            {
              "name": "TavilySearchComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "fetch_content",
                  "docstring": null
                },
                {
                  "name": "fetch_content_dataframe",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "httpx",
            "loguru.logger",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.schema.data.Data",
            "langflow.schema.dataframe.DataFrame",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        }
      }
    },
    "composio": {
      "description": "Components in composio category",
      "base_path": "src/backend/base/langflow/components/composio",
      "components": {
        "gmail_composio": {
          "file_path": "src/backend/base/langflow/components/composio/gmail_composio.py",
          "classes": [
            {
              "name": "ComposioGmailAPIComponent",
              "bases": [
                "ComposioBaseComponent"
              ],
              "docstring": "Gmail API component for interacting with Gmail services.",
              "methods": [
                {
                  "name": "execute_action",
                  "docstring": "Execute action and return response as Message."
                },
                {
                  "name": "update_build_config",
                  "docstring": null
                },
                {
                  "name": "set_default_tools",
                  "docstring": null
                }
              ],
              "attributes": [
                "name",
                "icon",
                "app_name",
                "_all_fields",
                "_bool_variables",
                "inputs"
              ]
            }
          ],
          "imports": [
            "json",
            "typing.Any",
            "composio.Action",
            "langflow.base.composio.composio_base.ComposioBaseComponent",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.FileInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.logging.logger"
          ],
          "docstring": null
        },
        "composio_api": {
          "file_path": "src/backend/base/langflow/components/composio/composio_api.py",
          "classes": [
            {
              "name": "ComposioAPIComponent",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "sanitize_action_name",
                  "docstring": null
                },
                {
                  "name": "desanitize_action_name",
                  "docstring": null
                },
                {
                  "name": "validate_tool",
                  "docstring": null
                },
                {
                  "name": "update_build_config",
                  "docstring": null
                },
                {
                  "name": "build_tool",
                  "docstring": "Build Composio tools based on selected actions.\n\nReturns:\n    Sequence[Tool]: List of configured Composio tools."
                },
                {
                  "name": "_build_wrapper",
                  "docstring": "Build the Composio toolset wrapper.\n\nReturns:\n    ComposioToolSet: The initialized toolset.\n\nRaises:\n    ValueError: If the API key is not found or invalid."
                }
              ],
              "attributes": [
                "name",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "collections.abc.Sequence",
            "typing.Any",
            "composio.Action",
            "composio.App",
            "composio_langchain.ComposioToolSet",
            "langchain_core.tools.Tool",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.inputs.inputs.ConnectionInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.SortableListInput",
            "langflow.io.Output"
          ],
          "docstring": null
        },
        "outlook_composio": {
          "file_path": "src/backend/base/langflow/components/composio/outlook_composio.py",
          "classes": [
            {
              "name": "ComposioOutlookAPIComponent",
              "bases": [
                "ComposioBaseComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "execute_action",
                  "docstring": "Execute action and return response as Message."
                },
                {
                  "name": "update_build_config",
                  "docstring": null
                },
                {
                  "name": "set_default_tools",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "app_name",
                "_all_fields",
                "_bool_variables",
                "_list_variables",
                "inputs"
              ]
            }
          ],
          "imports": [
            "json",
            "typing.Any",
            "composio.Action",
            "langflow.base.composio.composio_base.ComposioBaseComponent",
            "langflow.inputs.BoolInput",
            "langflow.inputs.FileInput",
            "langflow.inputs.IntInput",
            "langflow.inputs.MessageTextInput",
            "langflow.logging.logger"
          ],
          "docstring": null
        },
        "github_composio": {
          "file_path": "src/backend/base/langflow/components/composio/github_composio.py",
          "classes": [
            {
              "name": "ComposioGitHubAPIComponent",
              "bases": [
                "ComposioBaseComponent"
              ],
              "docstring": "GitHub API component for interacting with GitHub services.",
              "methods": [
                {
                  "name": "execute_action",
                  "docstring": "Execute action and return response as Message."
                },
                {
                  "name": "update_build_config",
                  "docstring": null
                },
                {
                  "name": "set_default_tools",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "app_name",
                "_all_fields",
                "_bool_variables",
                "inputs"
              ]
            }
          ],
          "imports": [
            "json",
            "typing.Any",
            "composio.Action",
            "langflow.base.composio.composio_base.ComposioBaseComponent",
            "langflow.inputs.BoolInput",
            "langflow.inputs.IntInput",
            "langflow.inputs.MessageTextInput",
            "langflow.logging.logger"
          ],
          "docstring": null
        },
        "googlecalendar_composio": {
          "file_path": "src/backend/base/langflow/components/composio/googlecalendar_composio.py",
          "classes": [
            {
              "name": "ComposioGoogleCalendarAPIComponent",
              "bases": [
                "ComposioBaseComponent"
              ],
              "docstring": "Google Calendar API component for interacting with Google Calendar services.",
              "methods": [
                {
                  "name": "execute_action",
                  "docstring": "Execute action and return response as Message."
                },
                {
                  "name": "update_build_config",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "app_name",
                "_list_variables",
                "_all_fields",
                "_bool_variables",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "composio.Action",
            "langflow.base.composio.composio_base.ComposioBaseComponent",
            "langflow.inputs.BoolInput",
            "langflow.inputs.IntInput",
            "langflow.inputs.MessageTextInput",
            "langflow.logging.logger"
          ],
          "docstring": null
        },
        "slack_composio": {
          "file_path": "src/backend/base/langflow/components/composio/slack_composio.py",
          "classes": [
            {
              "name": "ComposioSlackAPIComponent",
              "bases": [
                "ComposioBaseComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "execute_action",
                  "docstring": "Execute action and return response as Message."
                },
                {
                  "name": "update_build_config",
                  "docstring": null
                },
                {
                  "name": "set_default_tools",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "app_name",
                "_all_fields",
                "_bool_variables",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "composio.Action",
            "langflow.base.composio.composio_base.ComposioBaseComponent",
            "langflow.inputs.BoolInput",
            "langflow.inputs.IntInput",
            "langflow.inputs.MessageTextInput",
            "langflow.logging.logger"
          ],
          "docstring": null
        }
      }
    },
    "chains": {
      "description": "Components in chains category",
      "base_path": "src/backend/base/langflow/components/chains",
      "components": {}
    },
    "ollama": {
      "description": "Components in ollama category",
      "base_path": "src/backend/base/langflow/components/ollama",
      "components": {
        "ollama_embeddings": {
          "file_path": "src/backend/base/langflow/components/ollama/ollama_embeddings.py",
          "classes": [
            {
              "name": "OllamaEmbeddingsComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_embeddings",
                  "docstring": null
                }
              ],
              "attributes": [
                "documentation",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "urllib.parse.urljoin",
            "httpx",
            "langchain_ollama.OllamaEmbeddings",
            "langflow.base.models.model.LCModelComponent",
            "langflow.base.models.ollama_constants.OLLAMA_EMBEDDING_MODELS",
            "langflow.base.models.ollama_constants.URL_LIST",
            "langflow.field_typing.Embeddings",
            "langflow.io.DropdownInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output"
          ],
          "docstring": null
        },
        "ollama": {
          "file_path": "src/backend/base/langflow/components/ollama/ollama.py",
          "classes": [
            {
              "name": "ChatOllamaComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "JSON_MODELS_KEY",
                "JSON_NAME_KEY",
                "JSON_CAPABILITIES_KEY",
                "DESIRED_CAPABILITY",
                "TOOL_CALLING_CAPABILITY",
                "inputs"
              ]
            }
          ],
          "imports": [
            "asyncio",
            "typing.Any",
            "urllib.parse.urljoin",
            "httpx",
            "langchain_ollama.ChatOllama",
            "langflow.base.models.model.LCModelComponent",
            "langflow.base.models.ollama_constants.URL_LIST",
            "langflow.field_typing.LanguageModel",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.io.BoolInput",
            "langflow.io.DictInput",
            "langflow.io.DropdownInput",
            "langflow.io.FloatInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.SliderInput",
            "langflow.logging.logger"
          ],
          "docstring": null
        }
      }
    },
    "apify": {
      "description": "Components in apify category",
      "base_path": "src/backend/base/langflow/components/apify",
      "components": {
        "apify_actor": {
          "file_path": "src/backend/base/langflow/components/apify/apify_actor.py",
          "classes": [
            {
              "name": "ApifyActorsComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "__init__",
                  "docstring": null
                },
                {
                  "name": "run_model",
                  "docstring": "Run the Actor and return node output."
                },
                {
                  "name": "build_tool",
                  "docstring": "Build a tool for an agent that runs the Apify Actor."
                },
                {
                  "name": "create_tool_class",
                  "docstring": "Create a tool class that runs an Apify Actor."
                },
                {
                  "name": "create_input_model_class",
                  "docstring": "Create a Pydantic model class for the Actor input."
                },
                {
                  "name": "_get_apify_client",
                  "docstring": "Get the Apify client.\n\nIs created if not exists or token changes."
                },
                {
                  "name": "_get_actor_latest_build",
                  "docstring": "Get the latest build of an Actor from the default build tag."
                },
                {
                  "name": "get_actor_input_schema_from_build",
                  "docstring": "Get the input schema from the Actor build.\n\nTrim the description to 250 characters."
                },
                {
                  "name": "_get_run_dataset_id",
                  "docstring": "Get the dataset id from the run id."
                },
                {
                  "name": "dict_to_json_str",
                  "docstring": "Convert a dictionary to a JSON string."
                },
                {
                  "name": "actor_id_to_tool_name",
                  "docstring": "Turn actor_id into a valid tool name.\n\nTool name must only contain letters, numbers, underscores, dashes,\n    and cannot contain spaces."
                },
                {
                  "name": "_run_actor",
                  "docstring": "Run an Apify Actor and return the output dataset.\n\nArgs:\n    actor_id: Actor name from Apify store to run.\n    run_input: JSON input for the Actor.\n    fields: List of fields to extract from the dataset. Other fields will be ignored."
                },
                {
                  "name": "get_nested_value",
                  "docstring": "Get a nested value from a dictionary."
                },
                {
                  "name": "parse_dataset_fields",
                  "docstring": "Convert a string of comma-separated fields into a list of fields."
                },
                {
                  "name": "flatten",
                  "docstring": "Flatten a nested dictionary."
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            },
            {
              "name": "ApifyActorRun",
              "bases": [
                "BaseTool"
              ],
              "docstring": "Tool that runs Apify Actors.",
              "methods": [
                {
                  "name": "serialize_args_schema",
                  "docstring": null
                },
                {
                  "name": "_run",
                  "docstring": "Use the Apify Actor."
                }
              ],
              "attributes": []
            },
            {
              "name": "ActorInput",
              "bases": [
                "BaseModel"
              ],
              "docstring": "Input for the Apify Actor tool.",
              "methods": [],
              "attributes": []
            }
          ],
          "imports": [
            "json",
            "string",
            "typing.Any",
            "typing.cast",
            "apify_client.ApifyClient",
            "langchain_community.document_loaders.apify_dataset.ApifyDatasetLoader",
            "langchain_core.tools.BaseTool",
            "pydantic.BaseModel",
            "pydantic.Field",
            "pydantic.field_serializer",
            "langflow.custom.custom_component.component.Component",
            "langflow.field_typing.Tool",
            "langflow.inputs.inputs.BoolInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        }
      }
    },
    "langwatch": {
      "description": "Components in langwatch category",
      "base_path": "src/backend/base/langflow/components/langwatch",
      "components": {
        "langwatch": {
          "file_path": "src/backend/base/langflow/components/langwatch/langwatch.py",
          "classes": [
            {
              "name": "LangWatchComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "set_evaluators",
                  "docstring": null
                },
                {
                  "name": "update_build_config",
                  "docstring": null
                },
                {
                  "name": "get_dynamic_inputs",
                  "docstring": null
                }
              ],
              "attributes": [
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "json",
            "os",
            "typing.Any",
            "httpx",
            "loguru.logger",
            "langflow.base.langwatch.utils.get_cached_evaluators",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.FloatInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.NestedDictInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.data.Data",
            "langflow.schema.dotdict.dotdict"
          ],
          "docstring": null
        }
      }
    },
    "git": {
      "description": "Components in git category",
      "base_path": "src/backend/base/langflow/components/git",
      "components": {
        "git": {
          "file_path": "src/backend/base/langflow/components/git/git.py",
          "classes": [
            {
              "name": "GitLoaderComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "is_binary",
                  "docstring": "Check if a file is binary by looking for null bytes."
                },
                {
                  "name": "check_file_patterns",
                  "docstring": "Check if a file matches the given patterns.\n\nArgs:\n    file_path: Path to the file to check\n    patterns: Comma-separated list of glob patterns\n\nReturns:\n    bool: True if file should be included, False if excluded"
                },
                {
                  "name": "check_content_pattern",
                  "docstring": "Check if file content matches the given regex pattern.\n\nArgs:\n    file_path: Path to the file to check\n    pattern: Regex pattern to match against content\n\nReturns:\n    bool: True if content matches, False otherwise"
                },
                {
                  "name": "build_combined_filter",
                  "docstring": "Build a combined filter function from file and content patterns.\n\nArgs:\n    file_filter_patterns: Comma-separated glob patterns\n    content_filter_pattern: Regex pattern for content\n\nReturns:\n    callable: Filter function that takes a file path and returns bool"
                },
                {
                  "name": "update_build_config",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "trace_type",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "re",
            "tempfile",
            "contextlib.asynccontextmanager",
            "fnmatch.fnmatch",
            "pathlib.Path",
            "anyio",
            "langchain_community.document_loaders.git.GitLoader",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.DropdownInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.data.Data"
          ],
          "docstring": null
        },
        "gitextractor": {
          "file_path": "src/backend/base/langflow/components/git/gitextractor.py",
          "classes": [
            {
              "name": "GitExtractorComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "os",
            "shutil",
            "tempfile",
            "contextlib.asynccontextmanager",
            "pathlib.Path",
            "aiofiles",
            "git",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.schema.data.Data",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        }
      }
    },
    "mistral": {
      "description": "Components in mistral category",
      "base_path": "src/backend/base/langflow/components/mistral",
      "components": {
        "mistral": {
          "file_path": "src/backend/base/langflow/components/mistral/mistral.py",
          "classes": [
            {
              "name": "MistralAIModelComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain_mistralai.ChatMistralAI",
            "pydantic.v1.SecretStr",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.LanguageModel",
            "langflow.io.BoolInput",
            "langflow.io.DropdownInput",
            "langflow.io.FloatInput",
            "langflow.io.IntInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput"
          ],
          "docstring": null
        },
        "mistral_embeddings": {
          "file_path": "src/backend/base/langflow/components/mistral/mistral_embeddings.py",
          "classes": [
            {
              "name": "MistralAIEmbeddingsComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_embeddings",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain_mistralai.embeddings.MistralAIEmbeddings",
            "pydantic.v1.SecretStr",
            "langflow.base.models.model.LCModelComponent",
            "langflow.field_typing.Embeddings",
            "langflow.io.DropdownInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput"
          ],
          "docstring": null
        }
      }
    },
    "openai": {
      "description": "Components in openai category",
      "base_path": "src/backend/base/langflow/components/openai",
      "components": {
        "openai": {
          "file_path": "src/backend/base/langflow/components/openai/openai.py",
          "classes": [
            {
              "name": "OpenAIEmbeddingsComponent",
              "bases": [
                "LCEmbeddingsModel"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_embeddings",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langchain_openai.OpenAIEmbeddings",
            "langflow.base.embeddings.model.LCEmbeddingsModel",
            "langflow.base.models.openai_constants.OPENAI_EMBEDDING_MODEL_NAMES",
            "langflow.field_typing.Embeddings",
            "langflow.io.BoolInput",
            "langflow.io.DictInput",
            "langflow.io.DropdownInput",
            "langflow.io.FloatInput",
            "langflow.io.IntInput",
            "langflow.io.MessageTextInput",
            "langflow.io.SecretStrInput"
          ],
          "docstring": null
        },
        "openai_chat_model": {
          "file_path": "src/backend/base/langflow/components/openai/openai_chat_model.py",
          "classes": [
            {
              "name": "OpenAIModelComponent",
              "bases": [
                "LCModelComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_model",
                  "docstring": null
                },
                {
                  "name": "_get_exception_message",
                  "docstring": "Get a message from an OpenAI exception.\n\nArgs:\n    e (Exception): The exception to get the message from.\n\nReturns:\n    str: The message from the exception."
                },
                {
                  "name": "update_build_config",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "langchain_openai.ChatOpenAI",
            "pydantic.v1.SecretStr",
            "langflow.base.models.model.LCModelComponent",
            "langflow.base.models.openai_constants.OPENAI_CHAT_MODEL_NAMES",
            "langflow.base.models.openai_constants.OPENAI_REASONING_MODEL_NAMES",
            "langflow.field_typing.LanguageModel",
            "langflow.field_typing.range_spec.RangeSpec",
            "langflow.inputs.inputs.BoolInput",
            "langflow.inputs.inputs.DictInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.IntInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.SliderInput",
            "langflow.inputs.inputs.StrInput",
            "langflow.logging.logger",
            "openai.BadRequestError"
          ],
          "docstring": null
        }
      }
    },
    "serper": {
      "description": "Components in serper category",
      "base_path": "src/backend/base/langflow/components/serper",
      "components": {
        "google_serper_api_core": {
          "file_path": "src/backend/base/langflow/components/serper/google_serper_api_core.py",
          "classes": [
            {
              "name": "GoogleSerperAPICore",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "search_serper",
                  "docstring": null
                },
                {
                  "name": "text_search_serper",
                  "docstring": null
                },
                {
                  "name": "_build_wrapper",
                  "docstring": null
                },
                {
                  "name": "build",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langchain_community.utilities.google_serper.GoogleSerperAPIWrapper",
            "langflow.custom.custom_component.component.Component",
            "langflow.io.IntInput",
            "langflow.io.MultilineInput",
            "langflow.io.Output",
            "langflow.io.SecretStrInput",
            "langflow.schema.dataframe.DataFrame",
            "langflow.schema.message.Message"
          ],
          "docstring": null
        }
      }
    },
    "datastax": {
      "description": "Components in datastax category",
      "base_path": "src/backend/base/langflow/components/datastax",
      "components": {
        "cassandra": {
          "file_path": "src/backend/base/langflow/components/datastax/cassandra.py",
          "classes": [
            {
              "name": "CassandraChatMemory",
              "bases": [
                "LCChatMemoryComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_message_history",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "icon",
                "inputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.memory.model.LCChatMemoryComponent",
            "langflow.field_typing.constants.Memory",
            "langflow.inputs.inputs.DictInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langchain_community.chat_message_histories.CassandraChatMessageHistory",
            "uuid.UUID",
            "cassio"
          ],
          "docstring": null
        },
        "astradb_cql": {
          "file_path": "src/backend/base/langflow/components/datastax/astradb_cql.py",
          "classes": [
            {
              "name": "AstraDBCQLToolComponent",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "parse_timestamp",
                  "docstring": "Parse a timestamp string into Astra DB REST API format.\n\nArgs:\n    timestamp_str (str): Input timestamp string\n\nReturns:\n    str: Formatted timestamp string in YYYY-MM-DDTHH:MI:SS.000Z format\n\nRaises:\n    ValueError: If the timestamp cannot be parsed"
                },
                {
                  "name": "astra_rest",
                  "docstring": null
                },
                {
                  "name": "create_args_schema",
                  "docstring": null
                },
                {
                  "name": "build_tool",
                  "docstring": "Builds a Astra DB CQL Table tool.\n\nArgs:\n    name (str, optional): The name of the tool.\n\nReturns:\n    Tool: The built Astra DB tool."
                },
                {
                  "name": "projection_args",
                  "docstring": null
                },
                {
                  "name": "run_model",
                  "docstring": null
                }
              ],
              "attributes": [
                "inputs"
              ]
            }
          ],
          "imports": [
            "json",
            "urllib",
            "datetime.datetime",
            "datetime.timezone",
            "http.HTTPStatus",
            "typing.Any",
            "requests",
            "langchain_core.tools.StructuredTool",
            "langchain_core.tools.Tool",
            "pydantic.BaseModel",
            "pydantic.Field",
            "pydantic.create_model",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.io.DictInput",
            "langflow.io.IntInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.io.TableInput",
            "langflow.logging.logger",
            "langflow.schema.data.Data",
            "langflow.schema.table.EditMode"
          ],
          "docstring": null
        },
        "astra_db": {
          "file_path": "src/backend/base/langflow/components/datastax/astra_db.py",
          "classes": [
            {
              "name": "AstraDBChatMemory",
              "bases": [
                "LCChatMemoryComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_message_history",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "name",
                "inputs"
              ]
            }
          ],
          "imports": [
            "os",
            "astrapy.admin.parse_api_endpoint",
            "langflow.base.memory.model.LCChatMemoryComponent",
            "langflow.field_typing.constants.Memory",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.inputs.inputs.StrInput",
            "langchain_astradb.chat_message_histories.AstraDBChatMessageHistory"
          ],
          "docstring": null
        },
        "run": {
          "file_path": "src/backend/base/langflow/components/datastax/run.py",
          "classes": [
            {
              "name": "AssistantsRun",
              "bases": [
                "ComponentWithCache"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "__init__",
                  "docstring": null
                },
                {
                  "name": "update_build_config",
                  "docstring": null
                },
                {
                  "name": "process_inputs",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            },
            {
              "name": "EventHandler",
              "bases": [
                "AssistantEventHandler"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "__init__",
                  "docstring": null
                },
                {
                  "name": "on_exception",
                  "docstring": null
                }
              ],
              "attributes": []
            }
          ],
          "imports": [
            "typing.Any",
            "openai.lib.streaming.AssistantEventHandler",
            "langflow.base.astra_assistants.util.get_patched_openai_client",
            "langflow.custom.custom_component.component_with_cache.ComponentWithCache",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.schema.dotdict.dotdict",
            "langflow.schema.message.Message",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "create_assistant": {
          "file_path": "src/backend/base/langflow/components/datastax/create_assistant.py",
          "classes": [
            {
              "name": "AssistantsCreateAssistant",
              "bases": [
                "ComponentWithCache"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "__init__",
                  "docstring": null
                },
                {
                  "name": "process_inputs",
                  "docstring": null
                }
              ],
              "attributes": [
                "icon",
                "display_name",
                "description",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "loguru.logger",
            "langflow.base.astra_assistants.util.get_patched_openai_client",
            "langflow.custom.custom_component.component_with_cache.ComponentWithCache",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.inputs.inputs.StrInput",
            "langflow.schema.message.Message",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "astra_assistant_manager": {
          "file_path": "src/backend/base/langflow/components/datastax/astra_assistant_manager.py",
          "classes": [
            {
              "name": "AstraAssistantManager",
              "bases": [
                "ComponentWithCache"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "__init__",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "asyncio",
            "asyncio.to_thread",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "typing.cast",
            "astra_assistants.astra_assistants_manager.AssistantManager",
            "langchain_core.agents.AgentFinish",
            "loguru.logger",
            "langflow.base.agents.events.ExceptionWithMessageError",
            "langflow.base.agents.events.process_agent_events",
            "langflow.base.astra_assistants.util.get_patched_openai_client",
            "langflow.base.astra_assistants.util.litellm_model_names",
            "langflow.base.astra_assistants.util.sync_upload",
            "langflow.base.astra_assistants.util.wrap_base_tool_as_tool_interface",
            "langflow.custom.custom_component.component_with_cache.ComponentWithCache",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.FileInput",
            "langflow.inputs.inputs.HandleInput",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.memory.delete_message",
            "langflow.schema.content_block.ContentBlock",
            "langflow.schema.message.Message",
            "langflow.template.field.base.Output",
            "langflow.utils.constants.MESSAGE_SENDER_AI",
            "langflow.schema.log.SendMessageFunctionType"
          ],
          "docstring": null
        },
        "astra_vectorize": {
          "file_path": "src/backend/base/langflow/components/datastax/astra_vectorize.py",
          "classes": [
            {
              "name": "AstraVectorizeComponent",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "build_options",
                  "docstring": null
                }
              ],
              "attributes": [
                "legacy",
                "icon",
                "name",
                "VECTORIZE_PROVIDERS_MAPPING",
                "VECTORIZE_MODELS_STR",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "typing.Any",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.DictInput",
            "langflow.inputs.inputs.DropdownInput",
            "langflow.inputs.inputs.MessageTextInput",
            "langflow.inputs.inputs.SecretStrInput",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "dotenv": {
          "file_path": "src/backend/base/langflow/components/datastax/dotenv.py",
          "classes": [
            {
              "name": "Dotenv",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "process_inputs",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "io",
            "dotenv.load_dotenv",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.MultilineSecretInput",
            "langflow.schema.message.Message",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "list_assistants": {
          "file_path": "src/backend/base/langflow/components/datastax/list_assistants.py",
          "classes": [
            {
              "name": "AssistantsListAssistants",
              "bases": [
                "ComponentWithCache"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "__init__",
                  "docstring": null
                },
                {
                  "name": "process_inputs",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.astra_assistants.util.get_patched_openai_client",
            "langflow.custom.custom_component.component_with_cache.ComponentWithCache",
            "langflow.schema.message.Message",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "get_assistant": {
          "file_path": "src/backend/base/langflow/components/datastax/get_assistant.py",
          "classes": [
            {
              "name": "AssistantsGetAssistantName",
              "bases": [
                "ComponentWithCache"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "__init__",
                  "docstring": null
                },
                {
                  "name": "process_inputs",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.astra_assistants.util.get_patched_openai_client",
            "langflow.custom.custom_component.component_with_cache.ComponentWithCache",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.inputs.inputs.StrInput",
            "langflow.schema.message.Message",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "astradb_tool": {
          "file_path": "src/backend/base/langflow/components/datastax/astradb_tool.py",
          "classes": [
            {
              "name": "AstraDBToolComponent",
              "bases": [
                "LCToolComponent"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "_build_collection",
                  "docstring": null
                },
                {
                  "name": "create_args_schema",
                  "docstring": "DEPRECATED: This method is deprecated. Please use create_args_schema_v2 instead.\n\nIt is keep only for backward compatibility."
                },
                {
                  "name": "create_args_schema_v2",
                  "docstring": "Create the tool input schema using the new tool parameters configuration."
                },
                {
                  "name": "build_tool",
                  "docstring": "Builds an Astra DB Collection tool.\n\nReturns:\n    Tool: The built Astra DB tool."
                },
                {
                  "name": "projection_args",
                  "docstring": "Build the projection arguments for the Astra DB query."
                },
                {
                  "name": "parse_timestamp",
                  "docstring": "Parse a timestamp string into Astra DB REST API format.\n\nArgs:\n    timestamp_str (str): Input timestamp string\n\nReturns:\n    datetime: Datetime object\n\nRaises:\n    ValueError: If the timestamp cannot be parsed"
                },
                {
                  "name": "build_filter",
                  "docstring": "Build filter dictionary for Astra DB query.\n\nArgs:\n    args: Dictionary of arguments from the tool\n    filter_settings: List of filter settings from tools_params_v2\nReturns:\n    Dictionary containing the filter conditions"
                },
                {
                  "name": "run_model",
                  "docstring": "Run the query to get the data from the Astra DB collection."
                }
              ],
              "attributes": [
                "inputs"
              ]
            }
          ],
          "imports": [
            "os",
            "datetime.datetime",
            "datetime.timezone",
            "typing.Any",
            "astrapy.Collection",
            "astrapy.DataAPIClient",
            "astrapy.Database",
            "astrapy.admin.parse_api_endpoint",
            "langchain_core.tools.StructuredTool",
            "langchain_core.tools.Tool",
            "pydantic.BaseModel",
            "pydantic.Field",
            "pydantic.create_model",
            "langflow.base.langchain_utilities.model.LCToolComponent",
            "langflow.io.BoolInput",
            "langflow.io.DictInput",
            "langflow.io.HandleInput",
            "langflow.io.IntInput",
            "langflow.io.SecretStrInput",
            "langflow.io.StrInput",
            "langflow.io.TableInput",
            "langflow.logging.logger",
            "langflow.schema.data.Data",
            "langflow.schema.table.EditMode"
          ],
          "docstring": null
        },
        "getenvvar": {
          "file_path": "src/backend/base/langflow/components/datastax/getenvvar.py",
          "classes": [
            {
              "name": "GetEnvVar",
              "bases": [
                "Component"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "process_inputs",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "os",
            "langflow.custom.custom_component.component.Component",
            "langflow.inputs.inputs.StrInput",
            "langflow.schema.message.Message",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        },
        "create_thread": {
          "file_path": "src/backend/base/langflow/components/datastax/create_thread.py",
          "classes": [
            {
              "name": "AssistantsCreateThread",
              "bases": [
                "ComponentWithCache"
              ],
              "docstring": null,
              "methods": [
                {
                  "name": "__init__",
                  "docstring": null
                },
                {
                  "name": "process_inputs",
                  "docstring": null
                }
              ],
              "attributes": [
                "display_name",
                "description",
                "icon",
                "inputs",
                "outputs"
              ]
            }
          ],
          "imports": [
            "langflow.base.astra_assistants.util.get_patched_openai_client",
            "langflow.custom.custom_component.component_with_cache.ComponentWithCache",
            "langflow.inputs.inputs.MultilineInput",
            "langflow.schema.message.Message",
            "langflow.template.field.base.Output"
          ],
          "docstring": null
        }
      }
    }
  },
  "base_classes": {
    "BaseComponent": {
      "file_path": "src/backend/base/langflow/base/io/base.py",
      "description": "Base class for all Langflow components",
      "key_methods": [
        "build",
        "run",
        "get_result",
        "get_artifacts"
      ],
      "key_attributes": [
        "template",
        "frontend_node",
        "display_name",
        "description"
      ]
    },
    "CustomComponent": {
      "file_path": "src/backend/base/langflow/custom/custom_component/component.py",
      "description": "Base class for custom components",
      "key_methods": [
        "build",
        "run",
        "get_result",
        "get_artifacts",
        "get_code"
      ],
      "key_attributes": [
        "template",
        "frontend_node",
        "display_name",
        "description",
        "code"
      ]
    }
  },
  "template_structure": {
    "component_template": {
      "file_path": "src/backend/base/langflow/template/template/base.py",
      "description": "Base template structure for components",
      "fields": [
        "display_name",
        "description",
        "icon",
        "fields",
        "output_types",
        "documentation"
      ]
    },
    "frontend_node": {
      "file_path": "src/backend/base/langflow/template/frontend_node/base.py",
      "description": "Frontend node structure for UI representation",
      "fields": [
        "template",
        "base_classes",
        "output_types",
        "field_order"
      ]
    },
    "input_field": {
      "file_path": "src/backend/base/langflow/template/field/base.py",
      "description": "Input field structure and validation",
      "fields": [
        "name",
        "type",
        "required",
        "default",
        "description",
        "field_type",
        "multiline",
        "password",
        "list",
        "file_path",
        "file_types",
        "show",
        "advanced"
      ]
    }
  },
  "connection_patterns": {
    "input_output_rules": {
      "description": "Rules for connecting components",
      "patterns": [
        "Text outputs can connect to Text inputs",
        "List outputs can connect to List inputs",
        "Dict outputs can connect to Dict inputs",
        "BaseComponent outputs can connect to BaseComponent inputs"
      ]
    },
    "type_compatibility": {
      "description": "Type compatibility rules for connections",
      "rules": [
        "Exact type matches are always valid",
        "Subtype relationships are valid (e.g., Text can connect to BaseComponent)",
        "List types must match element types",
        "Dict types must have compatible key-value types"
      ]
    }
  },
  "configuration_options": {
    "field_types": [
      "str",
      "int",
      "float",
      "bool",
      "list",
      "dict",
      "BaseComponent",
      "Text",
      "Image",
      "Audio",
      "Video",
      "File",
      "Data",
      "Tool",
      "Agent",
      "Chain",
      "LLM",
      "Embeddings",
      "VectorStore",
      "Document",
      "PromptTemplate"
    ],
    "field_configurations": {
      "multiline": "For text fields that need multiple lines",
      "password": "For sensitive input fields",
      "list": "For fields that accept multiple values",
      "file_path": "For file selection fields",
      "file_types": "For restricting file types",
      "show": "For conditional field display",
      "advanced": "For advanced configuration options"
    }
  },
  "best_practices": {
    "component_design": [
      "Inherit from appropriate base classes",
      "Provide clear descriptions for all fields",
      "Use appropriate field types and validation",
      "Handle errors gracefully",
      "Provide meaningful output types"
    ],
    "field_naming": [
      "Use descriptive, lowercase names with underscores",
      "Avoid reserved Python keywords",
      "Be consistent with naming conventions",
      "Use clear, user-friendly display names"
    ],
    "error_handling": [
      "Validate inputs early",
      "Provide clear error messages",
      "Handle edge cases gracefully",
      "Log errors for debugging"
    ],
    "performance": [
      "Minimize unnecessary computations",
      "Use async operations when possible",
      "Cache expensive operations",
      "Handle large data efficiently"
    ]
  },
  "example_flows": {
    "simple_chat": {
      "description": "Basic chat flow with user input and LLM response",
      "components": [
        "User Input (Text)",
        "LLM Chain",
        "Chat Output"
      ],
      "connections": [
        "User Input -> LLM Chain",
        "LLM Chain -> Chat Output"
      ]
    },
    "rag_pipeline": {
      "description": "Retrieval-Augmented Generation pipeline",
      "components": [
        "User Input (Text)",
        "Document Loader",
        "Text Splitter",
        "Embeddings",
        "Vector Store",
        "Retriever",
        "LLM Chain",
        "Chat Output"
      ],
      "connections": [
        "User Input -> Retriever",
        "Document Loader -> Text Splitter",
        "Text Splitter -> Embeddings",
        "Embeddings -> Vector Store",
        "Vector Store -> Retriever",
        "Retriever -> LLM Chain",
        "LLM Chain -> Chat Output"
      ]
    }
  },
  "file_structure": {
    "backend_root": "src/backend/base/langflow",
    "components_dir": "src/backend/base/langflow/components",
    "template_dir": "src/backend/base/langflow/template",
    "base_dir": "src/backend/base/langflow/base",
    "custom_dir": "src/backend/base/langflow/custom",
    "api_dir": "src/backend/base/langflow/api"
  }
}